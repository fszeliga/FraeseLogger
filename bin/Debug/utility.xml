<?xml version="1.0"?>
<doc>
    <assembly>
        <name>utility</name>
    </assembly>
    <members>
        <member name="T:De.Boenigk.Utility.CNC.AIProperties">
            <summary>
            Eigenschaften des AI Interepreters
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.AIProperties.ArcSolution">
            <summary>
            Definiert die Auflösung der AI Kreisbogen 
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.AIProperties.ViewPropertiesDialog">
            <summary>
            True, Datei- Eigenschaften Fenster am Anfang anzeigen
            </summary>
        </member>
        <member name="T:De.Boenigk.Utility.Animation.BitmapPlace">
            <summary>
            Ein Symbol als Bitmap an einer Position zeichnen
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.Animation.BitmapPlace.C_Centre">
            <summary>
            Symbol vom Mittelpunkt positionieren
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.Animation.BitmapPlace.C_Zero">
            <summary>
            Symbol vom Nullpunkt positionieren
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.Animation.BitmapPlace.myLastRectangle">
            <summary>
            Position des Symbols wird abgespeichert, um ihn später zu löschen
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Animation.BitmapPlace.#ctor">
            <summary>
            Standard Konstruktor
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.Animation.BitmapPlace.myDrawn">
            <summary>
            Abfrage ob der erster Kreuz gezeichnet ist
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Animation.BitmapPlace.Draw(System.Drawing.Graphics,System.Drawing.Bitmap,System.Drawing.Bitmap,System.Drawing.Point,System.Int32)">
            <summary>
            Ein Kreuz wird gezeichnet
            </summary>
            <param name="aGraphics">Graphics</param>
            <param name="aBitmap">Zeichnung als Bitmap</param>
            <param name="aSymbol">Symbol als Bitmap das an der Position X,Y gezeichnet wird</param>
            <param name="aPoint">Position X, Y</param>
            <param name="aTyp">Typ der Positionierung (C_Centre , C_Zero) </param>
        </member>
        <member name="M:De.Boenigk.Utility.Animation.BitmapPlace.Redraw(System.Drawing.Bitmap,System.Drawing.Graphics)">
            <summary>
            Zeichnung neu zeichnen, das alte Symbol wird überschrieben
            </summary>
            <param name="aBitmap">Zeichnung als Bitmap</param>
            <param name="aGraphics">Graphics</param>
        </member>
        <member name="T:De.Boenigk.Utility.CNC.ActiveTool">
            <summary>
            Erzeugt eine Liste der benutzen Werkzeuge 
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.ActiveTool.#ctor">
            <summary>
            Standard Konstruktor
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.ActiveTool.IsInActiveToolNumber(System.Int32,System.Collections.Generic.List{De.Boenigk.Utility.CNC.Txx})">
            <summary>
            IsInActiveToolNumber prüft ob, die angegebene Werkzeugsnummer in der Liste vorhanden ist.
            </summary>
            <param name="aTxx">Werkzeugsnummer</param>
            <param name="aActiveTools">ArrayList mit ausgewählten Werkzeugnummern</param>
            <returns>True, Werkzeugsnummer in der Liste gefunden</returns>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.ActiveTool.UpdateActiveToolNumbers(De.Boenigk.Utility.CNC.Polygon,System.Collections.Generic.List{De.Boenigk.Utility.CNC.Txx})">
            <summary>
            Alle Werkzeugnummern werden in ActiveToolNumbers ArrayList eingefügt. 
            </summary>
            <param name="aPolygon">Polygon Objekt</param>
            <param name="aActiveTools">ArrayList mit ausgewählten Werkzeugnummern</param>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.ActiveTool.UpdateActiveToolNumbersSequenceFromFile(De.Boenigk.Utility.CNC.Polygon,System.Collections.ArrayList)">
            <summary>
            Werkzeuge werden in die Liste eingetragen. Diese Liste stellt 
            die Datei- Abarbeitung- Reihenfolge dar z.B.: T1 -> T2 -> T3 -> T1 -> T4 -> T2
            </summary>
            <param name="aPolygon">Polygon Objekt</param>
            <param name="aActiveToolsSequenceFromFile">ArrayList mit Txx Objekten in der Abarbeitungreihenfolge</param>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.ActiveTool.UpdateG4243ToolList(De.Boenigk.Utility.CNC.Polygon,System.Collections.Generic.List{De.Boenigk.Utility.CNC.Txx})">
            <summary>
            Alle Werkzeuge mit G42/G43 werden eingefügt.
            </summary>
            <param name="aPolygon">Polygon Objekt</param>
            <param name="aActiveTools">ArrayList mit ausgewählten Werkzeugnummern</param>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.ActiveTool.CreateActiveToolNumbers(System.Byte[],System.Collections.Generic.List{De.Boenigk.Utility.CNC.Txx})">
            <summary>
            Alle Werkzeugnummern werden in ActiveToolNumbers ArrayList eingefügt.
            </summary>
            <param name="aBytes">Byte Array mit Polygon Objekten</param>
            <param name="aActiveTools">ArrayList mit ausgewählten Werkzeugnummern</param>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.ActiveTool.CreateActiveToolNumbers(System.Collections.Generic.List{System.Byte[]},System.Collections.Generic.List{De.Boenigk.Utility.CNC.Txx})">
            <summary>
            Alle Werkzeugnummern werden in ActiveToolNumbers ArrayList eingefügt.
            </summary>
            <param name="aLines">ArrayList mit Polygon Objekten</param>
            <param name="aActiveTools">ArrayList mit ausgewählten Werkzeugnummern</param>
        </member>
        <member name="T:De.Boenigk.Utility.CNC.C_Commands1">
            <summary>
            Command Bits Konstanten für Commands[0]
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.C_Commands1.SpindleOn">
            <summary>
            Spindel AN / AUS als Byte- Wert
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.C_Commands1.PumpOn">
            <summary>
            Pumpe AN / AUS als Byte- Wert
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.C_Commands1.Relay3">
            <summary>
            Relais 3 als Byte- Wert 
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.C_Commands1.Relay4">
            <summary>
            Relais 4 als Byte- Wert
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.C_Commands1.Relay5">
            <summary>
            Relais 5 (Port B) als Byte- Wert
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.C_Commands1.Relay6">
            <summary>
            Relais 6 (Port B) als Byte- Wert
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.C_Commands1.Relay7">
            <summary>
            Relais 7 (Port B)
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.C_Commands1.Relay8">
            <summary>
            Relais 8 (Port B) als Byte- Wert
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.C_Commands1.Relay10">
            <summary>
            Relais 10 (Port C) als Byte- Wert
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.C_Commands1.Relay11">
            <summary>
            Relais 11 (Port C) als Byte- Wert
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.C_Commands1.Relay12">
            <summary>
            Relais 12 (Port C) als Byte- Wert
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.C_Commands1.Relay13">
            <summary>
            Relais 13 (Port C) als Byte- Wert
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.C_Commands1.Relay14">
            <summary>
            Relais 14 (Port C) als Byte- Wert
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.C_Commands1.Relay15">
            <summary>
            Relais 15 (Port C) als Byte- Wert
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.C_Commands1.Relay16">
            <summary>
            Relais 16 (Port C) als Byte- Wert
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.C_Commands1.Relay17">
            <summary>
            Relais 17 (Port C) als Byte- Wert
            </summary>
        </member>
        <member name="T:De.Boenigk.Utility.CNC.DinExtension">
            <summary>
            DIN 66025 Erweiterung
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.DinExtension.#ctor">
            <summary>
            Konstruktor
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.DinExtension.#ctor(System.Int16,System.String,System.String)">
            <summary>
            Konstruktor mit Parameter
            </summary>
            <param name="aId">Id der Erweiterung  (Veknüpfung aus Datei)</param>
            <param name="aName">Name der Erweiterung</param>
            <param name="aStrParameter">Parameter als String</param>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.DinExtension.#ctor(System.Int16,System.String,System.Collections.Generic.List{System.Int32})">
            <summary>
            Konstruktor mit Parameter
            </summary>
            <param name="aId">Id der Erweiterung  (Veknüpfung aus Datei)</param>
            <param name="aName">Name der Erweiterung</param>
            <param name="aIntParameters">Liste mit Integer Parameters</param>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.DinExtension.#ctor(System.Int16,System.String,System.String,System.Collections.Generic.List{System.Int32})">
            <summary>
            Konstruktor mit Parameter
            </summary>
            <param name="aId">Id der Erweiterung  (Veknüpfung aus Datei)</param>
            <param name="aName">Name der Erweiterung</param>
            <param name="aStrParameter">Parameter als String</param>
            <param name="aIntParameters">Liste mit Integer Parameters</param>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.DinExtension.Id">
            <summary>
            ID der Erweiterung (Veknüpfung in Position)
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.DinExtension.Name">
            <summary>
            Name der Erweiterung. Die Bezeichnung wird in DIN 66025 gesucht
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.DinExtension.StrParameter">
            <summary>
            String Parameter der Erwiterung
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.DinExtension.IntParameters">
            <summary>
            Liste mit Int- Parameters
            </summary>
        </member>
        <member name="T:De.Boenigk.Utility.CNC.DinG53G59">
            <summary>
            Speichert ein G53-59 Zustand
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.DinG53G59.#ctor(De.Boenigk.Utility.Formulary.PointD3D,System.String,System.Int32)">
            <summary>
            Konstruktor
            </summary>
            <param name="aG53G59">Position</param>
            <param name="aGCodeLine">DIN 66025 Zeile</param>
            <param name="aStartIndex">StartIndex</param>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.DinG53G59.G53G59">
            <summary>
            G53-G59 Verschiebung
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.DinG53G59.GCodeLine">
            <summary>
            GCode- Zeile mit G- Verschiebung- Befehl
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.DinG53G59.StartIndex">
            <summary>
            Start-Index (ab dieser Position in der Liste beginnt die Verschiebung)
            </summary>
        </member>
        <member name="T:De.Boenigk.Utility.CNC.DinPosition">
            <summary>
            DIN Position
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.DinPosition.#ctor">
            <summary>
            Konstruktor
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.DinPosition.#ctor(System.Int32,System.String,System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            Konstruktor mit Parameter
            </summary>
            <param name="aNumber">Nummer</param>
            <param name="aText">Text</param>
            <param name="aX">X Koordinate</param>
            <param name="aY">Y Koordinate</param>
            <param name="aZ">Z Koordinate</param>
            <param name="aA">A Koordinate</param>
            <param name="aB">B Koordinate</param>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.DinPosition.Number">
            <summary>
            Nummer der Position
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.DinPosition.Text">
            <summary>
            Text
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.DinPosition.X">
            <summary>
            Position X
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.DinPosition.Y">
            <summary>
            Position Y
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.DinPosition.Z">
            <summary>
            Position Z
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.DinPosition.A">
            <summary>
            Position A
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.DinPosition.B">
            <summary>
            Position B
            </summary>
        </member>
        <member name="T:De.Boenigk.Utility.CNC.DinPositionsSettings">
            <summary>
            DIN Positionen
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.DinPositionsSettings.C_Counts">
            <summary>
            Anzahl Positionen
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.DinPositionsSettings.CreateList">
            <summary>
            Erzeugt eine Liste mit 10 Positionen. Wenn die Liste bereits vorhanden, dann wird nichts getun.
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.DinPositionsSettings.Positions">
            <summary>
            Positionen
            </summary>
        </member>
        <member name="T:De.Boenigk.Utility.CNC.DxfToolProperty">
            <summary>
            Werkzeug- Eigenschaften
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.DxfToolProperty.#ctor(System.Byte,System.Boolean)">
            <summary>
            Konstruktor
            </summary>
            <param name="aTool">Werkzeugnummer</param>
            <param name="aImport">True, importieren</param>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.DxfToolProperty.Tool">
            <summary>
            Werkzeugnummer 
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.DxfToolProperty.Import">
            <summary>
            True, Werkzeug importieren
            </summary>
        </member>
        <member name="T:De.Boenigk.Utility.CNC.DxfProperties">
            <summary>
            DXF Eigenschaften
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.DxfProperties.GetVectorLength">
            <summary>
            Gibt die Vektorlänge zurück
            </summary>
            <returns>Vektorlänge oder (wenn nicht aktiv) 0</returns>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.DxfProperties.ToolList">
            <summary>
            Werkzeug- Eigenschaften
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.DxfProperties.ToolSet">
            <summary>
            Toolset enthält int Werte, die Werkzeugnummern entsprechen d.h. 
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.DxfProperties.Unit">
            <summary>
            Einheit
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.DxfProperties.DefaultImportOff">
            <summary>
            True, alle Layer sind ausgescahltet beim Fensteraufruf
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.DxfProperties.ArcDetail">
            <summary>
            Definiert die Auflösung der Din66025 Kreisbogen 
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.DxfProperties.UseVectorLength">
            <summary>
            True, Vektorlänge für die Berechnung verwen den
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.DxfProperties.IgnoreZ">
            <summary>
            True, Wert Z wird ignoriert und ist immer 0
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.DxfProperties.ViewPropertiesDialog">
            <summary>
            True, Datei- Eigenschaften Fenster am Anfang anzeigen
            </summary>
        </member>
        <member name="T:De.Boenigk.Utility.CNC.HpglProperties">
            <summary>
            Hpgl Eigenschaften
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.HpglProperties.#ctor">
            <summary>
            Konstruktor
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.HpglProperties.GetVectorLength">
            <summary>
            Gibt die Vektorlänge zurück
            </summary>
            <returns>Vektorlänge oder (wenn nicht aktiv) 0</returns>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.HpglProperties.HpglFirstLine">
            <summary>
            Beim generieren einer Hpgl Datei wird diese Zeile zuerst in die Datei geschrieben
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.HpglProperties.Unit">
            <summary>
            Einheit
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.HpglProperties.ViewPropertiesDialog">
            <summary>
            True, Datei- Eigenschaften Fenster am Anfang anzeigen
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.HpglProperties.ArcSolution">
            <summary>
            Definiert die Auflösung der Hpgl Kreisbogen 
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.HpglProperties.UseVectorLength">
            <summary>
            True, Vektorlänge für die Berechnung verwen den
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.HpglProperties.LoadExactly">
            <summary>
            True, die Datei wird komplett so wie ist geladen, d.h. die
            Leerlauf- Fahrten am Anfang und am Ende der Datei werden nicht entfernt
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.HpglProperties.PUOff">
            <summary>
            True, Entfernt PU Befehle beim Generieren der Daten zum Fräsen
            </summary>
        </member>
        <member name="T:De.Boenigk.Utility.CNC.I_CncData">
            <summary>
            Interface für Dateiformate wie HPGL, Din66025,... 
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.I_CncData.GetVectors">
            <summary>
            PolygonList, die Vektoren enthält wird zurückgegeben
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.I_CncData.GetDrills">
            <summary>
            PolygonList, die Vektoren enthält wird zurückgegeben
            </summary>
        </member>
        <member name="T:De.Boenigk.Utility.CNC.BitPolygon">
            <summary>
            Zugriff auf die einzelne Bits in byte array des Polygons
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.BitPolygon.C_SelectPos">
            <summary>
            Auswahl Bit
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.BitPolygon.C_DownPos">
            <summary>
            Down Bit
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.BitPolygon.#ctor(System.Byte[])">
            <summary>
            Standard Konstruktor
            </summary>
            <param name="theBytes">Polygon Byte Array</param>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.BitPolygon.Get(System.Int32)">
            <summary>
            Ruft den Wert des Bits an einer bestimmten Position ab
            </summary>
            <param name="aBitPolygon">BitPolygon Konstante</param>
            <returns></returns>
        </member>
        <member name="T:De.Boenigk.Utility.CNC.C_Basics">
            <summary>
            Konstanten für alle Datei Typen
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.C_Basics.ReadBytes">
            <summary>
            Anzahl der zu lesenden Bytes. Diese Anzahl Bytes 
            wird verwendet um den Typ der Datei festzustellen
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.C_Basics.#ctor">
            <summary>
            Standard Konstruktor
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.C_Basics.GetInterval(System.String)">
            <summary>
            Gibt den Interval zurück
            </summary>
            <param name="aFile">Dateiname</param>
            <returns>Interval größer 0</returns>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.C_Basics.GetInterval(System.Int64)">
            <summary>
            Gibt den Interval zurück
            </summary>
            <param name="aLength">Anzahl der Elemente</param>
            <returns>Interval größer 0</returns>
        </member>
        <member name="T:De.Boenigk.Utility.CNC.Commands">
            <summary>
            Befehle
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.Commands.SpindleOn">
            <summary>
            Spindel AN / AUS als Byte- Wert
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.Commands.PumpOn">
            <summary>
            Pumpe AN / AUS als Byte- Wert
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.Commands.StopOn">
            <summary>
            Stop, Maschinenarbeit wird angehalten
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.Commands.Pause">
            <summary>
            Pause, ab diese Stelle wird Fräsen
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.Commands.Selected">
            <summary>
            Auswahl des Polygons
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.Commands.Down">
            <summary>
            Down oder Up
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.Commands.G40">
            <summary>
            G40 - Bahnkorrektur-Aufruf deaktiviert
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.Commands.G41">
            <summary>
            G41 - Bahnkorrektur-Aufruf (Werkzeug links von der Kontur)
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.Commands.G42">
            <summary>
            Bahnkorrektur-Aufruf (Werkzeug rechts von der Kontur)
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.Commands.M995">
            <summary>
            Führt ein Makro aus dass mit M996 verknüpft ist
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.Commands.M996">
            <summary>
            Führt ein Makro aus dass mit M997 verknüpft ist
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.Commands.M997">
            <summary>
            Führt ein Makro aus dass mit M998 verknüpft ist
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.Commands.M998">
            <summary>
            Führt ein Makro aus dass mit M999 verknüpft ist
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.Commands.M49">
            <summary>
            Wert gesetzt, dann: Vorschub- und Drehzahloverride unwirksam
                     ansonsten: Vorschub- und Drehzahloverride wirksam
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.Commands.AD0">
            <summary>
            Schaltet analogen Ausgang 0 (default) ein
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.Commands.AD1">
            <summary>
            Schaltet analogen Ausgang 1 ein
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.Commands.AD2">
            <summary>
            Schaltet analogen Ausgang 2 ein
            </summary>
        </member>
        <member name="T:De.Boenigk.Utility.CNC.C_MessageText">
            <summary>
            Cnc Text Konstanten, werden in den Messages und Exceptions verwendet
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.C_MessageText.C_ReadEvent">
            <summary>
            Datei wird gelesen
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.C_MessageText.#ctor">
            <summary>
            Standard Konstruktor
            </summary>
        </member>
        <member name="T:De.Boenigk.Utility.CNC.DeviationAxis">
            <summary>
            Definiert die Umleitung der Achsen (für die grafische Anzeige)
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.DeviationAxis.None">
            <summary>
            Keine Umleitung der Achsen für die grafische Anzeige
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.DeviationAxis.AToX">
            <summary>
            A Achse wird für die grafische Anzeige nach X umgeleitet
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.DeviationAxis.AToY">
            <summary>
            A Achse wird für die grafische Anzeige nach Y umgeleitet
            </summary>
        </member>
        <member name="T:De.Boenigk.Utility.CNC.Dimension">
            <summary>
            Definiert die Dimension der PolygonList zwischen 2D,3D und 4D
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.Dimension.Unknown">
            <summary>
            Undefinierter Zustand
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.Dimension.Level2D">
            <summary>
            PolygonList besteht aus 2D Elementen X,Y
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.Dimension.Level3D">
            <summary>
            PolygonList besteht aus 3D Elementen X,Y und Z
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.Dimension.Level4D">
            <summary>
            PolygonList besteht aus 4D Elementen X,Y,Z und A
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.Dimension.Level5D">
            <summary>
            PolygonList besteht aus 5D Elementen X,Y,Z, A und B
            </summary>
        </member>
        <member name="T:De.Boenigk.Utility.CNC.I_FileReader">
            <summary>
            Interface für Dateiformate wie HPGL, Din66025,... 
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.I_FileReader.ShowProperties(System.Object,De.Boenigk.Help.HelpSettings)">
            <summary>
            Import Eigenschaften anzeigen
            </summary>
            <param name="aFormObject">WinForm Objekt, um das Fenster vor dem Hauptfenster zu setzen</param>
            <param name="aHelpSettings">Hilfe Objekt</param>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.I_FileReader.Create(System.String)">
            <summary>
            Methode, die CAM Datei auswertet und 
            die Ergebnis in der PolygonList abspeichert.
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.I_FileReader.IsThis(System.String)">
            <summary>
            Prüft ob die angegebene Datei eine HPGL Datei ist
            </summary>
            <param name="aFile">Dateiname mit Pfad</param>
            <returns>True, die Datei ist eine HPGL Datei</returns>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.I_FileReader.FileType">
            <summary>
            Typ des Interpreters 
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.I_FileReader.Name">
            <summary>
            Dateiname 
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.I_FileReader.Message">
            <summary>
            Gibt eine Nachricht zurück, z.B: Text einer Fehlermeldung
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.I_FileReader.MaxCount">
            <summary>
            Anzahl der Elemente in der Datei
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.I_FileReader.CurrentCount">
            <summary>
            Nummer des aktuell überarbeiteten Elementes
            </summary>
        </member>
        <member name="T:De.Boenigk.Utility.CNC.I_FileWriter">
            <summary>
            Interface für Dateiformate wie HPGL, Din66025,... 
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.I_FileWriter.Save">
            <summary>
            Eine Datei wird erzeugt
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.I_FileWriter.CurrentCount">
            <summary>
            Aktuelle Position
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.I_FileWriter.MaxCount">
            <summary>
            Anzahl der Elemente
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.I_FileWriter.Message">
            <summary>
            Gibt eine Nachricht zurück
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.I_FileWriter.Saved">
            <summary>
            True, Datei erfolgreich gespeichert
            </summary>
        </member>
        <member name="T:De.Boenigk.Utility.CNC.Layer">
            <summary>
            Layer
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.Layer.myFirstXMin">
            <summary>
            Startwert immer setzen
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.Layer.myFirstXMax">
            <summary>
            Startwert immer setzen
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.Layer.myFirstYMin">
            <summary>
            Startwert immer setzen
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.Layer.myFirstYMax">
            <summary>
            Startwert immer setzen
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.Layer.myFirstZMin">
            <summary>
            Startwert immer setzen
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.Layer.myFirstZMax">
            <summary>
            Startwert immer setzen
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Layer.#ctor(De.Boenigk.Utility.CNC.Layer.SourceType,System.Int32)">
            <summary>
            Konstruktor
            </summary>
            <param name="aLine">Zeile in der Datei</param>
            <param name="aSource">Angabe der Layer Quelle</param>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Layer.#ctor(De.Boenigk.Utility.CNC.Layer.SourceType,System.Int32,System.Int32)">
            <summary>
            Konstruktor
            </summary>
            <param name="aSource">Angabe der Layer Quelle</param>
            <param name="aLine">Zeile in der Datei</param>
            <param name="aTxx">Werkzeugnummer</param>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Layer.#ctor(De.Boenigk.Utility.CNC.Layer.SourceType,System.Int32,System.Int32,System.Double)">
            <summary>
            Konstruktor
            </summary>
            <param name="aSource">Angabe der Layer Quelle</param>
            <param name="aLine">Zeile in der Datei</param>
            <param name="aTxx">Werkzeugnummer</param>
            <param name="aDiameter">Durchmesser des Werkzeugs</param>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Layer.UpdateMinMax">
            <summary>
            Update min. und maximale Position
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Layer.UpdateMinMax(De.Boenigk.Utility.CNC.Position3d)">
            <summary>
            Update min. und maximale Position
            </summary>
            <param name="aPosition">Position</param>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Layer.MoveZ(System.Double)">
            <summary>
            Z Höher wird um einen Wert verschoben
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Layer.SetToZ0">
            <summary>
            Z Höher wird so angepasst dass Z max = 0 und Z min negativ ist
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Layer.GetMinXYTotal(System.Collections.Generic.List{De.Boenigk.Utility.CNC.Layer})">
            <summary>
            Sucht den minimale X,Y Werte aller Layers
            </summary>
            <param name="aLayers">Liste mit Layers</param>
            <returns>Min X,Y</returns>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Layer.GetMaxXYTotal(System.Collections.Generic.List{De.Boenigk.Utility.CNC.Layer})">
            <summary>
            Sucht den maximale X,Y Werte aller Layers
            </summary>
            <param name="aLayers">Liste mit Layers</param>
            <returns>Max X,Y</returns>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.Layer.Enabled">
            <summary>
            True, Layer ist aktiv
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.Layer.Color">
            <summary>
             Layer Color
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.Layer.Source">
            <summary>
            Gibt oder Setzt die Quelle des Layers
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.Layer.Text">
            <summary>
            Text über Layer
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.Layer.Txx">
            <summary>
            Werkzeugnummer
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.Layer.Diameter">
            <summary>
            Durchmesser des Werkzeuges
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.Layer.Line">
            <summary>
            Zeilenummer ab der der Werkzeug beginnt
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.Layer.RList">
            <summary>
            Enthält Radiuskorrektur für diesen Layer
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.Layer.List">
            <summary>
            Liste mit 'Position' Objekten, gespeichert als byte array.
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.Layer.Min">
            <summary>
            Minimale Größe X,Y der Positionen in der Liste
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.Layer.Max">
            <summary>
            Maximale Größe X,Y der Positionen in der Liste
            </summary>
        </member>
        <member name="T:De.Boenigk.Utility.CNC.Layer.SourceType">
            <summary>
            Unterscheidung zwischen 2D und 3D
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.PosEditor.RemoveFirstPU(De.Boenigk.Utility.CNC.Layer)">
            <summary>
            Erste PU's (Leerfahrten) entfernen
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.PosEditor.RemoveLastPU(De.Boenigk.Utility.CNC.Layer)">
            <summary>
            Letzte PU's (Leerfahrten) entfernen
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.PosEditor.Move(De.Boenigk.Utility.CNC.Layer,System.Single,System.Single)">
            <summary>
            Positionen in der Liste des Layers verschieben
            </summary>
            <param name="aLayer">Layer derren Liste verschoben wird</param>
            <param name="aX">X Wert um die X Position verschoben wird</param>
            <param name="aY">Y Wert um die Y Position verschoben wird</param>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.PosEditor.IsDown(System.Byte[])">
            <summary>
            True, Fräsvorgang sonst Eilgang
            </summary>
            <param name="aBytes">Byte Array</param>
            <returns>true ist Fräsvorgang</returns>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.PosEditor.IsPause(System.Byte[])">
            <summary>
            True, Pause sonst keine Pause
            </summary>
            <param name="aBytes">Byte Array</param>
            <returns>True ist Pause</returns>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.PosEditor.Pause(System.Byte[],System.Boolean)">
            <summary>
            Pause setzen oder entfernen
            </summary>
            <param name="aBytes">Byte Array</param>
            <param name="aPause">True, Pause wird gesetzt</param>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.PosEditor.GetX(System.Byte[])">
            <summary>
            X Wert aus Byte Array holen
            </summary>
            <param name="aBytes">Byte Array</param>
            <returns>X Wert oder null</returns>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.PosEditor.SetX(System.Collections.Generic.List{System.Byte[]},System.Int32,System.Single)">
            <summary>
            X Wert wird geändert
            </summary>
            <param name="aBytes">Liste mit Byte Arrays</param>
            <param name="aIndex">Index des Byte Arrays</param>
            <param name="aX">X Wert dass eingetragen wird</param>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.PosEditor.AddX(System.Collections.Generic.List{System.Byte[]},System.Int32,System.Single)">
            <summary>
            X Wert wird addiert
            </summary>
            <param name="aBytes">Liste mit Byte Arrays</param>
            <param name="aIndex">Index des Byte Arrays</param>
            <param name="aX">X Wert dass eingetragen wird</param>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.PosEditor.GetY(System.Byte[])">
            <summary>
            Y Wert aus Byte Array holen
            </summary>
            <param name="aBytes">Byte Array</param>
            <returns>Y Wert oder null</returns>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.PosEditor.SetY(System.Collections.Generic.List{System.Byte[]},System.Int32,System.Single)">
            <summary>
            Y Wert wird geändert
            </summary>
            <param name="aBytes">Liste mit Byte Arrays</param>
            <param name="aIndex">Index des Byte Arrays</param>
            <param name="aY">Y Wert dass eingetragen wird</param>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.PosEditor.AddY(System.Collections.Generic.List{System.Byte[]},System.Int32,System.Single)">
            <summary>
            Y Wert wird addiert
            </summary>
            <param name="aBytes">Liste mit Byte Arrays</param>
            <param name="aIndex">Index des Byte Arrays</param>
            <param name="aY">Y Wert dass eingetragen wird</param>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.PosEditor.GetZ(System.Byte[])">
            <summary>
            Z Wert aus Position3d Byte Array holen
            </summary>
            <param name="aBytes">Byte Array</param>
            <returns>Z Wert oder null</returns>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.PosEditor.SetZ(System.Collections.Generic.List{System.Byte[]},System.Int32,System.Single)">
            <summary>
            Z Wert wird geändert
            </summary>
            <param name="aBytes">Liste mit Byte Arrays</param>
            <param name="aIndex">Index des Byte Arrays</param>
            <param name="aZ">Z Wert dass eingetragen wird</param>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.PosEditor.GetA(System.Byte[])">
            <summary>
            A Wert aus Byte Array holen
            </summary>
            <param name="aBytes">Byte Array</param>
            <returns>A Wert oder null</returns>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.PosEditor.SetA(System.Collections.Generic.List{System.Byte[]},System.Int32,System.Single)">
            <summary>
            A Wert wird geändert
            </summary>
            <param name="aBytes">Liste mit Byte Arrays</param>
            <param name="aIndex">Index des Byte Arrays</param>
            <param name="aA">A Wert dass eingetragen wird</param>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.PosEditor.Select(System.Collections.Generic.List{System.Byte[]},System.Int32,System.Boolean)">
            <summary>
            Element wird markiert 
            </summary>
            <param name="aBytes">Liste mit Byte Array</param>
            <param name="aIndex">Index</param>
            <param name="aSelect">True, Element wird ausgewählt</param>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.PosEditor.IsSelected(System.Byte[])">
            <summary>
            Is dies Element ausgewählt
            </summary>
            <param name="aBytes">Byte Array dass geprüft wird</param>
            <returns>True, Element ist ausgewählt</returns>
        </member>
        <member name="T:De.Boenigk.Utility.CNC.PositionType">
            <summary>
            Das Objekt PositionType deifiniert den Typ der Position als eine Konstante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.PositionType.Park">
            <summary>
            Typ Parkposition
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.PositionType.Measure">
            <summary>
            Typ Messposition
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.PositionType.Zero">
            <summary>
            Typ Nullpunkt
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.PositionType.Move">
            <summary>
            Typ Nullpunkt
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Postprozessor.G04Hx.#ctor">
            <summary>
            Konstruktor
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Postprozessor.G04Hx.#ctor(System.UInt32,System.Collections.Generic.List{System.Byte})">
            <summary>
            Konstruktor
            </summary>
            <param name="aWait">Wartezeit in Millisekunden</param>
            <param name="aTx">Liste der Werzeuge für die es gilt</param>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.Postprozessor.G04Hx.Wait">
            <summary>
            Wartezeit in Millisekunden
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.Postprozessor.G04Hx.Tx">
            <summary>
            Liste der Werkzeuge für die die Wartezeit eingetragen werden soll
            </summary>
        </member>
        <member name="T:De.Boenigk.Utility.CNC.Position3d">
            <summary>
            Struct data
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.Position3d.Content">
            <summary>
            Definiert den Inhalt der Struktur (für Platzsparende Konvertierung nach Byte- Array)
            
            Byte[0]
            Bit - Wert      Befehl
            0   - 1         X
            1   - 2         Y
            2   - 4         Z
            3   - 8         A
            4   - 16        B
            5   - 32        Down (Wert gesetzt dann True (1), Fräsvorgang läuft, false Maschine fährt im Eilgang)
            6   - 64        Output (Aüsgänge)
            7   - 128       IndexOfLine
            Byte[1]
            0   - 0         frei
            1   - 2         Wait (Wartezeit in Millisekunden)
            2   - 4         Speed (Fahr- Geschwindigkeit in Millimeter pr Minute)
            3   - 8         SpindleSpeed (Spindel Dreh- Geschwindigkeit)
            4   - 16        Pause (M00 Befehl) dann True (1) -> Diese Pause kann vom Programm gesetzt/gelöscht werden!
            5   - 32        G40/41/42
            6   - 64        EditCommands (Bearbeitung Befehle als Bits)
            7   - 128       True (Bit gesetzt), dann DIN 66025 sonst 2D Formate wie: HPG, DXF, EPS etc.
            Byte[2]
            0   - 1         Werkzeugdurchmesser in Millimeter (double)
            1   - 2         Befehl M00, diese Pause kommt aus DIN 66025 (M00) und wird nicht geändert
            2   - 4         frei
            3   - 8         frei
            4   - 16        frei
            5   - 32        frei
            6   - 64        frei
            7   - 128       frei
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Position3d.SetXYDown(System.Byte[])">
            <summary>
            Setzt die Werte X,Y und Down in die Position Struct ein. Andere Werden auf null gesetzt.
            </summary>
            <param name="aBytes">Byte Array enthält Infos für VectorPoint</param>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Position3d.Set(System.Byte[])">
            <summary>
            Setzt das angegebene Byte Array in Position Struct ein.
            </summary>
            <param name="aBytes">Byte Array enthält Infos für VectorPoint</param>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Position3d.Set(System.Byte[],System.Int32)">
            <summary>
            Setzt das angegebene Byte Array in Position Struct ein.
            </summary>
            <param name="aBytes">Byte Array enthält Infos für VectorPoint</param>
            <param name="aStartIndex">Start Index</param>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Position3d.ToByteArray">
            <summary>
            Konvertiert Position nach Byte Array
            </summary>
            <returns>Byte Array</returns>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Position3d.SetG40">
            <summary>
            Radiuskorrektur wird beendet
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Position3d.SetG41">
            <summary>
            Radiuskorrektur wird gesetzt (Werkzeug links von der Kontur)
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Position3d.SetG42">
            <summary>
            Radiuskorrektur wird gesetzt (Werkzeug rechts von der Kontur)
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Position3d.Set(De.Boenigk.Utility.CNC.C_Commands1,System.Boolean)">
            <summary>
            Setzt oder löscht Ausgänge
            </summary>
            <param name="aOutput">Ausgang was gesetzt wird</param>
            <param name="aOn">True, Ausgang wird gesetzt</param>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Position3d.Set(System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            X, Y, Z Koordinate und Wertkzeug T wird gesetzt
            </summary>
            <param name="aX">X koordinate</param>
            <param name="aY">Y Koordinate</param>
            <param name="aY">Z Koordinate</param>
            <param name="aDown">Tru ist Down</param>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Position3d.Set(System.Single,System.Single,System.Single)">
            <summary>
            X, Y und Z Koordinate wird gesetzt
            </summary>
            <param name="aX">X koordinate</param>
            <param name="aY">Y Koordinate</param>
            <param name="aY">Z Koordinate</param>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Position3d.Set(System.Single,System.Single)">
            <summary>
            X und Y Koordinate wird gesetzt
            </summary>
            <param name="aX">X koordinate</param>
            <param name="aY">Y Koordinate</param>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Position3d.SetXY(System.Drawing.PointF)">
            <summary>
            X und Y Koordinate wird gesetzt
            </summary>
            <param name="aPointF">Punkt X,Y</param>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Position3d.IsM00">
            <summary>
            Ist M00 (Pause) gesetzt?
            </summary>
            <returns>true, ja</returns>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Position3d.SetM00">
            <summary>
            M00 Befehl wird gesetzt
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Position3d.DelM00">
            <summary>
            M00 Befehl wird entfernt
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Position3d.IsDown">
            <summary>
            True, Fräsvorgang sonst Eilgang
            </summary>
            <returns>true ist Fräsvorgang</returns>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Position3d.SetDown">
            <summary>
            Werkzeug wird gesenkt
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Position3d.SetUp">
            <summary>
            Werkzeug wird gehoben
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Position3d.IsPause">
            <summary>
            True, Pause sonst keine
            </summary>
            <returns>True ist Pause</returns>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Position3d.SetPause">
            <summary>
            Pause wird gesetzt
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Position3d.Select(System.Boolean)">
            <summary>
            Element auswählen
            </summary>
            <param name="aSelect">True, Element wird ausgewählt sonst false</param>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Position3d.IsSelected">
            <summary>
            Element wird ausgewählt
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Position3d.GetTitle">
            <summary>
            DStruct Titel string ausgeben
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Position3d.ToString">
            <summary>
            Struct als string zurückgeben
            </summary>
            <returns>struct als string</returns>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Position3d.CompareXYZA(De.Boenigk.Utility.CNC.Position)">
            <summary>
            Koordinaten X,Y,Z,A und B der Position vergleichen. 
            Wenn die Werte gleich sind dann wird true zurückgegeben 
            </summary>
            <param name="aPosition">Position Objekt dass verglichen wird</param>
            <returns>True, Kootdinaten sind gleich</returns>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Position3d.GetPointF">
            <summary>
            Die X und Y Koordinate als PointF zurückgeben
            </summary>
            <returns>PointF</returns>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Position3d.GetPointD">
            <summary>
            Die X und Y Koordinate als PointD zurückgeben
            </summary>
            <returns>PointF</returns>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.Position3d.X">
            <summary>
            Os X w milimetrach
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.Position3d.Y">
            <summary>
            Os Y w milimetrach
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.Position3d.Z">
            <summary>
            Os Z w milimetrach
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.Position3d.A">
            <summary>
            Os A w milimetrach
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.Position3d.B">
            <summary>
            Os B w milimetrach
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.Position3d.Output">
            <summary>
            Ausgänge schalten oder ausschalten
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.Position3d.IndexOfLine">
            <summary>
            Numer lini, tylko dla plikow typu DIN 66025 (G Codes)
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.Position3d.Wait">
            <summary>
            Wartezeit in Millisekunden, 
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.Position3d.Speed">
            <summary>
            Geschwindigkeit
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.Position3d.SpindleSpeed">
            <summary>
            Spindel Drehzahl
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.Position3d.G4142">
            <summary>
            Radiuskorrektur G41 und G42
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.Position3d.EditCommands">
            <summary>
            Enthält Bits für die Bearbeitung
            
            Bit     Wert        Funktion
            0       1           True, Element markiert (ausgewählt)
            1       2
            2       4
            3       8
            4       16
            5       32
            6       64
            7       128
            8       256
            9       512
            10      1024
            11      2048
            12      4096
            13      8192
            14      16384
            15      32768
            </summary>
        </member>
        <member name="T:De.Boenigk.Utility.CNC.Postprozessor.PP">
            <summary>
            Postprocessor 
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Postprozessor.PP.Init">
            <summary>
            Werte am Start einmal invertieren
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Postprozessor.PP.GetG04H(System.Byte)">
            <summary>
            Gibt die passende Wartezeit in Millisekunden für angegebene Werkzeugnummer zurück
            </summary>
            <param name="aTx">Werkzeugnummer</param>
            <returns>Wartezeit in Millisekunden</returns>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.Postprozessor.PP.myLastRelay">
            <summary>
            Enthält zuletzt geschaltete Relay
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Postprozessor.PP.SetRelay(De.Boenigk.Utility.CNC.Polygon,System.Byte)">
            <summary>
            Setzt Relay für passende Werkzeugnummer. Die zuletzt geschaltete Relay wird ausgeschaltet
            </summary>
            <param name="aPolygon">Polygon</param>
            <param name="aTx">Werkzeugnummer</param>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Postprozessor.PP.SetRelay(De.Boenigk.Utility.CNC.Polygon,System.Byte,System.Boolean)">
            <summary>
            Relay wird ein- oder ausgeschaltet
            </summary>
            <param name="aPolygon">Polygon in den das Relay ein- oder ausgeschaltet wird</param>
            <param name="aRelay">Relay Nummer</param>
            <param name="aOn">True ist einschalten sonst ausschalten</param>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.Postprozessor.PP.On">
            <summary>
            True, Postprozessor aktivieren
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.Postprozessor.PP.G04HDefault">
            <summary>
            Wartezeit dass eingetragen werden soll wenn '$' verfügbar und wenn keine Ausnahme in G04Hx verfügbar
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.Postprozessor.PP.G04HxList">
            <summary>
            Wartezeit- Ausnamhen
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.Postprozessor.PP.TxRelayOn">
            <summary>
            Liste mit Tx die Relay scahlten
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Postprozessor.TxRelayOn.#ctor">
            <summary>
            Konstruktor
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Postprozessor.TxRelayOn.#ctor(System.Byte,System.Byte)">
            <summary>
            Konstruktor
            </summary>
            <param name="aTx">Werkzeugnummer</param>
            <param name="aRelay">Relay</param>
        </member>
        <member name="T:De.Boenigk.Utility.CNC.Ad">
            <summary>
            Umschalter für analogen Ausgang
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Ad.#ctor(System.Int32)">
            <summary>
            Konstruktor mit Parameter
            </summary>
            <param name="aAdNumber">Befehlsnummer dass PWM umzuschalten</param>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Ad.#ctor">
            <summary>
            Konstruktor ohne Parameter
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.Ad.On">
            <summary>
            True, PWM Umschalter ist an
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.Ad.AdNumber">
            <summary>
            Befehl um analogen Ausgang umzuschalten
            </summary>
        </member>
        <member name="T:De.Boenigk.Utility.CNC.SVGProperties">
            <summary>
            Eigenschaften des AI Interepreters
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.SVGProperties.#ctor">
            <summary>
            Standars Konstruktor
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.SVGProperties.ArcSolution">
            <summary>
            Definiert die Auflösung der AI Kreisbogen 
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.SVGProperties.ViewPropertiesDialog">
            <summary>
            True, Datei- Eigenschaften Fenster am Anfang anzeigen
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.SVGProperties.Tools">
            <summary>
            Aktuelle Tools (um Color aus SVG Format auszulesen)
            </summary>
        </member>
        <member name="T:De.Boenigk.Utility.CNC.Polygon">
            <summary>
            Eine Einfache get/set Klasse für Anzeige der Vektoren
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.Polygon.C_X_Pos">
            <summary>
            X Position innerhalb vom Array
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.Polygon.C_Y_Pos">
            <summary>
            Y Position innerhalb vom Array
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.Polygon.C_Z_Pos">
            <summary>
            Z Position innerhalb vom Array
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.Polygon.C_Txx_Pos">
            <summary>
            T Position innerhalb vom Array
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.Polygon.C_Commands_Pos">
            <summary>
            Commands Position innerhalb vom Array
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.Polygon.C_Outputs">
            <summary>
            Ausgänge 
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.Polygon.C_Speed_Pos">
            <summary>
            Speed Position innerhalb vom Array
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.Polygon.C_A_Pos">
            <summary>
            A Position innerhalb vom Array
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.Polygon.C_Wait_Pos">
            <summary>
            Wartezeit Position innerhalb vom Array
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.Polygon.C_ID_Pos">
            <summary>
            ID, Indexnummer
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.Polygon.C_LayerID">
            <summary>
            ID, Indexnummer
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.Polygon.C_SpindleSpeed">
            <summary>
            Spindel Drehzahl
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.Polygon.C_B_Pos">
            <summary>
            B Position innerhalb vom Array
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.Polygon.C_ExtensionID">
            <summary>
            Erweiterung ID inner halb vom Array
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.Polygon.Length">
            <summary>
            Gibt die GESAMMTE Länge eines Polygon Objektes in Bytes
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.Polygon.C_NotUsedValue">
            <summary>
            Ein Wert dass ignoriert wird (entspricht keine Wert-Angabe = NULL)
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Polygon.#ctor">
            <summary>
            Standard Konstruktor
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Polygon.#ctor(System.Byte)">
            <summary>
            Konstruktor mit Angabe der Werkzeugnummer
            </summary>
            <param name="aT">Werkzeugnummer</param>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Polygon.#ctor(System.Single,System.Single,System.Single,System.Byte)">
            <summary>
            Konstruktor mit Parametern
            </summary>
            <param name="aX">Punkt X</param>
            <param name="aY">Punkt Y</param>
            <param name="aZ">Punkt Z</param>
            <param name="aT">Werkzeugnummer</param>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Polygon.#ctor(System.Byte[])">
            <summary>
            Konstruktor mit Byte Array
            </summary>
            <param name="byte[]">Byte Array mit Daten, die Länge muss mind. ByteLenght() betragen</param>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Polygon.#ctor(System.Byte[],System.Int32)">
            <summary>
            Konstruktor mit Byte Array
            </summary>
            <param name="byte[]">Byte Array mit Daten, die Länge muss mind. ByteLenght() betragen</param>
            <param name="aStartIndex">Start Index</param>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Polygon.CompareXYZAB(De.Boenigk.Utility.CNC.Polygon,System.Single)">
            <summary>
            Koordinaten X,Y,Z,A und B der Polygone vergleichen. 
            Wenn die Werte gleich sind dann wird true zurückgegeben 
            </summary>
            <param name="aPolygon">Polygon Objekt dass vergliechen wird</param>
            <param name="aTolerance">Toleranz Wert</param>
            <returns>True, Kootdinaten sind gleich</returns>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Polygon.CompareXYZA(De.Boenigk.Utility.CNC.Polygon,System.Single)">
            <summary>
            Koordinaten X,Y,Z und A der Polygone vergleichen. 
            Wenn die Werte gleich sind dann wird true zurückgegeben 
            </summary>
            <param name="aPolygon">Polygon Objekt dass vergliechen wird</param>
            <param name="aTolerance">Toleranz Wert</param>
            <returns>True, Kootdinaten sind gleich</returns>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Polygon.CompareXYZA(De.Boenigk.Utility.CNC.Polygon)">
            <summary>
            Koordinaten X,Y,Z und A der Polygone vergleichen. 
            Wenn die Werte gleich sind dann wird true zurückgegeben 
            </summary>
            <param name="aPolygon">Polygon Objekt dass verglichen wird</param>
            <returns>True, Kootdinaten sind gleich</returns>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Polygon.GetPointF">
            <summary>
            Die X und Y Koordinate als PointF zurückgeben
            </summary>
            <returns>PointF</returns>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Polygon.GetPointD">
            <summary>
            Die X und Y Koordinate als PointD zurückgeben
            </summary>
            <returns>PointF</returns>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Polygon.EqualsXYZABTDown(System.Object)">
            <summary>
            Inhalt des Objektes wird mit dem aktuellem Objekt verglichen. Es werden X,Y,Z,A,B Koordinaten, T Werkzeugnummer 
            und Down Werkzeug unten oder oben verglichen. Wenn die beiden Objekte gleich sind, dann wird True zurückgegeben.
            </summary>
            <param name="aObject">Polygon Objekt</param>
            <returns>True, Objekte sind gleich</returns>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Polygon.EqualsXYZAB(System.Object)">
            <summary>
            Inhalt des Objektes wird mit dem aktuellem Objekt verglichen. Es werden X,Y,Z,A,B Koordinaten,  
            verglichen. Wenn die beiden Objekte gleich sind, dann wird True zurückgegeben.
            </summary>
            <param name="aObject">Polygon Objekt</param>
            <returns>True, Objekte sind gleich</returns>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Polygon.EqualsXYT(System.Object)">
            <summary>
            Inhalt des Objektes wird mit dem aktuellem Objekt verglichen. Es werden X,Y, T Werkzeugnummer 
            verglichen. Wenn die beiden Objekte gleich sind, dann wird True zurückgegeben.
            </summary>
            <param name="aObject">Polygon Objekt</param>
            <returns>True, Objekte sind gleich</returns>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Polygon.ToString">
            <summary>
            Werte des Polygon Objektes als Zeichenkette zurückgegeben
            </summary>
            <returns>string mit Polygon Werten</returns>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Polygon.CreatePolygon(System.Byte[],System.Int32)">
            <summary>
            Aus einem Byte- Feld wird ein Polygon Objekt erzeugt
            </summary>
            <param name="aBytes">Feld mit Byte Objekten</param>
            <param name="aStartIndex">Start Index</param>
            <returns>Polygon Objekt</returns>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Polygon.AddX(System.Byte[],System.Single)">
            <summary>
            Addiert den Wert zu X zu und gibt den neuen Byte Array zurück
            </summary>
            <param name="aBytes">Polygon Werte als Byte Array</param>
            <param name="aValue">Wert dass addiert wird</param>
            <returns>Neuer Byte Array wird zurückgegeben</returns>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Polygon.AddY(System.Byte[],System.Single)">
            <summary>
            Addiert den Wert zu Y zu und gibt den neuen Byte Array zurück
            </summary>
            <param name="aBytes">Polygon Werte als Byte Array</param>
            <param name="aValue">Wert dass addiert wird</param>
            <returns>Neuer Byte Array wird zurückgegeben</returns>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Polygon.AddX(System.Byte[],System.Single,System.Int32)">
            <summary>
            Addiert den Wert zu X zu und gibt den neuen Byte Array zurück
            </summary>
            <param name="aBytes">Polygon Werte als Byte Array</param>
            <param name="aValue">Wert dass addiert wird</param>
            <param name="aStartIndex">Start Index</param>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Polygon.AddY(System.Byte[],System.Single,System.Int32)">
            <summary>
            Addiert den Wert zu Y zu und gibt den neuen Byte Array zurück
            </summary>
            <param name="aBytes">Polygon Werte als Byte Array</param>
            <param name="aValue">Wert dass addiert wird</param>
            <param name="aStartIndex">Start Index</param>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Polygon.AddA(System.Byte[],System.Single)">
            <summary>
            Addiert den Wert zu A zu und schreibt in den neuen Byte Array zurück
            </summary>
            <param name="aBytes">Polygon Werte als Byte Array</param>
            <param name="aValue">Wert dass addiert wird</param>
            <returns>Neuer Byte Array wird zurückgegeben</returns>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Polygon.AddB(System.Byte[],System.Single)">
            <summary>
            Addiert den Wert zu B zu und schreibt in den neuen Byte Array zurück
            </summary>
            <param name="aBytes">Polygon Werte als Byte Array</param>
            <param name="aValue">Wert dass addiert wird</param>
            <returns>Neuer Byte Array wird zurückgegeben</returns>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Polygon.SetLayer(System.Byte[],System.Byte)">
            <summary>
            Ein Layer wird gesetzt
            </summary>
            <param name="aBytes">Polygon Werte als Byte Array</param>
            <param name="aLayer">Layer (0 bis 255)</param>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Polygon.SetID(System.Byte[],System.Int32)">
            <summary>
            ID wird gesetzt
            </summary>
            <param name="aBytes">Polygon Werte als Byte Array</param>
            <param name="aID">ID, dass gesetzt werden soll</param>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Polygon.SetID(System.Byte[],System.Int32,System.Int32)">
            <summary>
            ID wird gesetzt
            </summary>
            <param name="aBytes">Polygon Werte als Byte Array</param>
            <param name="aStartIndex">Start Index innerhalb byte[] ArrayList</param>
            <param name="aID">ID, dass gesetzt werden soll</param>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Polygon.GetX(System.Byte[])">
            <summary>
            Gibt die X Koordinate zurück
            </summary>
            <param name="aBytes">Polygon Werte als Byte Array</param>
            <returns>X Koordinate</returns>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Polygon.GetPointF(System.Byte[])">
            <summary>
            Gibt die X/Y Koordinate zurück
            </summary>
            <param name="aBytes">Polygon Werte als Byte Array</param>
            <returns>X Koordinate</returns>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Polygon.GetX(System.Byte[],System.Int32)">
            <summary>
            Gibt die X Koordinate zurück
            </summary>
            <param name="aBytes">Polygon Werte als Byte Array</param>
            <param name="aStartIndex">Start Index</param>
            <returns>X Koordinate</returns>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Polygon.GetY(System.Byte[])">
            <summary>
            Gibt die Y Koordinate zurück
            </summary>
            <param name="aBytes">Polygon Werte als Byte Array</param>
            <returns>Y Koordinate</returns>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Polygon.GetY(System.Byte[],System.Int32)">
            <summary>
            Gibt die Y Koordinate zurück
            </summary>
            <param name="aBytes">Polygon Werte als Byte Array</param>
            <param name="aStartIndex">Start Index</param>
            <returns>Y Koordinate</returns>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Polygon.GetZ(System.Byte[])">
            <summary>
            Gibt die Z Koordinate zurück
            </summary>
            <param name="aBytes">Polygon Werte als Byte Array</param>
            <returns>Z Koordinate</returns>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Polygon.GetZ(System.Byte[],System.Int32)">
            <summary>
            Gibt die Z Koordinate zurück
            </summary>
            <param name="aBytes">Polygon Werte als Byte Array</param>
            <param name="aStartIndex">Start Index</param>
            <returns>Z Koordinate</returns>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Polygon.GetA(System.Byte[])">
            <summary>
            Gibt die A Koordinate zurück
            </summary>
            <param name="aBytes">Polygon Werte als Byte Array</param>
            <returns>A Koordinate</returns>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Polygon.GetA(System.Byte[],System.Int32)">
            <summary>
            Gibt die A Koordinate zurück
            </summary>
            <param name="aBytes">Polygon Werte als Byte Array</param>
            <param name="aStartIndex">Start Index</param>
            <returns>A Koordinate</returns>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Polygon.GetB(System.Byte[])">
            <summary>
            Gibt die B Koordinate zurück
            </summary>
            <param name="aBytes">Polygon Werte als Byte Array</param>
            <returns>B Koordinate</returns>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Polygon.GetSpeed(System.Byte[],System.Int32)">
            <summary>
            GGibt die Geschwindigkeit zurück
            </summary>
            <param name="aBytes">Polygon Werte als Byte Array</param>
            <param name="aStartIndex">Start Index der ArrayList mit Polygon Objekten</param>
            <returns>Z Koordinate</returns>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Polygon.GetSpeed(System.Byte[])">
            <summary>
            Gibt die Geschwindigkeit zurück
            </summary>
            <param name="aBytes">Polygon Werte als Byte Array</param>
            <returns>Z Geschwindigkeit</returns>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Polygon.GetTx(System.Byte[])">
            <summary>
            Werkzeugnummer wird zurückgegeben
            </summary>
            <param name="aBytes">Polygon Werte als Byte Array</param>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Polygon.GetTx(System.Byte[],System.Int32)">
            <summary>
            Werkzeugnummer wird zurückgegeben
            </summary>
            <param name="aBytes">Polygon Werte als Byte Array</param>
            <param name="aStartIndex">Start Index</param>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Polygon.GetID(System.Byte[],System.Int32)">
            <summary>
            Indexnummer, kein Index dann -1
            </summary>
            <param name="aBytes">Polygon Werte als Byte Array</param>
            <param name="aStartIndex">Start Index</param>
            <returns>ID</returns>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Polygon.Select(System.Byte[],System.Boolean)">
            <summary>
            Auswahl wird gesetzt
            </summary>
            <param name="aBytes">Polygon Werte als Byte Array</param>
            <param name="aSelect">True, auswählen</param>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Polygon.Set(System.Byte[],System.Byte[])">
            <summary>
            Setzt Werte (Byte Array) eines Polygon Objektes in ein anderes Byte Array
            </summary>
            <param name="aBytes">Polygon Werte als Byte Array, Werte dieses Byte Arrays werden überschrieben </param>
            <param name="aNewBytes">Polygon Werte als Byte Array, dass in Byte Array geschrieben werden</param>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Polygon.SetX(System.Byte[],System.Single)">
            <summary>
            Setzt die X Koordinate ein
            </summary>
            <param name="aBytes">Polygon Werte als Byte Array</param>
            <param name="aX">Neuer X Wert, dass in die Byte Array geschrieben wird</param>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Polygon.SetX(System.Byte[],System.Int32,System.Single)">
            <summary>
            Setzt die X Koordinate ein
            </summary>
            <param name="aBytes">Polygon Werte als Byte Array</param>
            <param name="aStartIndex">Start Index</param>
            <param name="aX">Neuer X Wert, dass in die Byte Array geschrieben wird</param>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Polygon.SetY(System.Byte[],System.Single)">
            <summary>
            Setzt die Y Koordinate ein
            </summary>
            <param name="aBytes">Polygon Werte als Byte Array</param>
            <param name="aY">Neuer Y Wert, dass in die Byte Array geschrieben wird</param>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Polygon.SetY(System.Byte[],System.Int32,System.Single)">
            <summary>
            Setzt die Y Koordinate ein
            </summary>
            <param name="aBytes">Polygon Werte als Byte Array</param>
            <param name="aStartIndex">Start Index</param>
            <param name="aY">Neuer Y Wert, dass in die Byte Array geschrieben wird</param>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Polygon.SetZ(System.Byte[],System.Single)">
            <summary>
            Setzt die Z Koordinate ein
            </summary>
            <param name="aBytes">Polygon Werte als Byte Array</param>
            <param name="aStartIndex">Start Index</param>
            <param name="aZ">Neuer Z Wert, dass in die Byte Array geschrieben wird</param>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Polygon.SetZ(System.Byte[],System.Int32,System.Single)">
            <summary>
            Setzt die Z Koordinate ein
            </summary>
            <param name="aBytes">Polygon Werte als Byte Array</param>
            <param name="aStartIndex">Start Index</param>
            <param name="aZ">Neuer Z Wert, dass in die Byte Array geschrieben wird</param>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Polygon.SetA(System.Byte[],System.Single)">
            <summary>
            Setzt die A Koordinate ein
            </summary>
            <param name="aBytes">Polygon Werte als Byte Array</param>
            <param name="aStartIndex">Start Index</param>
            <param name="aA">Neuer A Wert, dass in die Byte Array geschrieben wird</param>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Polygon.SetA(System.Byte[],System.Int32,System.Single)">
            <summary>
            Setzt die A Koordinate ein
            </summary>
            <param name="aBytes">Polygon Werte als Byte Array</param>
            <param name="aStartIndex">Start Index</param>
            <param name="aA">Neuer A Wert, dass in die Byte Array geschrieben wird</param>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Polygon.SetUp(System.Byte[])">
            <summary>
            Werkzeug wird gehoben
            </summary>
            <param name="aBytes">Polygon Werte als Byte Array</param>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Polygon.SetDown(System.Byte[])">
            <summary>
            Werkzeug wird gesenkt
            </summary>
            <param name="aBytes">Polygon Werte als Byte Array</param>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Polygon.SetTx(System.Byte[],System.Byte)">
            <summary>
            Werkzeugnummer wird gesetzt
            </summary>
            <param name="aBytes">Polygon Werte als Byte Array</param>
            <param name="aTxx">Werkzeugnummer</param>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Polygon.SetTx(System.Byte[],System.Int32,System.Byte)">
            <summary>
            Werkzeugnummer wird gesetzt
            </summary>
            <param name="aBytes">Polygon Werte als Byte Array</param>
            <param name="aStartIndex">Start Index</param>
            <param name="aTxx">Werkzeugnummer</param>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Polygon.IsDown(System.Byte[],System.Int32)">
            <summary>
            Gibt den Status zurück. True, Werkzeug ist unten
            </summary>
            <param name="aBytes">Polygon Werte als Byte Array</param>
            <param name="aStartIndex">Start Index</param>
            <returns>True, Werkzeug ist unten</returns>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Polygon.IsDown(System.Byte[])">
            <summary>
            Gibt den Status zurück. True, Werkzeug ist unten
            </summary>
            <param name="aBytes">Polygon Werte als Byte Array</param>
            <returns>True, Werkzeug ist unten</returns>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Polygon.IsSelected(System.Byte[])">
            <summary>
            Gibt den Status zurück. True, Polygon ist ausgewählt
            </summary>
            <param name="aBytes">Polygon Werte als Byte Array</param>
            <returns>True, Werkzeug ist unten</returns>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Polygon.ToByteArray">
            <summary>
            Polygon als Byte Array wird zurückgegeben
            </summary>
            <returns>Byte Array</returns>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Polygon.Clone">
            <summary>
            Objekt dieser Klasse wird geklont
            </summary>
            <returns>Eine Kopie dieses Objektes</returns>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Polygon.SetOut(De.Boenigk.SMC5D.Basics.Output,System.Boolean)">
            <summary>
            Ausgang schalten oder ausschalten
            </summary>
            <param name="aOutput">Output</param>
            <param name="aOn">True, Ausgang schalten</param>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Polygon.SetXY(System.Drawing.PointF)">
            <summary>
            X und Y Koordinate wird gesetzt
            </summary>
            <param name="aPointF">Punkt X,Y</param>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Polygon.SetDown">
            <summary>
            Werkzeug wird gesenkt
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Polygon.SetUp">
            <summary>
            Werkzeug wird gehoben
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Polygon.SetG40">
            <summary>
            Löschen der Bahnkorrektur
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Polygon.SetG41">
            <summary>
            Bahnkorrektur-Aufruf (Werkzeug links von der Kontur)
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Polygon.SetG42">
            <summary>
            Bahnkorrektur-Aufruf (Werkzeug rechts von der Kontur)
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Polygon.GetG4142(System.Byte[])">
            <summary>
            Prüft ob G Code gesetzt ist. Wenn ja , dann wird die Nummer 1(G41) oder 2(G42) zurückgegeben.
            </summary>
            <param name="aBytes">Byte Array</param>
            <returns>1 ist G41, 2 ist G42 und 0 kein G Code</returns>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Polygon.GetG4142">
            <summary>
            Prüft ob G Code gesetzt ist. Wenn ja , dann wird die Nummer 1(G41, links) oder 2(G42, rechts) zurückgegeben.
            </summary>
            <returns>1 ist G41, 2 ist G42 und 0 kein G Code</returns>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Polygon.IsDown">
            <summary>
            Gibt den Status zurück. True, Werkzeug ist unten
            </summary>
            <returns>True, Werkzeug ist unten</returns>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Polygon.Select(System.Boolean)">
            <summary>
            Polygon Objekt als ausgewählt markieren
            </summary>
            <param name="aTrue">True, markieren sonst Markierung entfernen</param>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Polygon.IsSelected">
            <summary>
            Gibt den Status zurück. True, Polygon ist ausgewählt
            </summary>
            <returns>True, Werkzeug ist unten</returns>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Polygon.Pause(System.Boolean)">
            <summary>
            Pause im Polygon Objekt markieren
            </summary>
            <param name="aTrue">True, markieren sonst Markierung entfernen</param>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Polygon.IsPause">
            <summary>
            Gibt den Status zurück. True, Pause im Polygon ist markiert
            </summary>
            <returns>True, Werkzeug ist unten</returns>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Polygon.Pause(System.Boolean,System.Byte[],System.Int32)">
            <summary>
            Pause im Polygon Objekt markieren
            </summary>
            <param name="aTrue">True, markieren sonst Markierung entfernen</param>
            <param name="aBytes">Byte Array</param>
            <param name="aStartIndex">Start Index</param>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Polygon.Pause(System.Boolean,System.Byte[])">
            <summary>
            Pause im Polygon Objekt markieren
            </summary>
            <param name="aTrue">True, markieren sonst Markierung entfernen</param>
            <param name="aBytes">Byte Array</param>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Polygon.IsPause(System.Byte[],System.Int32)">
            <summary>
            Gibt den Status zurück. True, Pause im Polygon ist markiert
            </summary>
            <param name="aBytes">Byte Array</param>
            <param name="aStartIndex">Start Index</param>
            <returns>True, Werkzeug ist unten</returns>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Polygon.IsPause(System.Byte[])">
            <summary>
            Gibt den Status zurück. True, Pause im Polygon ist markiert
            </summary>
            <param name="aBytes">Byte Array</param>
            <returns>True, Werkzeug ist unten</returns>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.Polygon.myCommands">
            <summary>
            Befehle
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.Polygon.Speed">
            <summary>
            Geschwindigkeit
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.Polygon.Output">
            <summary>
            (uint) Ausgänge schalten
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.Polygon.Commands">
            <summary>
            Polygon Eigenschaften wie Pause, Auswahl, ...
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.Polygon.X">
            <summary>
            X Koordinate
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.Polygon.Y">
            <summary>
            Y Koordinate
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.Polygon.Z">
            <summary>
            Z Koordinate
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.Polygon.A">
            <summary>
            A Koordinate
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.Polygon.B">
            <summary>
            B Koordinate
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.Polygon.T">
            <summary>
            Txx Werkzeugnummer
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.Polygon.Wait">
            <summary>
            Wartezeit in Millisekunden, 
            0 ist keine Wartezeit
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.Polygon.ID">
            <summary>
            Indexnummer, kein Index dann -1
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.Polygon.LayerID">
            <summary>
            Layer, Default Wert ist 0
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.Polygon.SpindleSpeed">
            <summary>
            Spindel Drehzahl
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.Polygon.ExtensionID">
            <summary>
            ID Nummer einer Erweiterung, -1 keine Erweiterung verfügbar
            </summary>
        </member>
        <member name="T:De.Boenigk.Utility.CNC.PolygonGroup">
            <summary>
            Erzeugt Gruppen aus Polygon Objekten
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.PolygonGroup.myLines">
            <summary>
            ArrayList mit Gruppen Objekten
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.PolygonGroup.myStart">
            <summary>
            Startpunkt der optimierten Daten
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.PolygonGroup.myID">
            <summary>
            Die ID Nummerierung, Startnummer
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.PolygonGroup.myDistance">
            <summary>
            Abstand zwischen zwei Punkten rechnen
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.PolygonGroup.myDistancePointPoint">
            <summary>
            Abstand zwischen Punkten berechnen
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.PolygonGroup.#ctor">
            <summary>
            Konstruktor
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.PolygonGroup.CreateGroups(System.Collections.Generic.List{System.Byte[]})">
            <summary>
            Alle Elemente werden in Gruppen zusammengefasst. 
            Jede Gruppe wird in ArrayList gespeichert.
            </summary>
            <param name="aPolygonList">PolygonList</param>
            <return>ArrayList, enthält ArrayList Gruppen mit Polygon Objekten</return>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.PolygonGroup.ClearDoubleLines">
            <summary>
            Doppelte Vektoren werden entfernt
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.PolygonGroup.Compare(System.Int32,System.Collections.Generic.List{De.Boenigk.Utility.CNC.Polygon})">
            <summary>
            Vergleiche die Elemente
            </summary>
            <param name="aIndex">Start Index der Gruppe</param>
            <param name="theLine">Gruppe, die vergleichen wird</param>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.PolygonGroup.LinkGroups(System.Collections.Generic.List{System.Collections.Generic.List{De.Boenigk.Utility.CNC.Polygon}},System.Double)">
            <summary>
            Die einzelnen Linien werden verbunden
            </summary>
            <param name="aList">ArrayList mit Gruppen die Polygon Objekte enthalten. Diese ArrayList wird abgearbeitet und zu einer ArrayList zusammengefast.</param>
            <param name="aFangDolerence">Fang- Toleranz, Wert etwa 0.01d</param>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.PolygonGroup.Link(System.Int32,De.Boenigk.Utility.CNC.Polygon,System.Boolean,System.Double)">
            <summary>
            Gruppe verbinden
            </summary>
            <param name="aIndex">Index der ersten Gruppe</param>
            <param name="aPolygon">Erster oder letzter Polygon der ersten Gruppe</param>
            <param name="aFirst">True, dann erster Polygon der ersten GRuppe sonst letzte Gruppe</param>
            <param name="aFangDolerence">Fang- Toleranz, Wert etwa 0.01d</param>
            <returns>True, dann verbunden</returns>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.PolygonGroup.CreateOutList">
            <summary>
            Eine Ausgabe PolygonList wird erzeugt
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.PolygonGroup.Next">
            <summary>
            Nächste Gruppe zusammenfassen
            </summary>
            <returns>True, weitere Gruppen verfügbar</returns>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.PolygonGroup.SearchNext(System.Int32,System.Int32)">
            <summary>
            Vergleicht die ersten Punkte aus der beiden Listen
            </summary>
            <param name="aAdjacencyIndex">Aktuelle ausgewählte List</param>
            <param name="aIndex">Neue Liste</param>
            <returns>True, neue Liste liegt näher</returns>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.PolygonGroup.AddToOut(System.Collections.Generic.List{De.Boenigk.Utility.CNC.Polygon})">
            <summary>
            Schreibe in die neue PolygonList
            </summary>
            <param name="aLine">ArrayList mit Polygon Objekten</param>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.PolygonGroup.List">
            <summary>
            Sortierte PolygonList eines Werkzeugs
            </summary>
        </member>
        <member name="T:De.Boenigk.Utility.CNC.DataFrom">
            <summary>
            Beschreibt die Datenquelle
            </summary>
        </member>
        <member name="T:De.Boenigk.Utility.CNC.PolygonList">
            <summary>
            Verwaltet eine ArrayList mit Line Objekten und Informationen wie MinX,MinY,MaxX,MaxY oder Typ
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.PolygonList.C_ToolCount">
            <summary>
            Anzahl der Werkzeugnummern
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.PolygonList.myTempFile">
            <summary>
            Name der temporären Datei mit Pfad. Hier werden 
            alle Polygon Objekte temporär in einer Datei abgelegt.
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.PolygonList.myDeviationAxis">
            <summary>
            Definiert die Umleitung der Achsen (für die grafische Anzeige)
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.PolygonList.myDimension">
            <summary>
            Definiert die Dimension, Dimension beeinflusst die Daten Art
            </summary>
            <remarks>
            * 2D Daten benötigen keine Geschwindigkeit, keine Z und A Achse, Polygongröße ist kleiner
            * 3D und 4D Daten benötigen volle Polygon Größe
            </remarks>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.PolygonList.myLines">
            <summary>
            ArrayList mit Polygon Objekten
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.PolygonList.#ctor(System.String,System.Boolean)">
            <summary>
            Konstruktor
            </summary>
            <param name="aTemFile">Name der Datei mit Pfad</param>
            <param name="aKnowUnit">Einheit ist in der angegeben und damit bekannt. Angabe der Einheit ist damit nicht notwendig und beträgt immer den Wert 1</param>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.PolygonList.#ctor(System.String,De.Boenigk.Utility.CNC.Dimension,System.Boolean)">
            <summary>
            Konstruktor
            </summary>
            <param name="aTempFile">Name der Datei mit Pfad</param>
            <param name="aDimension">Dimension</param>
            <param name="aKnowUnit">Einheit ist in der angegeben und damit bekannt. Angabe der Einheit ist damit nicht notwendig und beträgt immer den Wert 1</param>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.PolygonList.#ctor(System.String,De.Boenigk.Utility.CNC.Dimension,System.Boolean,System.Boolean)">
            <summary>
            Konstruktor 
            </summary>
            <param name="aTempFile">Name der Datei mit Pfad</param>
            <param name="aDimension">Dimension</param>
            <param name="aAxis4InGrad">True, 4 Achse ist in Grad</param>
            <param name="aKnowUnit">Einheit ist in der angegeben und damit bekannt. Angabe der Einheit ist damit nicht notwendig und beträgt immer den Wert 1</param>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.PolygonList.#ctor(De.Boenigk.Utility.CNC.Dimension,System.Boolean)">
            <summary>
            Konstruktor 
            </summary>
            <param name="aDimension">Dimension</param>
            <param name="aKnowUnit">Einheit ist in der angegeben und damit bekannt. Angabe der Einheit ist damit nicht notwendig und beträgt immer den Wert 1</param>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.PolygonList.#ctor(De.Boenigk.Utility.CNC.Dimension)">
            <summary>
            Konstruktor mit Angabe der Dimension 
            </summary>
            <param name="aDimension">Dimension</param>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.PolygonList.#ctor">
            <summary>
            Konstruktor mit Angabe der Dimension 
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.PolygonList.Clone">
            <summary>
            Objekt dieser Klasse wird flach geklont
            </summary>
            <returns>Eine flache Kopie dieses Objektes</returns>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.PolygonList.RemoveSelectNext">
            <summary>
            Die Auswahl wird für die erste Gruppe, die ausgewählt ist, entfernt.
            Dabei wird die List von 0 bis Ende durchsucht.
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.PolygonList.SelectBack">
            <summary>
            Die Auswahl wird für die erste Gruppe gesetzt. 
            Dabei wird die Gruppe in der Liste von Ende bis 0 durchsucht, also rückwärts.
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.PolygonList.SelectAll">
            <summary>
            Auswahl für alle Zeichnungselemente setzen
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.PolygonList.Select(System.Byte)">
            <summary>
            Auswahl für alle Zeichnungselemente setzen
            </summary>
            <param name="aTxx">Werkzeugnummer</param>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.PolygonList.SetID">
            <summary>
            ID wird neu gesetzt
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.PolygonList.RemoveSelect">
            <summary>
            Die Auswahl wird entfernt
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.PolygonList.RemoveSelectOfPolygon(System.Int32)">
            <summary>
            Die Auswahl wird entfernt
            </summary>
            <param name="aSelectedPolygonStartIndex">Start- Index des Polygon Objektes</param>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.PolygonList.IsSelected">
            <summary>
            Prüft ob noch weitere PD Objekte ausgewählt sind
            </summary>
            <returns>True, weitere PD Objekte sind ausgewählt</returns>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.PolygonList.GetNearLine(System.Double,De.Boenigk.Utility.Formulary.PointD,System.Boolean)">
            <summary>
            Sucht den am nähsten liegenden Vektor. Dabei wird ein Fang- Bereich (Toleranz) angegeben.
            </summary>
            <param name="aFang">Fangbereich, Wert etwa 5 bis 20</param>
            <param name="aLocation">Mausposition umgerechnet nach Datei- Einheit</param>
            <returns>Index des am nähsten liegenden Vektor, Falls keins gefunden dann wird -1 zurückgegeben</returns>
            <param name="aSelected">True, Auswahl der Polygon, die schon ausgewählt sind, False Auswahl der Polygone, die keine Auswahl haben</param>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.PolygonList.GetNearLine(System.Double,De.Boenigk.Utility.Formulary.PointD)">
            <summary>
            Sucht den am nächsten liegenden Vektor. Dabei wird ein Fang- Bereich (Toleranz) angegeben.
            </summary>
            <param name="aFang">Fangbereich, Wert etwa 5 bis 20</param>
            <param name="aLocation">Mausposition umgerechnet nach Datei- Einheit</param>
            <returns>Index des am nächsten liegenden Vektor, Falls keins gefunden dann wird -1 zurückgegeben</returns>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.PolygonList.GetNearLine(System.Collections.Generic.List{System.Byte[]},System.Double,System.Drawing.PointF)">
            <summary>
            Sucht den am nächsten liegenden Vektor. Dabei wird ein Fang- Bereich (Toleranz) angegeben.
            </summary>
            <param name="aList">ArrayList dass durchsucht wird</param>
            <param name="aFang">Fangbereich, Wert etwa 5 bis 20</param>
            <param name="aLocation">Mausposition umgerechnet nach Datei- Einheit</param>
            <returns>Index des am nächsten liegenden Vektor, Falls keins gefunden dann wird -1 zurückgegeben</returns>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.PolygonList.GetStartPolygon(System.Int32)">
            <summary>
            Startpunkt des Polygons wird gesucht und als Index zurückgegeben
            </summary>
            <param name="aIndex">Index des Polygon Objektes, dessen Anfang gesucht wird</param>
            <returns>Startindex des ersten Polygon Objektes</returns>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.PolygonList.RemoveSelect(System.Collections.ArrayList)">
            <summary>
            Die Auswahl wird entfernt
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.PolygonList.GetDimension">
            <summary>
            Gibt die Dimension zurück
            </summary>
            <returns>Dimension</returns>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.PolygonList.Init">
            <summary>
            Daten werden von der Datei oder vom PolygonData initialisiert
            </summary>
            <param name="aMB">Maximale Größe der Datei in MegaBytes, die in die ArrayList geladen werden soll, wenn 0 dann wird unabhängig von der Größe immer geladen</param>
            <remarks>Der Parameter aMB bezieht sich nur auf das Laden von der Datei</remarks>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.PolygonList.InitFromFile">
            <summary>
            Daten werden von der Datei initialisiert
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.PolygonList.UpdateActiveToolNumbers">
            <summary>
            Alle aktiven Werkzeugnummern werden in ActiveToolNumbers ArrayList eingefügt.
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.PolygonList.GetByteCount">
            <summary>
            Gibt die Anzahl der Bytes mit 0 beginnend
            </summary>
            <returns>Anzahl der Bytes</returns>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.PolygonList.GetCount">
            <summary>
            Gibt die Anzahl der Polygon- Objekte mit 0 beginnend
            </summary>
            <returns>Anzahl der Bytes</returns>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.PolygonList.SetPause(System.Int32)">
            <summary>
            Pause wird in einem Polygon gesetzt
            </summary>
            <param name="aLineIndex">Index Nummer des Polygons</param>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.PolygonList.DelPause">
            <summary>
            Pause wird entfernt
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.PolygonList.DelPause(System.Int32)">
            <summary>
            Pause wird entfernt
            </summary>
            <param name="aIndex">Indexnummer der Pause</param>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.PolygonList.IsPause">
            <summary>
            Gibt den Index der Pause, falls keine Pause vorhanden dann wird -1 zurückgegeben
            </summary>
            <returns>Index- Nummer der Pause, sonst -1</returns>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.PolygonList.GetPauseTxx">
            <summary>
            Gibt die Werkzeugnummer der Pause.
            </summary>
            <returns>Werkzeugnummer der Pause, sonst -1</returns>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.PolygonList.IsClosed(System.Collections.Generic.List{System.Byte[]})">
            <summary>
            Prüft ob die angegebene Liste mit Polygon Objekten geschlossen ist!
            </summary>
            <param name="aList">Liste mit Polygon Objekten</param>
            <returns>True, Liste mit Polygon Objekten ist geschlossen</returns>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.PolygonList.ChangeToolNumber(System.Byte,System.Byte)">
            <summary>
            Ändert die Werkzeugnummern
            </summary>
            <param name="aOldNumber">Alte Werkzeugnummer</param>
            <param name="aNewNumber">Neue Werkzeugnummer</param>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.PolygonList.ChangeToolNumber(System.Collections.Generic.List{De.Boenigk.Utility.CNC.DxfToolProperty})">
            <summary>
            Ändert die Werkzeugnummern, Daten der nicht zu Ladende Layer werden entfernt
            </summary>
            <param name="aNumbers">Neue Werkzeugnummer</param>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.PolygonList.ChangeToolNumber(System.Collections.Generic.List{System.Byte})">
            <summary>
            Ändert die Werkzeugnummern
            </summary>
            <param name="aNumbers">Neue Werkzeugnummer</param>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.PolygonList.IsData">
            <summary>
            True, Daten sind vorhanden
            </summary>
            <returns>True, Daten vorhanden</returns>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.PolygonList.GetPolygon(System.Int32)">
            <summary>
            Polygon wird zurückgegeben
            </summary>
            <param name="aIndex">Index- Nummer</param>
            <returns>Polygon oder null falls der Index falsch</returns>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.PolygonList.Clear">
            <summary>
            Alle Elemente werden gelöscht
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.PolygonList.RemoveFirstPUs">
            <summary>
            Die ersten PU Befehle werden gelöscht.
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.PolygonList.RemoveLastPUs">
            <summary>
            Die letzten PU Befehle werden gelöscht.
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.PolygonList.RemoveEmpty">
            <summary>
            Mehrfach hintereinander vorkommende Leerlauf Linien werden gelöscht.
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.PolygonList.RemoveTool(System.Byte)">
            <summary>
            Alle Daten eines Werkzeugs (Vektoren, Bohrpunkte...) werden gelöscht
            </summary>
            <param name="aTxx">Werkzeugnummer, dass gelöscht wird</param>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.PolygonList.UpdateMinMax">
            <summary>
            Größe und Dimension (2D,3D oder 4D) wird neu ermittelt
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.PolygonList.GetMinMaxOffActivePolygonList">
            <summary>
            Gibt Min. Max Koordinaten nur für aktive Elemente
            </summary>
            <returns>PolygonSize</returns>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.PolygonList.CreateID">
            <summary>
            ID werden gesetzt
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.PolygonList.IsInActiveTools(System.Int32)">
            <summary>
            Prüft ob die angegebene Werkzeugnummer in der Liste mit den aktiven Werkzeugen enthalten ist
            </summary>
            <param name="aTxx">Werkzeugnummer</param>
            <returns>True, Werkzeug in der Liste gefunden</returns>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.PolygonList.Size(De.Boenigk.Utility.CNC.PolygonSize)">
            <summary>
            Größe der Zeichnung wird gesetzt
            </summary>
            <param name="aSize">Größe als PolygonSize Objekt</param>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.PolygonList.IsKnowUnit">
            <summary>
            True, Einheit ist in der angegeben und damit bekannt. Angabe der Einheit ist damit nicht notwendig und beträgt immer den Wert 1 
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.PolygonList.DataFrom">
            <summary>
            Beschreibt die Datenquelle
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.PolygonList.DistanceBetweenPiontAndLine">
            <summary>
            Gibt den Abstand zwischen Punkt und Linie dass zuvor mit der Methode GetNearLine(...) ermittelt wurde.
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.PolygonList.DeviationAxis">
            <summary>
            Definiert die Umleitung der Achsen für die grafische Anzeige
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.PolygonList.LoadExactly">
            <summary>
            True, die Datei wird komplett so wie ist geladen, d.h. die
            Leerlauf- Fahrten am Anfang und am Ende der Datei werden nicht entfernt
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.PolygonList.Axis4InGrad">
            <summary>
            True, die 4 Achse ist in Grad
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.PolygonList.LayerCount">
            <summary>
            Anzahl Layer (bis 255)
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.PolygonList.List">
            <summary>
            ArrayList mit Line Objekten setzen oder geben
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.PolygonList.Tools">
            <summary>
            Werkzeugliste wird zurückgegeben
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.PolygonList.ActiveToolsSequenceFromFile">
            <summary>
            Werkzeugreihenfolge aus Datei (hauptsächlich für GCodes) z.B.: T1 -> T2 -> T3 -> T1 -> T4 -> T2
            Enthält Txx Objekte
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.PolygonList.ActiveTools">
            <summary>
            Liste der aktiven Werkzeuge (Txx Objekte)
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.PolygonList.G41G42Tools">
            <summary>
            Liste der Werkzeuge, die G41 oder G42 (Radiuskorrektur links, rechts) enthalten
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.PolygonList.FailedTools">
            <summary>
            Liste, der NICHT zulässigen Werkzeugnummern wird zurückgegeben
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.PolygonList.Min">
            <summary>
            Kleinster 5D Punkt
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.PolygonList.Max">
            <summary>
            Größter 5D Punkt
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.PolygonList.MinSpeed">
            <summary>
            Minimale Geschwindigkeit
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.PolygonList.MaxSpeed">
            <summary>
            Maximale Geschwindigkeit
            </summary>
        </member>
        <member name="T:De.Boenigk.Utility.CNC.PolygonReader">
            <summary>
            Liest Step Objekte aus der Datei
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.PolygonReader.C_Buffer">
            <summary>
            Größe des Datei Buffers
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.PolygonReader.myFile">
            <summary>
            Dateiname mit Pfad
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.PolygonReader.myPolygonLenght">
            <summary>
            Anzahl der Bytes, dass ein Polygon- Objekt hat
            - Besteht aus: Polygon- Länge ohne Property + Property Zustand- Schalter
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.PolygonReader.myBinaryReader">
            <summary>
            Daten binär lesen
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.PolygonReader.#ctor(System.String)">
            <summary>
            Standard Konstruktor
            </summary>
            <param name="aFile">Dateiname mit Pfad</param>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.PolygonReader.Open">
            <summary>
            Eine Datei wird geöffnet
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.PolygonReader.Read">
            <summary>
            Ein Polygon als Byte Array wird gelesen
            </summary>
            <returns>Polygon als Byte Array wird zurückgegeben, wenn Ende erreicht dann wird null zurückgegeben</returns>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.PolygonReader.ReadToEnd">
            <summary>
            Komplette Datei wird gelesen und als Byte Array zurückgegeben
            </summary>
            <returns>Polygon als Byte Array wird zurückgegeben, wenn Ende erreicht dann wird null zurückgegeben</returns>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.PolygonReader.Close">
            <summary>
            Datei wird geschlossen
            </summary>
        </member>
        <member name="T:De.Boenigk.Utility.CNC.PolygonSize">
            <summary>
            Ermittelt die Zeichnungsgröße der Polygon Objekte 
            und löscht unnötige Leerlauf Polygone.
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.PolygonSize.myFirstX">
            <summary>
            Setzt den Anfang für alle Achsen
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.PolygonSize.myFirstY">
            <summary>
            Setzt den Anfang für alle Achsen
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.PolygonSize.myFirstZ">
            <summary>
            Setzt den Anfang für alle Achsen
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.PolygonSize.myFirstA">
            <summary>
            Setzt den Anfang für alle Achsen
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.PolygonSize.myFirstB">
            <summary>
            Setzt den Anfang für alle Achsen
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.PolygonSize.myFirstSpeed">
            <summary>
            Setzt den Anfang
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.PolygonSize.SetMinMax(System.Collections.Generic.List{System.Byte[]})">
            <summary>
            Ermittelt kleinste und größte Koordinate in der PolygonList.
            </summary>
            <param name="aList">ArrayList mit Polygon Objekten</param>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.PolygonSize.SetMinMax(System.Collections.Generic.List{System.Byte[]},De.Boenigk.Utility.CNC.ToolList)">
            <summary>
            Ermittelt kleinste und größte Koordinate in der PolygonList.
            </summary>
            <param name="aList">ArrayList mit Polygon Objekten</param>
            <param name="aToolList">Werkzeug- Eigenschaften</param>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.PolygonSize.SetMinMax(System.Byte[],De.Boenigk.Utility.CNC.ToolList)">
            <summary>
            Ermittelt kleinste und größte Koordinate in der PolygonList.
            </summary>
            <param name="aBytes">Byte Array mit Polygon Objekten</param>
            <param name="aToolList">Werkzeug- Eigenschaften</param>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.PolygonSize.SetMinMax(System.Byte[])">
            <summary>
            Ermittelt kleinste und größte Koordinate in der PolygonList.
            </summary>
            <param name="aBytes">Byte Array mit Polygon Objekten</param>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.PolygonSize.SetBegin">
            <summary>
            Anfang wird gesetzt
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.PolygonSize.SetMinMax(De.Boenigk.Utility.CNC.Polygon)">
            <summary>
            Ermittelt kleinste und größte Koordinate in der PolygonList.
            </summary>
            <param name="aPolygon">Polygon Objekt</param>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.PolygonSize.RemoveFirstPUs(System.Collections.Generic.List{System.Byte[]})">
            <summary>
            Die ersten PU Befehle werden gelöscht
            </summary>
            <param name="aList">ArraylList mit Polygon Objekten</param>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.PolygonSize.RemoveLastPUs(System.Collections.Generic.List{System.Byte[]})">
            <summary>
            Die letzten PU Befehle werden gelöscht
            </summary>
            <param name="aList">ArraylList mit Polygon Objekten</param>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.PolygonSize.RemoveEmpty(System.Collections.Generic.List{System.Byte[]})">
            <summary>
            Mehrfach hintereinander vorkommende Leerlauf Linien werden gelöscht
            </summary>
            <param name="aList">ArraylList mit Polygon Objekten</param>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.PolygonSize.MinMax(De.Boenigk.Utility.CNC.Polygon)">
            <summary>
            Kleinste und größte X, Y, Z, A Koordinate suchen
            </summary>
            <param name="aPolygon">X,Y,Z und A Koordinate als Polygon Objekt</param>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.PolygonSize.MinSpeed">
            <summary>
            Minimale Geschwindigkeit
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.PolygonSize.MaxSpeed">
            <summary>
            Maximale Geschwindigkeit
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.PolygonSize.Max">
            <summary>
            Größter ermittelter Punkt wird zurückgegeben
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.PolygonSize.Min">
            <summary>
            Kleinster ermittelter Punkt wird zurückgegeben
            </summary>
        </member>
        <member name="T:De.Boenigk.Utility.CNC.PolygonWriter">
            <summary>
            Schreibt Polygon Objekte in die Datei
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.PolygonWriter.myFile">
            <summary>
            Dateien mit Pfad
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.PolygonWriter.myBinaryWriter">
            <summary>
            Daten binär schreiben
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.PolygonWriter.myOpen">
            <summary>
            True, Datei ist geöffnet
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.PolygonWriter.myLastPolygon">
            <summary>
            Letzter Polygon
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.PolygonWriter.#ctor(System.String)">
            <summary>
            Standard Konstruktor
            </summary>
            <param name="aFile">Dateiname mit Pfad</param>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.PolygonWriter.Write(De.Boenigk.Utility.CNC.Polygon)">
            <summary>
            Polygon wird in die Datei geschrieben
            </summary>
            <param name="aPolygon">Polygon Objekt schreiben</param>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.PolygonWriter.LastOverWrite(De.Boenigk.Utility.CNC.Polygon)">
            <summary>
            Letzter geschriebener Polygon wird mit angegebenen Polygon überschrieben.
            </summary>
            <param name="aPolygon">Polygon Objekt schreiben</param>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.PolygonWriter.Open">
            <summary>
            Temporäre Datei wird zum Schreiben geöffnet
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.PolygonWriter.Close">
            <summary>
            Datei wird geschlossen
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.PolygonWriter.LastPolygon">
            <summary>
            Gibt eine Kopie des letzten gespeicherten Polygon- Objektes oder NULL zurück
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.PolygonWriter.PolygonIndex">
            <summary>
            Anzahl der gespeicherten Polygon- Objekte
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.PolygonWriter.Min">
            <summary>
            Minimale Koordinaten- Größe
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.PolygonWriter.Max">
            <summary>
            Maximale Koordinaten- Größe
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.PolygonWriter.IsWrited">
            <summary>
            True, ein Polygon oder mehrere Polygon Objekte wurden in die Datei geschrieben
            </summary>
        </member>
        <member name="T:De.Boenigk.Utility.CNC.DinProperties">
            <summary>
            Eigenschaften des Din 66025 Interpreters
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.DinProperties.SetG111(System.Int32)">
            <summary>
            Speichert neue Werkzeuge, die mit Zirkodenta umgerechnet werden müssen
            </summary>
            <param name="aTxx">Werkzeugnummer</param>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.DinProperties.IsAsG111(System.Int32)">
            <summary>
            Prüft ob das angegebene Werkzeug als Zirkodenta Achse für die Umrechnung markiert ist.
            </summary>
            <param name="aTxx">Werkzeugnummer</param>
            <returns>True,, Werkzeug als Zirkodenta markiert</returns>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.DinProperties.ResetG111">
            <summary>
            Zirkodenta Einstellungen werden zurückgesetzt
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.DinProperties.GetVectorLength">
            <summary>
            Gibt die maximale Vektorlänge. Fallst 0 dann nicht aktive/gewählt
            </summary>
            <returns></returns>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.DinProperties.ExtensionsOn">
            <summary>
            True, Erweiterungen sind aktiv
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.DinProperties.Extensions">
            <summary>
            DIN 66025 Erweiterungen
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.DinProperties.Positions">
            <summary>
            Din Positionen für Texteditor
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.DinProperties.WhenCopyingDelWaitTime">
            <summary>
            Beim kopieren, Wartezeit entfernen
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.DinProperties.WhenCopingDelSpindleOff">
            <summary>
            Beim kopieren, Spindel ausschalten entfernen
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.DinProperties.WhenCopingAddZ">
            <summary>
            Beim kopieren, Z Höhe einfügen
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.DinProperties.WhenCopingAddZHeight">
            <summary>
            Beim kopieren, Z Höhe in Millimeter einfügen
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.DinProperties.LiftingDistance">
            <summary>
            Bohrzyklus G73 - Die Abhebedistanz nach dem Bohrinkrement Q in Millimeter
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.DinProperties.UseG84v6">
            <summary>
            True, benutze alte G84 Version aus cncGraF pro v6.
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.DinProperties.AlternativeLxxName">
            <summary>
            Alternativer Unterprogram Name. Wenn kein string "", dann wird Default Name 'L' genommen
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.DinProperties.Insert">
            <summary>
            Liste mit Zeichen die in die Felder %1, %2 eingetragen werden sollen. Wenn null dann keine Parameter
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.DinProperties.PxxDirectory">
            <summary>
            Verzeichnis mit Unterprogrammen
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.DinProperties.Tools">
            <summary>
            Werkzeugliste mit 'ToolProperty' Objekten
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.DinProperties.ToolDiameter">
            <summary>
            Default Werkzeugdurchmesser (für Befehl G87)
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.DinProperties.PWMOffifM05">
            <summary>
            True, PWM auf 0 setzten wenn Spindel aus (M05)
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.DinProperties.M04">
            <summary>
            M04 Befehl
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.DinProperties.M04Input">
            <summary>
             Eingang- Signal für M04 Befehl
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.DinProperties.AddG04">
            <summary>
            Diese Eigenschaft fügt Wartezeit in Millisekunden nach 
            jedem M03 (nur nach Befehl AddM03M05) hinzu (entspricht Befehl G04). 
            
            Der Wert wird in Millisekunden angegeben 
            z.B.: 1000 Millisekunden ist 1 Sekunde. Wenn der Wert 0 ist, dann ist diese Funktion deaktiviert.
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.DinProperties.AddM03M05">
            <summary>
            Diese Eigenschaft fügt M03 für jeden ersten G01/02/03 Befehl hinzu und M05 für jeden ersten G00 ein.
            
            Diese Methode ist nur für PLASMA und für DIN 66025 Dateien ohne M03/05 nutzbar. Diese Methode wird über config.xml
            aktiviert, sie ist standardmäßig deaktiviert!
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.DinProperties.AutoZCorrectForG4142">
            <summary>
            True, Automatische Z Anpassung für G41/G42
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.DinProperties.ViewPointsAsCrosses">
            <summary>
            Bohrpunkte als Kreuze anzeigen
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.DinProperties.TxxListWithD">
            <summary>
            ArrayList mit Werkzeugnummern (Byte- Werte), 
            deren Werkzeugdurchmesser aus GCode Datei ausgelesen wurde.
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.DinProperties.G53G59">
            <summary>
            Liste mit ausgelesenen G53-G59 Befehlen
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.DinProperties.ZeroPosition">
            <summary>
            Nullpunkt Position des Werkstücks
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.DinProperties.GCodeNCounting">
            <summary>
            GCode Nummerierung- Schritte, wenn 10 dann N10.... N20... N30...
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.DinProperties.GCodeNCountingStart">
            <summary>
            GCode Nummerierung- Schritte, Startnummer wenn 10 dann beginnt die G-Code Datei mit N10
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.DinProperties.Relay3">
            <summary>
            Relais 3
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.DinProperties.Relay4">
            <summary>
            Relais 4
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.DinProperties.Relay5">
            <summary>
            Relais 5
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.DinProperties.Relay6">
            <summary>
            Relais 6
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.DinProperties.Relay7">
            <summary>
            Relais 7
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.DinProperties.Relay8">
            <summary>
            Relais 8
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.DinProperties.Relay9">
            <summary>
            Relais 9
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.DinProperties.Relay10">
            <summary>
            Relais 10
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.DinProperties.G04H">
            <summary>
            Definiert Buchstabe für Wartezeit. "Default ist 'H'
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.DinProperties.ExpandedAD">
            <summary>
            True erweitete Einstellungen für AD0, AD1 und AD2 aktiv
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.DinProperties.AD0">
            <summary>
            Analoger Ausgang Nummer 0 (default)
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.DinProperties.AD1">
            <summary>
            Analoger Ausgang Nummer 1
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.DinProperties.AD2">
            <summary>
            Analoger Ausgang Nummer 2 (default)
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.DinProperties.VectorLength">
            <summary>
            Maximale Vektorlänge für Bogen
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.DinProperties.UseVectorLength">
            <summary>
            True, Vektorlänge für die Berechnung verwenden
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.DinProperties.DecimalPlaces">
            <summary>
            Nachkommastellen
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.DinProperties.ArcSolution">
            <summary>
            Definiert die Auflösung der Din66025 Kreisbogen 
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.DinProperties.CharacterFor4Axis">
            <summary>
            Eine Buchstabe, die die 4 Achse darstellt
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.DinProperties.Axis4InGrad">
            <summary>
            True, 4 Achse ist in Grad
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.DinProperties.CharacterFor5Axis">
            <summary>
            Eine Buchstabe, die die 5 Achse darstellt
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.DinProperties.G0203Relativ">
            <summary>
            True, G02/03 immer relativ
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.DinProperties.ZPresageChange">
            <summary>
            Z Achse Vorzeichen drehen
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.DinProperties.M2021Plasma">
            <summary>
            Befehle M20 und M21 für Plasma
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.DinProperties.M21PlasmaWait">
            <summary>
            Wartezeit in Millisekunden nach Einschalten der Plasma
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.DinProperties.SpindleAccelerationTime">
            <summary>
            Bohr - Spindel - Anlauf - Zeit in Sekunden
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.DinProperties.SpindleAccelerationTimeFromTxx">
            <summary>
            Werkzeugnummer ab der eine andere Bohr - Spindel - Anlauf - Zeit in Sekunden gelten soll
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.DinProperties.SpindleAccelerationTimeFromTxxValue">
            <summary>
            Bohr - Spindel - Anlauf - Zeit in Sekunden ab Werkzeugnummer SpindleAccelerationTimeFromTxx
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.DinProperties.UseVectorTool">
            <summary>
            Wenn True, dann werden Geschwindigkeiten aus der Vektor- Werkzeugliste entnommen.
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.DinProperties.SpeedFactor">
            <summary>
            Din66025 Geschwindigkeit Faktor
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.DinProperties.ViewPropertiesDialog">
            <summary>
            True, Datei- Eigenschaften Fenster am Anfang anzeigen
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.DinProperties.G40NextLine">
            <summary>
            True, Setzt den Befehl G40 erst nächste Zeile ein. 
            Ausnahme: wenn schon in der Zeile wo G40 steht, eine Z Fahrt ausgeführt wird, dann wird G40 um eine Zeile nicht verschoben.
            False deaktiviert die Verschiebung des Befehls G40 ebenfalls.
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.DinProperties.ResetIFTxx">
            <summary>
            True, wenn neue Werkzeugnummer, dan die Koordinaten der Achsen zurücksetzen. Wenn False dann bleiben die letzten Werte bestehen.
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.DinProperties.PP">
            <summary>
            Postprocessor
            </summary>
        </member>
        <member name="T:De.Boenigk.Utility.CNC.RadiusType">
            <summary>
            Aufzählung der Radius- Typen
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.RadiusType.Inside">
            <summary>
            Radius innen
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.RadiusType.External">
            <summary>
            Radius außen
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.RadiusType.Right">
            <summary>
            Radius rechts
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.RadiusType.Left">
            <summary>
            Radius links
            </summary>
        </member>
        <member name="T:De.Boenigk.Utility.CNC.Relay">
            <summary>
            Relais
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Relay.#ctor(System.String,System.String)">
            <summary>
            Konstruktor mit Parameter
            </summary>
            <param name="aRComOn">Text Befehl um Relais einzuschalten</param>
            <param name="aRComOff">Text Befehl um Relais auszuschalten</param>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Relay.#ctor">
            <summary>
            Konstruktor ohne Parameter
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.Relay.On">
            <summary>
            True, Relais ist an 
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.Relay.RelayNumber">
            <summary>
            Nummer des Relays
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.Relay.RComOn">
            <summary>
            Befehl um Relais zu schalten
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.Relay.RComOff">
            <summary>
            Befehl um Relais auszuschalten
            </summary>
        </member>
        <member name="T:De.Boenigk.Utility.CNC.SiebMaierProperties">
            <summary>
            Eigenschaften des Sieb und Maier Interpreters
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.SiebMaierProperties.#ctor">
            <summary>
            Konstruktor
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.SiebMaierProperties.Always5SiebMaier">
            <summary>
            Sieb und Maier immer 5 stellig
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.SiebMaierProperties.Unit">
            <summary>
            Einheit
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.SiebMaierProperties.ViewPropertiesDialog">
            <summary>
            True, Datei- Eigenschaften Fenster am Anfang anzeigen
            </summary>
        </member>
        <member name="T:De.Boenigk.Utility.CNC.StartPoint">
            <summary>
            Setzt in der geschlossenen Polyline einen neuen Startpunkt 
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.StartPoint.#ctor">
            <summary>
            Konstruktor
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.StartPoint.IsCase(System.Collections.Generic.List{System.Byte[]})">
            <summary>
            Prüft ob PolygonList geschlossen ist. Wenn die PolygonList nicht geschlossen,
            dann kann z.B.: kein Startpunkt verändert werden
            </summary>
            <param name="aList">ArrayList mit Polygon Objekten</param>
            <returns>True, PolygonList ist geschlossen</returns>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.StartPoint.Set(System.Collections.Generic.List{System.Byte[]},System.Int32)">
            <summary>
            Ein neuer Startpunkt wird gesetzt
            </summary>
            <param name="aList">ArrayList mit Polygon Objekten</param>
            <param name="aStartIndex">StartPunkt als Index</param>
        </member>
        <member name="T:De.Boenigk.Utility.Controls.ScaleControl">
            <summary>
            Skalierung- Control
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Controls.ScaleControl.#ctor">
            <summary>
            Konstruktor
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Controls.ScaleControl.radioGroupScale_SelectedIndexChanged(System.Object,System.EventArgs)">
            <summary>
            Skalierung wurde geändert
            </summary>
            <param name="sender">object</param>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:De.Boenigk.Utility.Controls.ScaleControl.Scale">
            <summary>
            Skalierung- Anzeige wird angepasst
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.Controls.ScaleControl.components">
            <summary> 
            Erforderliche Designervariable.
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Controls.ScaleControl.Dispose(System.Boolean)">
            <summary> 
            Verwendete Ressourcen bereinigen.
            </summary>
            <param name="disposing">True, wenn verwaltete Ressourcen gelöscht werden sollen; andernfalls False.</param>
        </member>
        <member name="M:De.Boenigk.Utility.Controls.ScaleControl.InitializeComponent">
            <summary> 
            Erforderliche Methode für die Designerunterstützung. 
            Der Inhalt der Methode darf nicht mit dem Code-Editor geändert werden.
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.Controls.ScaleControl.GroupScale">
            <summary>
            Radiogroup
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.Controls.ScaleControl.FactorXYZ">
            <summary>
            Skalierung der Zeichnung in XYZ um Faktor
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.Controls.ScaleControl.FactorX">
            <summary>
            Skalierung der Zeichnung in X um Faktor
            </summary>		
            <returns>Einheit</returns>
        </member>
        <member name="P:De.Boenigk.Utility.Controls.ScaleControl.FactorY">
            <summary>
            Skalierung der Zeichnung in Y um Faktor
            </summary>		
            <returns>Einheit</returns>
        </member>
        <member name="P:De.Boenigk.Utility.Controls.ScaleControl.FactorZ">
            <summary>
            Skalierung der Zeichnung in Z um Faktor
            </summary>		
            <returns>Einheit</returns>
        </member>
        <member name="P:De.Boenigk.Utility.Controls.ScaleControl.FactorA">
            <summary>
            Skalierung der Zeichnung in A um Faktor
            </summary>		
            <returns>Einheit</returns>
        </member>
        <member name="M:De.Boenigk.Utility.Controls.UnitControl.#ctor">
            <summary>
            Konstruktor
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.Controls.UnitControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Controls.UnitControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:De.Boenigk.Utility.Controls.UnitControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.Controls.UnitControl.Unit">
            <summary>
            Ausgewählte Einheit zurückgeben
            </summary>		
        </member>
        <member name="P:De.Boenigk.Utility.Controls.UnitControl.UnitFreeDev">
            <summary>
            Wert des "Frei definierbar"
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.Controls.UnitControl.IsFreeDevChecked">
            <summary>
            True, "Frei definierbar" ausgewählt
            </summary>
        </member>
        <member name="T:De.Boenigk.Utility.Customers.ZirkodentaSettings">
            <summary>
            Alle Einstellungen des Kunden Zirkodenta
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Customers.ZirkodentaSettings.GetX(De.Boenigk.Utility.CNC.Polygon,De.Boenigk.Utility.CNC.Position)">
            <summary>
            Wert der X Koordinate wird an Zirkodenta angepasst
            </summary>
            <param name="aPolygon">Polygon</param>
            <param name="aZero">Aktuelle Nullpunkt</param>
            <returns>Neuer Zirkodenta X Wert</returns>
        </member>
        <member name="M:De.Boenigk.Utility.Customers.ZirkodentaSettings.GetZ(De.Boenigk.Utility.CNC.Polygon,De.Boenigk.Utility.CNC.Position)">
            <summary>
            Wert der Z Koordinate wird an Zirkodenta angepasst
            </summary>
            <param name="aPolygon">Polygon</param>
            <param name="aZero">Aktuelle Nullpunkt</param>
            <returns>Neuer Zirkodenta Z Wert</returns>
        </member>
        <member name="P:De.Boenigk.Utility.Customers.ZirkodentaSettings.ZeroZ">
            <summary>
            Nullpunkt Z
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.Customers.ZirkodentaSettings.NewToolLength">
            <summary>
            Neue vermessene Werkzeuglänge (ändert sich ständig und verrechnet)
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.Customers.ZirkodentaSettings.ToolLength">
            <summary>
            Werkzeuglänge (wird nur am Anfang ein mal ausgeführt und behalten)
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.Customers.ZirkodentaSettings.MaterialHeight">
            <summary>
            Materialhöhe
            </summary>
        </member>
        <member name="T:De.Boenigk.Utility.Formulary.Bezier">
            <summary>
            Erzeugt Bezierkurve aus 4 Punkten
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.Bezier.#ctor(De.Boenigk.Utility.Formulary.ArcDetail)">
            <summary>
            Konstruktor
            </summary>
            <param name="aArcSolution">Bogenauflösung</param>
        </member>
        <member name="F:De.Boenigk.Utility.Formulary.Bezier.myArcDetail">
            <summary>
            Auflösung
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.Bezier.SetSolution(De.Boenigk.Utility.Formulary.ArcDetail)">
            <summary>
            Rechnet neu Bogenauflösung aus!
            </summary>
            <param name="aArcSolution">Bogenauflösung</param>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.Bezier.Get(De.Boenigk.Utility.Formulary.PointD,De.Boenigk.Utility.Formulary.PointD,De.Boenigk.Utility.Formulary.PointD,De.Boenigk.Utility.Formulary.PointD)">
            <summary>
            Erzeugt eine Bezier- Kurve aus 4 Punkten
            </summary>
            <param name="ptB0">1 Punkt</param>
            <param name="ptB1">2 Punkt</param>
            <param name="ptB2">3 Punkt</param>
            <param name="ptB3">4 Punkt</param>
            <returns>Array mit PointD Punkten der Kurve</returns>
        </member>
        <member name="P:De.Boenigk.Utility.Formulary.Bezier.ArcSolution">
            <summary>
            Definiert die Auflösung der Kreisbogen 
            </summary>
        </member>
        <member name="T:De.Boenigk.Utility.Formulary.BezierSpline">
            <summary>
            Bezier Spline methods
            </summary>
            <remarks>
            Modified: Peter Lee (peterlee.com.cn at gmail.com)
              Update: 2009-03-16
            
            see also:
            Draw a smooth curve through a set of 2D points with Bezier primitives
            http://www.codeproject.com/KB/graphics/BezierSpline.aspx
            By Oleg V. Polikarpotchkin
            
            Algorithm Descripition:
            
            To make a sequence of individual Bezier curves to be a spline, we
            should calculate Bezier control points so that the spline curve
            has two continuous derivatives at knot points.
            
            Note: `[]` denotes subscript
                   `^` denotes supscript
                   `'` denotes first derivative
                  `''` denotes second derivative
                  
            A Bezier curve on a single interval can be expressed as:
            
            B(t) = (1-t)^3 P0 + 3(1-t)^2 t P1 + 3(1-t)t^2 P2 + t^3 P3          (*)
            
            where t is in [0,1], and
                1. P0 - first knot point
                2. P1 - first control point (close to P0)
                3. P2 - second control point (close to P3)
                4. P3 - second knot point
                
            The first derivative of (*) is:
            
            B'(t) = -3(1-t)^2 P0 + 3(3t^2–4t+1) P1 + 3(2–3t)t P2 + 3t^2 P3
            
            The second derivative of (*) is:
            
            B''(t) = 6(1-t) P0 + 6(3t-2) P1 + 6(1–3t) P2 + 6t P3
            
            Considering a set of piecewise Bezier curves with n+1 points
            (Q[0..n]) and n subintervals, the (i-1)-th curve should connect
            to the i-th one:
            
            Q[0] = P0[1],
            Q[1] = P0[2] = P3[1], ... , Q[i-1] = P0[i] = P3[i-1]  (i = 1..n)   (@)
            
            At the i-th subinterval, the Bezier curve is:
            
            B[i](t) = (1-t)^3 P0[i] + 3(1-t)^2 t P1[i] + 
                      3(1-t)t^2 P2[i] + t^3 P3[i]                 (i = 1..n)
            
            applying (@):
            
            B[i](t) = (1-t)^3 Q[i-1] + 3(1-t)^2 t P1[i] + 
                      3(1-t)t^2 P2[i] + t^3 Q[i]                  (i = 1..n)   (i)
                      
            From (i), the first derivative at the i-th subinterval is:
            
            B'[i](t) = -3(1-t)^2 Q[i-1] + 3(3t^2–4t+1) P1[i] +
                       3(2–3t)t P2[i] + 3t^2 Q[i]                 (i = 1..n)
            
            Using the first derivative continuity condition:
            
            B'[i-1](1) = B'[i](0)
            
            we get:
            
            P1[i] + P2[i-1] = 2Q[i-1]                             (i = 2..n)   (1)
            
            From (i), the second derivative at the i-th subinterval is:
            
            B''[i](t) = 6(1-t) Q[i-1] + 6(3t-2) P1[i] +
                        6(1-3t) P2[i] + 6t Q[i]                   (i = 1..n)
            
            Using the second derivative continuity condition:
            
            B''[i-1](1) = B''[i](0)
            
            we get:
            
            P1[i-1] + 2P1[i] = P2[i] + 2P2[i-1]                   (i = 2..n)   (2)
            
            Then, using the so-called "natural conditions":
            
            B''[1](0) = 0
            
            B''[n](1) = 0
            
            to the second derivative equations, and we get:
            
            2P1[1] - P2[1] = Q[0]                                              (3)
            
            2P2[n] - P1[n] = Q[n]                                              (4)
            
            From (1)(2)(3)(4), we have 2n conditions for n first control points
            P1[1..n], and n second control points P2[1..n].
            
            Eliminating P2[1..n], we get (be patient to get :-) a set of n
            equations for solving P1[1..n]:
            
              2P1[1]   +  P1[2]   +            = Q[0] + 2Q[1]
               P1[1]   + 4P1[2]   +    P1[3]   = 4Q[1] + 2Q[2]
             ...
               P1[i-1] + 4P1[i]   +    P1[i+1] = 4Q[i-1] + 2Q[i]
             ...
               P1[n-2] + 4P1[n-1] +    P1[n]   = 4Q[n-2] + 2Q[n-1]
                          P1[n-1] + 3.5P1[n]   = (8Q[n-1] + Q[n]) / 2
             
            From this set of equations, P1[1..n] are easy but tedious to solve.
            </remarks>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.BezierSpline.GetCurveControlPoints(System.Windows.Point[],System.Windows.Point[]@,System.Windows.Point[]@)">
            <summary>
            Get open-ended Bezier Spline Control Points.
            </summary>
            <param name="knots">Input Knot Bezier spline points.</param>
            <param name="firstControlPoints">Output First Control points array of knots.Length - 1 length.</param>
            <param name="secondControlPoints">Output Second Control points array of knots.Length - 1 length.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="knots"/> parameter must be not null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="knots"/> array must containg at least two points.</exception>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.BezierSpline.GetFirstControlPoints(System.Double[])">
            <summary>
            Solves a tridiagonal system for one of coordinates (x or y) of first Bezier control points.
            </summary>
            <param name="rhs">Right hand side vector.</param>
            <returns>Solution vector.</returns>
        </member>
        <member name="T:De.Boenigk.Utility.Formulary.CenterPoint">
            <summary>
            Mittelpunkt des Kreises aus 3 auf dem Kreis liegenden Punkten
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.Formulary.CenterPoint.myCentre">
            <summary>
            Mittelpunkt
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.CenterPoint.Get(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Berechnet Mittelpunkt des Kreises aus 3 auf dem Kreis liegenden Punkten.
            
            Achtung: Es müssen immer 3 unterschiedliche Punkte geben!
            </summary>
            <param name="aX1">X des ersten Punktes</param>
            <param name="aY1">Y des ersten Punktes</param>
            <param name="aX2">X des zweiten Punktes</param>
            <param name="aY2">Y des zweiten Punktes</param>
            <param name="aX3">X des dritten Punktes</param>
            <param name="aY3">Y des dritten Punktes</param>
            <returns>Berechneter Radius</returns>
        </member>
        <member name="T:De.Boenigk.Utility.Formulary.Crypto">
            <summary>
            Crypto, kodiert eine Zeichenkette
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.Crypto.#ctor">
            <remarks>
            Konstruktor
            </remarks>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.Crypto.Encrypting(System.String)">
            <summary>
            Eine Zeichenkette wird kodiert
            </summary>
            <param name="aString">Zeichenkette</param>
            <returns>Byte Array</returns>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.Crypto.Decrypting(System.Byte[])">
            <summary>
            Ein Byte Array wird dekodiert
            </summary>
            <param name="aBytes">Byte Array</param>
            <returns>Dekodierte Zeichenkette</returns>
        </member>
        <member name="T:De.Boenigk.Utility.Formulary.ArcCircle">
            <summary>
            Klasse erzeugt Vektoren von Hpgl Kreise und Bögen. Anschließend werden 
            die Vektoren in der ArrayList abgespeichert
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.Formulary.ArcCircle.mySolution">
            <summary>
            Auflösung der Kreise
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.Formulary.ArcCircle.myVectorLength">
            <summary>
            Vektorlänge
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.Formulary.ArcCircle.myUnit">
            <summary>
            Einheit
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.ArcCircle.SetSolution(De.Boenigk.Utility.Formulary.ArcDetail,System.Decimal)">
            <summary>
            Definiert die Auflösung der Kreise
            </summary>
            <param name="aArcDetail">ArcDetail</param>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.ArcCircle.CreateCI(De.Boenigk.Utility.CNC.Polygon,System.Single,De.Boenigk.Utility.Formulary.ArcDetail,System.Decimal,System.Double)">
            <summary>
            Vektoren werden aus dem Hpgl Befehl CI generiert. 
            Die Vektoren werden in der ArrayList abgespeichert.
            </summary>
            <param name="aPolygon">letzter Punkt mit Startpunkt X,Y</param>
            <param name="aCircle">Radius</param>
            <param name="aArcDetail">Auflösung der Kreise</param>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.ArcCircle.CreateAA(De.Boenigk.Utility.CNC.Polygon,System.Double,System.Double,System.Double,De.Boenigk.Utility.Formulary.ArcDetail,System.Decimal,System.Double)">
            <summary>
            Vektoren werden aus Hpgl Befehl AA generiert. Die Vektoren
            werden in der ArrayList abgespeichert 
            </summary>
            <param name="aPolygon">letzter Punkt mit Startpunkt X,Y</param>
            <param name="aXEnd">Ende des Bogens X</param>
            <param name="aYEnd">Ende des Bogens Y</param>
            <param name="aArc">Endwinkel</param>
            <param name="aArcDetail">Auflösung der Kreise</param>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.ArcCircle.IsL">
            <summary>
            Anzahl Vektoren an die Vektorlänge anpassen
            </summary>
            <returns>True, Punkt speichern</returns>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.ArcCircle.GetArrayList">
            <summary>
            gibt eine ArrayList zurück
            </summary>
            <returns>List mit Polygon Objekten</returns>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.ArcCircle.SavePolygon">
            <summary>
            Vektor wird in einer ArrayList abgespeichert
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.Formulary.ArcCircle.BeginX">
            <summary>
            letzer Punkt X des Bogens
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.Formulary.ArcCircle.BeginY">
            <summary>
            letzter Punkt Y des Bogens
            </summary>
        </member>
        <member name="T:De.Boenigk.Utility.Formulary.CurveToTangent">
            <summary>
            Rechnet den Mittelpunkt der Kurve aus. Die Kurve wird an die Linie angelegt.
            
            Diese Funktion wird in der Funktion Eintauschen/Herausstechen verwendet.
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.CurveToTangent.#ctor">
            <summary>
            Konstruktor
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.CurveToTangent.GetCentre(De.Boenigk.Utility.Formulary.PointD,De.Boenigk.Utility.Formulary.PointD,De.Boenigk.Utility.Formulary.PointD)">
            <summary>
            Berechnet Mittelpunkt für Fräser Startpunkt 'Eintauchen'.
            </summary>
            <param name="aFirst">Erster Punkt der Linie</param>
            <param name="aLast">Zweiter Punkt der Linie</param>
            <param name="aLocation">Punkt (Mausposition)</param>
            <returns>Berechneter Mittelpunkt</returns>
        </member>
        <member name="P:De.Boenigk.Utility.Formulary.CurveToTangent.Turn">
            <summary>
            True, Kurve muss gedreht werden
            </summary>
        </member>
        <member name="T:De.Boenigk.Utility.Formulary.Distance">
            <summary>
            Rechnet Abstand zwischen zwei Punkten
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.Distance.#ctor">
            <summary>
            Konstruktor der Klasse Distance
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.Distance.Get(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Rechnet Abstand zwischen zwei Punkten aus 
            </summary>
            <param name="aFirst">Erster Punkt</param>
            <param name="aLast">Zweiter Punkt</param>
            <returns>Länge wird zurückgegeben</returns>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.Distance.Get(De.Boenigk.Utility.CNC.Polygon,De.Boenigk.Utility.CNC.Polygon)">
            <summary>
            Rechnet Abstand zwischen zwei Punkten aus 
            </summary>
            <param name="aFirst">Erster Punkt</param>
            <param name="aLast">Zweiter Punkt</param>
            <returns>Länge wird zurückgegeben</returns>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.Distance.Get(System.Drawing.PointF,De.Boenigk.Utility.CNC.Polygon)">
            <summary>
            Rechnet Abstand zwischen zwei Punkten aus 
            </summary>
            <param name="aFirst">Erster Punkt</param>
            <param name="aLast">Zweiter Punkt</param>
            <returns>Länge wird zurückgegeben</returns>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.Distance.Get(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Rechnet Abstand zwischen zwei Punkten aus 
            </summary>
            <param name="aFirst">Erster Punkt</param>
            <param name="aLast">Zweiter Punkt</param>
            <returns>Länge wird zurückgegeben</returns>
        </member>
        <member name="T:De.Boenigk.Utility.Formulary.Fang">
            <summary>
            Überprüft ob die Punkte im Bereich liegen
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.Formulary.Fang.myDistance">
            <summary>
            Rechnet Abstand zwischen zwei Punkten
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.Fang.#ctor">
            <summary>
            Konstruktor
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.Fang.IsFang(De.Boenigk.Utility.CNC.Polygon,De.Boenigk.Utility.CNC.Polygon,System.Double)">
            <summary>
            Prüft ob die beiden Punkte (Polygon Objekte im Bereich liegen)
            </summary>
            <param name="aPolygonFirst">Erster Polygon</param>
            <param name="aPolygonNext">Zweiter Polygon</param>
            <param name="aFangArea">Bereich in dem die beiden Punkte liegen sollen</param>
            <returns>
            True, Polygon Objekte liegen im Bereich
            </returns>
        </member>
        <member name="T:De.Boenigk.Utility.Formulary.DistancePointLine">
            <summary>
            Rechnet Abstand zwischen Punkt und einer Linie
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.Formulary.DistancePointLine.myDistancePointStraightLine">
            <summary>
            Rechnet einen Abstand zwischen Punkt und einer Linie
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.DistancePointLine.#ctor">
            <summary>
            Standard Konstruktor
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.DistancePointLine.#ctor(System.Double)">
            <summary>
            Standard Konstruktor
            </summary>
            <param name="aFang">Toleranz zwischen Linie und Punkt</param>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.DistancePointLine.ISNearLine(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Rechnet Abstand zwischen Punkt und einer Linie
            </summary>
            <param name="aP1">Erster Punkt des Vektors</param>
            <param name="aP2">Zweiter Punkt des Vektors</param>
            <param name="aPoint">Punkt</param>
            <returns>Abstand zwischen Punkt und Geraden</returns>
        </member>
        <member name="P:De.Boenigk.Utility.Formulary.DistancePointLine.Fang">
            <summary>
            Toleranz zwischen Linie und Punkt
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.Formulary.DistancePointLine.Distance">
            <summary>
            Berechneter Abstand zwischen Punkt und Linie
            </summary>
        </member>
        <member name="T:De.Boenigk.Utility.Formulary.PointD5D">
            <summary>
            5D Punkt für double- Zahlen
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.Formulary.PointD5D.Length">
            <summary>
            Gibt die GESAMMTE Länge eines PointD5D Objektes in Bytes
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.PointD5D.#ctor">
            <summary>
            Standard Konstruktor
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.PointD5D.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Konstruktor mit Angabe der X,Y,Z,A,B Koordinate
            </summary>
            <param name="aX">Zahl X</param>
            <param name="aY">Zahl Y</param>
            <param name="aZ">Zahl Z</param>
            <param name="aA">Zahl A</param>
            <param name="aB">Zahl B</param>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.PointD5D.#ctor(System.Byte[],System.Int32)">
            <summary>
            Konstruktor mit Angabe der X,Y,Z,A,B Koordinaten als Byte Array
            </summary>
            <param name="aBytes">ArrayList mit Byte Objekten</param>
            <param name="aStartIndex">StartIndex</param>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.PointD5D.Clone">
            <summary>
            Objekt flach klonnen
            </summary>
            <returns>Eine flache Kopie dieses Objektes</returns>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.PointD5D.ToByteArray">
            <summary>
            PointD5D als Byte Array wird zurückgegeben
            </summary>
            <returns>Byte Array</returns>
        </member>
        <member name="P:De.Boenigk.Utility.Formulary.PointD5D.X">
            <summary>
            Koordinate X
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.Formulary.PointD5D.Y">
            <summary>
            Koordinate Y
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.Formulary.PointD5D.Z">
            <summary>
            Koordinate Z
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.Formulary.PointD5D.A">
            <summary>
            Koordinate A
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.Formulary.PointD5D.B">
            <summary>
            Koordinate B
            </summary>
        </member>
        <member name="T:De.Boenigk.Utility.Formulary.PointF5D">
            <summary>
            4D Punkt für float- Zahlen
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.Formulary.PointF5D.Length">
            <summary>
            Gibt die GESAMMTE Länge eines PointF5D Objektes in Bytes
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.PointF5D.#ctor">
            <summary>
            Standard Konstruktor
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.PointF5D.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Konstruktor mit Angabe der X,Y,Z,A Koordinate
            </summary>
            <param name="aX">Zahl X</param>
            <param name="aY">Zahl Y</param>
            <param name="aZ">Zahl Z</param>
            <param name="aA">Zahl A</param>
            <param name="aB">Zahl B</param>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.PointF5D.#ctor(System.Byte[],System.Int32)">
            <summary>
            Konstruktor mit Angabe der X,Y,Z,A,B Koordinaten als Byte Array
            </summary>
            <param name="aBytes">ArrayList mit Byte Objekten</param>
            <param name="aStartIndex">StartIndex</param>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.PointF5D.ToByteArray">
            <summary>
            PointF5D als Byte Array wird zurückgegeben
            </summary>
            <returns>Byte Array</returns>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.PointF5D.Clone">
            <summary>
            Objekt flach klonnen
            </summary>
            <returns>Eine flache Kopie dieses Objektes</returns>
        </member>
        <member name="P:De.Boenigk.Utility.Formulary.PointF5D.X">
            <summary>
            Koordinate X
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.Formulary.PointF5D.Y">
            <summary>
            Koordinate Y
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.Formulary.PointF5D.Z">
            <summary>
            Koordinate Z
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.Formulary.PointF5D.A">
            <summary>
            Koordinate A
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.Formulary.PointF5D.B">
            <summary>
            Koordinate B
            </summary>
        </member>
        <member name="T:De.Boenigk.Utility.Formulary.PolyDirection">
            <summary>
            Ermittelt die Richtung der Polylinie
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.PolyDirection.Area(System.Collections.Generic.IList{System.Byte[]})">
            <summary>
            Rechnet Fläche aus
            </summary>
            <param name="poly">Liste mit Polygon Objekten</param>
            <returns>Fläche</returns>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.PolyDirection.PolyArea(System.Collections.Generic.IList{System.Byte[]})">
            <summary>
            Gibt die Fläche der Polygone zurück.
            </summary>
            <param name="poly">Liste mit Polygon Objekten</param>
            <returns>Fläche</returns>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.PolyDirection.IsPolyClockwise(System.Collections.Generic.IList{System.Byte[]})">
            <summary>
            Ermittelt die Richtung des Vektors
            </summary>
            <param name="poly">Liste mit Polygon Objekten</param>
            <returns>True, dann im Uhrzeigersinn</returns>
        </member>
        <member name="T:De.Boenigk.Utility.Formulary.RoundCorner">
            <summary>
            Rechnet zwischen 2 Vektoren ein Radius mit Mittelpunkt sowie 2 Punkte, die auf den Vektoren liegen. 
            Dabei wird der Abstand 'aD' (Eingabe) zwischen der Ecke und der Rundung berücksichtigt.
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.Formulary.RoundCorner.myVectorAngle">
            <summary>
            Rechnet Winkel zwischen 2 Vektoren
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.Formulary.RoundCorner.myArrayList">
            <summary>
            
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.RoundCorner.#ctor">
            <summary>
            Konstruktor
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.RoundCorner.Create(De.Boenigk.Utility.CNC.Polygon,De.Boenigk.Utility.CNC.Polygon,De.Boenigk.Utility.CNC.Polygon,System.Double,System.Double)">
            <summary>
            Rechnet zwischen 2 Vektoren ein Radius mit Mittelpunkt sowie 2 Punkte, die auf den Vektoren liegen. 
            Dabei wird der Abstand 'aD' (Eingabe) zwischen der Ecke und der Rundung berücksichtigt.
            </summary>
            <param name="aPolygon1">Erster Punkt des ersten Vektors</param>
            <param name="aPolygon2">Zweiter Punkt des ersten Vektors und erster Punkt des zweiten Vektors</param>
            <param name="aPolygon3">Zweiter Punkt des zweiten Vektors</param>
            <param name="aD">Abstand zwischen Ecke und der Rundung</param>
            <param name="aFromAngle">Abrunden ab Winkel</param>
            <returns>RCOutput, enthält berechnete Daten</returns>
        </member>
        <member name="T:De.Boenigk.Utility.Formulary.RCOutput">
            <summary>
            Enthält von RoundedCorner berechnete Daten (Ergebnis).
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.RCOutput.#ctor">
            <summary>
            Konstruktor
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.Formulary.RCOutput.Radius">
            <summary>
            Radius
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.Formulary.RCOutput.CentreCircle">
            <summary>
            Mittelpunkt des Bogens
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.Formulary.RCOutput.Point1">
            <summary>
            Erster Punkt (auf der ersten Linie liegend)
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.Formulary.RCOutput.Point2">
            <summary>
            Zweiter Punkt (auf der zweitenLinie liegend)
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.Formulary.RCOutput.G2">
            <summary>
            True dann im Uhrzeigersinn, sonst Gegenuhrzeigersinn
            </summary>
        </member>
        <member name="T:De.Boenigk.Utility.Formulary.MillTrack">
            <summary>
            Diese Klasse rechnet aus einer Linie und einem Durchmesser (Werkzeug) zwei Linien aus.
            Diese Linien liegt auf dem Kreis. Diese Linien werden z.B.: für die Radiuskorrektur- Anzeige benötigt.
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.MillTrack.#ctor">
            <summary>
            Konstruktor
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.MillTrack.Create(De.Boenigk.Utility.CNC.Polygon,De.Boenigk.Utility.CNC.Polygon,System.Double)">
            <summary>
            Rechnet aus einer Linie und einem Durchmesser (Werkzeug) zwei Linien aus.
            
            Die neuen Linien werden in der Eigenschaften FirstL, LastL, FirstR und LastR.
            </summary>
            <param name="aFirst">Erster Punkt der Linie</param>
            <param name="aLast">Zweiter Punkt der Linie</param>
            <param name="aDiameter">Radius</param>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.MillTrack.Create(System.Drawing.PointF,System.Drawing.PointF,System.Double)">
            <summary>
            Rechnet aus einer Linie und einem Durchmesser (Werkzeug) zwei Linien aus.
            
            Die neuen Linien werden in der Eigenschaften FirstL, LastL, FirstR und LastR.
            </summary>
            <param name="aFirst">Erster Punkt der Linie</param>
            <param name="aLast">Zweiter Punkt der Linie</param>
            <param name="aDiameter">Radius</param>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.MillTrack.Create(System.Single,System.Single,System.Single,System.Single,System.Double)">
            <summary>
            Rechnet aus einer Linie und einem Durchmesser (Werkzeug) zwei Linien aus.
            
            Die neuen Linien werden in der Eigenschaften FirstL, LastL, FirstR und LastR.
            </summary>
            <param name="aFirst">Erster Punkt der Linie</param>
            <param name="aLast">Zweiter Punkt der Linie</param>
            <param name="aDiameter">Radius</param>
        </member>
        <member name="P:De.Boenigk.Utility.Formulary.MillTrack.FirstL">
            <summary>
            Erster Punkt der linken Linie
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.Formulary.MillTrack.LastL">
            <summary>
            Zweiter Punkt der linken Linie
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.Formulary.MillTrack.FirstR">
            <summary>
            Erster Punkt der rechten Linie
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.Formulary.MillTrack.LastR">
            <summary>
            Zweiter Punkt der rechten Linie
            </summary>
        </member>
        <member name="T:De.Boenigk.Utility.Formulary.PointUpLine">
            <summary>
            Setzt einen Punkt auf die Linie.
            Diese Funktion soll zusammen mit DistancePointLine verwendet werden.
            (zuerst DistancePointLine dann PointUpLine)
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.PointUpLine.Get(De.Boenigk.Utility.CNC.Polygon,De.Boenigk.Utility.CNC.Polygon,De.Boenigk.Utility.CNC.Polygon,System.Double)">
            <summary>
            Setzt den Punkt, dass in der Nähe der Linie liegt, auf die Linie.
            </summary>
            <param name="aFirst">Erster Punkt der Linie</param>
            <param name="aLast">Zweiter Punkt der Linie</param>
            <param name="aPoint">Punkt, dass in der Nähe liegt</param>
            <param name="aDistance">Abstand zwischen Punkt und Linie. Dieser Abstand muss mit der Klasse DistancePointLine berechnet werden.</param>
            <returns>Neuer Punkt als Polygon</returns>
        </member>
        <member name="T:De.Boenigk.Utility.Formulary.RestTime">
            <summary>
            Rechnet den zeitlichen Unterschied zwischen Startzeit und aktuellen Zeitpunkt
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.RestTime.Start">
            <summary>
            Zeit wird ab jetzt neu gemessen
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.RestTime.Get(System.Int32)">
            <summary>
            Gibt Restzeit als String- Zeichenkette zurück
            </summary>
            <param name="aProzent">Anzahl in Prozent, dass abgelaufen ist</param>
            <returns>Restzeit als String- Zeichenkette</returns>
        </member>
        <member name="T:De.Boenigk.Utility.Formulary.SecCalc">
            <summary>
            Rechnet die Sekunden in Stunden, Minuten, Sekunden um.
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.SecCalc.Convert(System.Int64)">
            <summary>
            Rechnet Sekunden in Stunden, Minuten, Sekunden um.
            Die Werte werden in den Eigenschaften Hour, Minutes und Seconds abgelegt.
            </summary>
            <param name="aSecunds">Sekunden</param>
        </member>
        <member name="P:De.Boenigk.Utility.Formulary.SecCalc.Hour">
            <summary>
            Stunden
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.Formulary.SecCalc.Minutes">
            <summary>
            Minuten
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.Formulary.SecCalc.Seconds">
            <summary>
            Sekunden
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.Formulary.SecCalc.Time">
            <summary>
            Zeit als String
            </summary>
        </member>
        <member name="T:De.Boenigk.Utility.Formulary.Segment">
            <summary>
            http://local.wasp.uwa.edu.au/~pbourke/geometry/
            Co do tych zagadnień to proszę rzucić okiem, przesyłam kod klasy Segment
            (odcinek) która ma początek i koniec i potrafi obliczać przecięcie z
            innym odcinkiem.
            Ma też funkcję ClosestTo która zwraca najbliższy punkt na odcinku do
            podanego, czyli jak odległość między zwróconym punktem a podanym będzie
            równa 0 tzn że podany punkt leży na odcinku.
            </summary>
        </member>
        <member name="T:De.Boenigk.Utility.Formulary.point">
            <summary>
            Punkt
            </summary>
        </member>
        <member name="T:De.Boenigk.Utility.Formulary.Line">
            <summary>
            Linie
            </summary>
        </member>
        <member name="T:De.Boenigk.Utility.Formulary.Spline">
            <summary>
            Spline
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.Spline.Create(System.Collections.Generic.List{System.Byte[]})">
            <summary>
            Spline wird erzeugt
            </summary>
            <param name="polylist">ArrayList mit Polygon Objekten, Polygon Objekte sind als Byte Arrays gespeichert</param>
            <returns>Neue ArrayList mit Polygon Objekten</returns>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.Spline.bspline(System.Single[],System.Int32,System.Collections.Generic.List{System.Byte[]})">
            <summary>
            
            </summary>
            <param name="u"></param>
            <param name="fitPNr"></param>
            <param name="aPolylist"></param>
        </member>
        <member name="P:De.Boenigk.Utility.Formulary.Spline.Degree">
            <summary>
            Grad des Splines
            </summary>
        </member>
        <member name="T:De.Boenigk.Utility.Formulary.Split">
            <summary>
            Zerlegt Vektoren
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.Split.#ctor">
            <summary>
            Konstruktor
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.Split.GetSplintered(De.Boenigk.Utility.CNC.Polygon,De.Boenigk.Utility.CNC.Polygon,System.Single)">
            <summary>
            Ein Vektor wird in kleinere Vektoren zerlegt
            </summary>
            <param name="aFirst">Erster Punkt des Vektors</param>
            <param name="aLast">Zweiter Punkt des Vektors</param>
            <param name="aSplit">Split Länge</param>
            <returns>Zerlegter Vektor als ArrayList mit Polygon Objekten</returns>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.Split.GetPercentaged(De.Boenigk.Utility.CNC.Polygon,De.Boenigk.Utility.CNC.Polygon,System.Single,System.Single)">
            <summary>
            Gibt einen neuen Punkt des Vektors
            </summary>
            <param name="aFirst">Erster Punkt des Vektors</param>
            <param name="aLast">Zweiter Punkt des Vektors</param>
            <param name="aSplitX">Aufteilung X</param>
            <param name="aSplitY">Aufteilung Y</param>
            <returns>Polygon</returns>
        </member>
        <member name="P:De.Boenigk.Utility.Formulary.Split.Length">
            <summary>
            Vektorlänge
            </summary>
        </member>
        <member name="T:De.Boenigk.Utility.Formulary.VectorAngle">
            <summary>
            Ermittelt den Winkel zwischen zwei Vektoren
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.VectorAngle.#ctor">
            <summary>
            Standard Konstruktor
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.VectorAngle.Get(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Boolean,System.Boolean)">
            <summary>
            Winkel zwischen zwei Vektoren wird berechnet
            </summary>
            <param name="aFirst1">Erster Punkt des ersten Vektors</param>
            <param name="aLast1">Zweiter Punkt des ersten Vektors</param>
            <param name="aFirst2">Erster Punkt des zweiten Vektors</param>
            <param name="aLast2">Zweiter Punkt des zweiten Vektors</param>
            <param name="aRight">True, rechts (bestimmt die Richtung der Korrektur)</param>
            <param name="aIndexDiv">True, Index größer als 1</param>
            <returns>Winkel in Radian</returns>
        </member>
        <member name="P:De.Boenigk.Utility.Formulary.VectorAngle.RotateAngle">
            <summary>
            True, Winkel wurde gedreht
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.VSegment.#ctor(System.Double,System.Double)">
            <summary>
                Constructor.
            </summary>
            <param name="x">X position.</param>
            <param name="y">Y position</param>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.VSegment.Add(De.Boenigk.Utility.Formulary.VSegment,De.Boenigk.Utility.Formulary.VSegment)">
            <summary>
            	Used when a Vector2 is added to another Vector2.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.VSegment.op_Addition(De.Boenigk.Utility.Formulary.VSegment,De.Boenigk.Utility.Formulary.VSegment)">
            <summary>
            	Used when a Vector2 is added to another Vector2.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.VSegment.Subtract(De.Boenigk.Utility.Formulary.VSegment,De.Boenigk.Utility.Formulary.VSegment)">
            <summary>
            	Used to subtract a Vector2 from another Vector2.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.VSegment.op_Subtraction(De.Boenigk.Utility.Formulary.VSegment,De.Boenigk.Utility.Formulary.VSegment)">
            <summary>
            	Used to subtract a Vector2 from another Vector2.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.VSegment.Multiply(De.Boenigk.Utility.Formulary.VSegment,System.Double)">
            <summary>
            	Used when a Vector2 is multiplied by a scalar value.
            </summary>
            <param name="left"></param>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.VSegment.op_Multiply(De.Boenigk.Utility.Formulary.VSegment,System.Double)">
            <summary>
            	Used when a Vector2 is multiplied by a scalar value.
            </summary>
            <param name="left"></param>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.VSegment.Multiply(System.Double,De.Boenigk.Utility.Formulary.VSegment)">
            <summary>
            	Used when a scalar value is multiplied by a Vector2.
            </summary>
            <param name="scalar"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.VSegment.op_Multiply(System.Double,De.Boenigk.Utility.Formulary.VSegment)">
            <summary>
            	Used when a scalar value is multiplied by a Vector2.
            </summary>
            <param name="scalar"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.VSegment.Negate(De.Boenigk.Utility.Formulary.VSegment)">
            <summary>
            	Used to negate the elements of a vector.
            </summary>
            <param name="left"></param>
            <returns></returns>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.VSegment.op_UnaryNegation(De.Boenigk.Utility.Formulary.VSegment)">
            <summary>
            	Used to negate the elements of a vector.
            </summary>
            <param name="left"></param>
            <returns></returns>
        </member>
        <member name="T:De.Boenigk.Utility.Parser.StringList">
            <summary>
            Verwaltet eine Liste mit Zeichenketten (strings).
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Parser.StringList.#ctor">
            <summary>
            Konstruktor
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Parser.StringList.Check(System.String)">
            <summary>
            Prüft ob dies ein String ist, mit neuem Wert und die Position wird zurückgegeben.
            </summary>
            <param name="aString">Zeichenkette</param>
            <returns>Indexnummer des Strings in der Liste</returns>
        </member>
        <member name="M:De.Boenigk.Utility.Parser.StringList.Get">
            <summary>
            Gibt die Liste zurück
            </summary>
            <returns></returns>
        </member>
        <member name="M:De.Boenigk.Utility.Parser.StringList.Clear">
            <summary>
            Liste wird gelöscht
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Parser.StringList.IsInList(System.String)">
            <summary>
            Prüft ob in der Liste dieser String schon enthalten.
            </summary>
            <param name="aString">String dass geprüft wird</param>
            <returns>Wenn -1 dann dieser String nicht enthalten, sonst Indexnummer mit 0 beginnend</returns>
        </member>
        <member name="T:De.Boenigk.Utility.CNC.ToolList">
            <summary>
            Verwaltet die Werkzeuge in einer Liste
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.ToolList.#ctor">
            <summary>
            Standard Konstruktor
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.ToolList.#ctor(System.Byte)">
            <summary>
            Konstruktor mit Angabe der Anzahl der Werkzeuge. Eine leere 
            Werkzeugliste wird erzeugt.
            </summary>
            <param name="aNumber">Anzahl der Werkzeuge</param>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.ToolList.CreateNewList(System.Int32)">
            <summary>
            Eine leere Werkzeugliste wird erzeugt
            </summary>
            <param name="aNumber">Anzahl der Werkzeuge</param>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.ToolList.GetTool(System.Int32)">
            <summary>
            Gibt die entsprechende Werkzeug Objekt zurück
            </summary>
            <param name="aNumber">Zu suchende Werkzeugnummer</param>
            <returns>Objekt ToolProperty wird zurückgegeben, sonst null</returns>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.ToolList.CreateToolNumber(System.Int32)">
            <summary>
            Überprüft ob die gegebene Werkzeugnummer sich im Bereich der Werkzeugliste befindet. Wenn
            die Werkzeugnummer die Listengröße überschreitet, dann wird sie auf die Nummer 0 gesetzt.
            </summary>
            <param name="aT">Werkzeugnummer</param>
            <returns>Werkzeugnummer</returns>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.ToolList.IsToolUsed(System.Collections.Generic.List{De.Boenigk.Utility.CNC.Txx},System.Int32)">
            <summary>
            Überprüft ob die angegebene Werkzeugnummer in der Liste enthalten ist.
            </summary>
            <param name="aList">ArrayList mit Txx Objekten (In der Zeichnung benutzte Werkzeuge)</param>
            <param name="aNr">Werkzeugnummer</param>
            <returns>true, Werkzeug wird verwendet</returns>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.ToolList.IsAllToolsOff(System.Collections.Generic.List{De.Boenigk.Utility.CNC.Txx})">
            <summary>
            Überprüft ob alle Werkzeuge in der angegebenen ArrayList mit Txx Objekten 
            deaktiviert sind. Wenn alle Werkzeuge deaktiviert sind, dann wird true zurückgegeben.
            </summary>
            <param name="aList">ArrayList mit Txx Objekten (In der Zeichnung benutzte Werkzeuge)</param>
            <returns>true, alle vorhandene Werkzeuge in der Zeichnung ausgeschaltet, 
            oder wenn die angegebene ArrayList mit Txx Objekten leer ist.</returns>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.ToolList.ActiveAllTools">
            <summary>
            Alle Werkzeuge werden aktiviert
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.ToolList.UpdateTool(De.Boenigk.Utility.CNC.ToolProperty)">
            <summary>
            speichert den geänderten Werkzeug ab
            </summary>
            <param name="aTool">Werkzeug dass aktualisiert wird</param>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.ToolList.Name">
            <summary>
            Name des Werkzeuglagers
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.ToolList.List">
            <summary>
            Zugriff auf Werkzeugliste
            </summary>
            <returns>ArrayList</returns>
        </member>
        <member name="T:De.Boenigk.Utility.CNC.ToolProperty">
            <summary>
            Werkzeug Eigenschaften
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.ToolProperty.C_NameLength">
            <summary>
            Maximale Länge des Namen in Bytes
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.ToolProperty.Length">
            <summary>
            Gibt die GESAMMTE Länge eines ToolProperty Objektes in Bytes
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.ToolProperty.#ctor">
            <summary>
            Standard Konstruktor
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.ToolProperty.#ctor(System.Byte[],System.Int32)">
            <summary>
            Konstruktor, dass aus Byte Array eine ToolProperty erzeugt
            </summary>
            <param name="aBytes">Byte Array</param>
            <param name="aStartIndex">StartIndex</param>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.ToolProperty.ToString">
            <summary>
            Gibt die wichtigsten Einstellungen als Zeichenkette zurück
            </summary>
            <returns>Zeichenkette</returns>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.ToolProperty.Create(System.Byte[],System.Int32)">
            <summary>
            Aus Byte Array Werte setzen
            </summary>
            <param name="aBytes">Byte Array</param>
            <param name="aStartIndex">StartIndex</param>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.ToolProperty.ToByteArray">
            <summary>
            ToolProperty als Byte Array wird zurückgegeben
            </summary>
            <returns>Byte Array</returns>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.ToolProperty.Clone">
            <summary>
            Objekt dieser Klasse wird geklont
            </summary>
            <returns>Eine Kopie dieses Objektes</returns>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.ToolProperty.SetLaser(De.Boenigk.SMC5D.Settings.Laser.LaserMaterial)">
            <summary>
            Laser- Material setzen
            </summary>
            <param name="aLaserMaterial">LaserMaterial</param>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.ToolProperty.Activ">
            <summary>
            TRUE, Werkzeug ist aktiv
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.ToolProperty.T">
            <summary>
            Werkzeugnummer Txx
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.ToolProperty.Argb">
            <summary>
            Werkzeugfarbe 32bit ARGB Wert
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.ToolProperty.Name">
            <summary>
            Name des Werkzeugs, max. 20 Zeichen
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.ToolProperty.WorkingSpeedXY">
            <summary>
            Vorschub X und Y
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.ToolProperty.WorkingSpeedZ">
            <summary>
            Vorschub Z
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.ToolProperty.SpeedOfPullingOutTheTool">
            <summary>
            Hubgeschwindigkeit
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.ToolProperty.Depth">
            <summary>
            Werkzeug Tiefe
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.ToolProperty.Diameter">
            <summary>
            Werkzeug Durchmesser in Millimeter
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.ToolProperty.RadiusType">
            <summary>
            Richtung der Korrektur des Radius
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.ToolProperty.RadiusCorrection">
            <summary>
            Bestimmt die Radiuskorrektur für dieses Werkzeug durchgeführt werden soll
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.ToolProperty.RepetitionOfProcessing">
            <summary>
            Bearbeitung wiederholen
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.ToolProperty.MaterialID">
            <summary>
            Material ID
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.ToolProperty.CorrectionOfImmersionDepth">
            <summary>
            Zustellkorrektur in Millimeter
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.ToolProperty.Z2EmbossingOut">
            <summary>
            True, die Daten an Z2 sonst an Prägestift oder an Z senden
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.ToolProperty.NumberOfRevolutions">
            <summary>
            Spindel Drehzahl in Stufen- Einheit (1 bis 255)
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.ToolProperty.Relay">
            <summary>
            Die Relais werden ein- oder ausgeschaltet
            </summary>
            <value>Relais Nummer dass geschaltet werden soll</value>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.ToolProperty.AddToEditing">
            <summary>
            True, dann zur Bearbeitung hinzufügen ohne Radiuskorrektur
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.ToolProperty.Clockwise">
            <summary>
            0- keine Änderung, 1- Uhrzeigersinn, 2- Gegen Uhrzeigersinn
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.ToolProperty.OffsetX">
            <summary>
            Offset X
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.ToolProperty.OffsetY">
            <summary>
            Offset Y
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.ToolProperty.OffsetZ">
            <summary>
            Offset Z
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.ToolProperty.ToolLength">
            <summary>
            Werkzeuglänge
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.ToolProperty.Commands">
            <summary>
            Befehle:
            Bit 2 - Daten sind für Tangentialachse B
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.ToolProperty.Type">
            <summary>
            Werkzeug- Typ: 0 = Kugelstirnfräser, 1 = Schaftfräser, 2 = Gravur
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.ToolProperty.SideAngle">
            <summary>
            Flankenwinkel 'a' in Grad
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.ToolProperty.BodyLength">
            <summary>
            Körperlänge in mm
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.ToolProperty.FlatDiameter">
            <summary>
            Flächendurchmesser 'f' in Millimeter
            </summary>
        </member>
        <member name="T:De.Boenigk.Utility.CNC.Txx">
            <summary>
            Werkzeugnummer
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Txx.#ctor">
            <summary>
            Standard Konstruktor
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Txx.Clone">
            <summary>
            Objekt dieser Klasse wird geklont
            </summary>
            <returns>Eine Kopie dieses Objektes</returns>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Txx.#ctor(System.Int32)">
            <summary>
            Konstruktor mit Angabe der Werkzeugnummer
            </summary>
            <param name="aTxx">Werkzeugnummer</param>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.Txx.T">
            <summary>
            Werkzeugnummer
            </summary>
        </member>
        <member name="T:De.Boenigk.Utility.File.DirectoryFiles">
            <summary>
            Liest alle Dateien aus dem Verzeichnis und speichert in einer ArrayList ab
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.File.DirectoryFiles.#ctor">
            <summary>
            Standard Konstruktor
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.File.DirectoryFiles.GetFiles(System.String,System.String)">
            <summary>
            Directory wird ausgelesen, alle Dateinamen werden in der ArrayList gespeichert und zurückgegeben.
            </summary>
            <param name="aDirectory">Directory dass durchsucht wird.</param>
            <param name="aExt">Filter, als Dateierweiterung z.B.: *.mas</param>
            <returns>ArrayList mit String Objekten als Dateinamen</returns>
        </member>
        <member name="M:De.Boenigk.Utility.File.DirectoryFiles.GetDirectories(System.String)">
            <summary>
            Directory wird ausgelesen, alle Unterverzeichnisse werden in der ArrayList gespeichert und zurückgegeben.
            </summary>
            <param name="aDirectory">Directory dass durchsucht wird.</param>
            <returns>ArrayList mit String Objekten als Unterverzeichnisnamen</returns>
        </member>
        <member name="T:De.Boenigk.Utility.File.Expansion">
            <summary>
            Bearbeitung der Dateierweiterung 
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.File.Expansion.#ctor">
            <summary>
            Standard Konstruktor
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.File.Expansion.GetExt(System.String,System.Int32)">
            <summary>
            Gibt die ausgewählte Dateierweiterung zurück
            </summary>
            <param name="aFilter">Ein String Filter, daß im OpenFileDialog oder SaveFileDialog
            eingetragen wurde z.B.: Din 66025 (*.nc)|*.nc|Hpgl (*.plt)|*.plt</param>
            <param name="aIndex">Der Index des ausgewählten Filters</param>
            <returns>ausgewählter Erweiterung als String zurückgeben</returns>
        </member>
        <member name="T:De.Boenigk.Utility.File.FileEventArgs">
            <summary>
            FileEventArgs ist eine Nachricht für 
            den Fortschritt der Dateibearbeitung.
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.File.FileEventArgs.#ctor(System.String,System.Int64,System.Int64)">
            <summary>
            Standard Konstruktor
            </summary>
            <param name="aText">Text</param>
            <param name="aCount">Anzahl der Elemente</param>
            <param name="aCurrent">Aktuelle Position</param>
        </member>
        <member name="P:De.Boenigk.Utility.File.FileEventArgs.Text">
            <summary>
            Text
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.File.FileEventArgs.Count">
            <summary>
            Anzahl der Elemente
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.File.FileEventArgs.Current">
            <summary>
            Aktuelle Position
            </summary>
        </member>
        <member name="T:De.Boenigk.Utility.File.Log.Log">
            <summary>
            Die Klasse Log schreibt Informationen in ASCII Datei 
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.File.Log.Log.#ctor(System.Boolean)">
            <summary>
            Standard Konstruktor
            </summary>
            <param name="aOutToConsole">True, dann Ausgabe auf Konsole</param>
        </member>
        <member name="M:De.Boenigk.Utility.File.Log.Log.#ctor(System.String,De.Boenigk.Utility.File.Log.Log.LogLevel,System.Boolean)">
            <summary>
            Konstruktor mit der Angabe der Zieldatei und des Levels
            </summary>
            <param name="aFile">Pfad und Dateiname der Log Datei</param>
            <param name="aLevel">Level einer Log Datei</param>
            <param name="aOutToConsole">True, dann Ausgabe auf Konsole</param>
        </member>
        <member name="M:De.Boenigk.Utility.File.Log.Log.#ctor(System.String,System.Boolean)">
            <summary>
            Konstruktor mit der Angabe der Zieldatei und des Levels
            </summary>
            <param name="aFile">Pfad und Dateiname der Log Datei</param>
            <param name="aOutToConsole">True, dann Ausgabe auf Konsole</param>
        </member>
        <member name="M:De.Boenigk.Utility.File.Log.Log.#ctor(De.Boenigk.Utility.File.Log.Log.LogLevel,System.Boolean)">
            <summary>
            Konstruktor mit der Angabe des Levels
            </summary>
            <param name="aLevel">Level einer Log Datei</param>
            <param name="aOutToConsole">True, dann Ausgabe auf Konsole</param>
        </member>
        <member name="M:De.Boenigk.Utility.File.Log.Log.SetFile(System.String)">
            <summary>
            set Methode für File
            </summary>
            <param name="aFile">Dateiname mit Pfadangabe</param>
        </member>
        <member name="M:De.Boenigk.Utility.File.Log.Log.GetLogFile">
            <summary>
            Log Dateiname
            </summary>
            <returns></returns>
        </member>
        <member name="M:De.Boenigk.Utility.File.Log.Log.Write(System.String)">
            <summary>
            Methode schreibt eine Zeichenkette in die Logdatei
            </summary>
            <param name="aString">Zeichenkette die in die Log Datei geschrieben wird</param>
        </member>
        <member name="M:De.Boenigk.Utility.File.Log.Log.SetDate(System.Boolean)">
            <summary>
            Datum ausgeben
            </summary>
            <param name="aDate">true, dann Datum wird ausgegeben</param>
        </member>
        <member name="M:De.Boenigk.Utility.File.Log.Log.RemoveLogFile">
            <summary>
            Log Datei wird gelöscht
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.File.Log.Log.WriteLine(System.String,System.Boolean)">
            <summary>
            Methode schreibt eine Zeichenkette in die Default Logdatei Log.txt 
            und schließt die Datei am Ende
            </summary>
            <param name="aString">Zeichenkette die in die Log Datei geschrieben wird</param>
            <param name="aOutToConsole">True, dann Ausgabe auf Console</param>
        </member>
        <member name="M:De.Boenigk.Utility.File.Log.Log.WriteLine(System.String,System.String,System.Boolean)">
            <summary>
            Methode schreibt eine Zeichenkette in die Default Logdatei Log.txt 
            und schließt die Datei am Ende
            </summary>
            <param name="aString">Zeichenkette die in die Log Datei geschrieben wird</param>
            <param name="aFullPath">Dateiname</param>
            <param name="aOutToConsole">True, dann Ausgabe auf Console</param>
        </member>
        <member name="M:De.Boenigk.Utility.File.Log.Log.Close">
            <summary>
            Log Datei schliessen
            </summary>
        </member>
        <member name="T:De.Boenigk.Utility.File.Log.Log.LogLevel">
            <summary>
            Level Stufen
            </summary>
        </member>
        <member name="T:De.Boenigk.Utility.Formulary.PointD3D">
            <summary>
            3D Punkt für float- Zahlen
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.Formulary.PointD3D.Length">
            <summary>
            Gibt die GESAMMTE Länge eines PointF3D Objektes in Bytes
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.PointD3D.#ctor">
            <summary>
            Standard Konstruktor
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.PointD3D.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Konstruktor mit Angabe der X,Y,Z Koordinate
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.PointD3D.#ctor(System.Byte[],System.Int32)">
            <summary>
            Konstruktor mit Angabe der X,Y,Z Koordinaten als Byte Array
            </summary>
            <param name="aBytes">ArrayList mit Byte Objekten</param>
            <param name="aStartIndex">StartIndex</param>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.PointD3D.Clone">
            <summary>
            Objekt flach klonen
            </summary>
            <returns>Eine flache Kopie dieses Objektes</returns>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.PointD3D.ToByteArray">
            <summary>
            PointF3D als Byte Array wird zurückgegeben
            </summary>
            <returns>Byte Array</returns>
        </member>
        <member name="P:De.Boenigk.Utility.Formulary.PointD3D.X">
            <summary>
            Koordinate X
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.Formulary.PointD3D.Y">
            <summary>
            Koordinate Y
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.Formulary.PointD3D.Z">
            <summary>
            Koordinate Z
            </summary>
        </member>
        <member name="T:De.Boenigk.Utility.Formulary.PointD">
            <summary>
            4D Punkt für double- Zahlen
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.Formulary.PointD.Length">
            <summary>
            Gibt die GESAMMTE Länge eines PointF4D Objektes in Bytes
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.PointD.#ctor">
            <summary>
            Standard Konstruktor
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.PointD.#ctor(System.Double,System.Double)">
            <summary>
            Konstruktor mit Angabe der X,Y Koordinate
            </summary>
            <param name="aX">Zahl X</param>
            <param name="aY">Zahl Y</param>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.PointD.#ctor(System.Byte[],System.Int32)">
            <summary>
            Konstruktor mit Angabe der X,Y,Z,A Koordinaten als Byte Array
            </summary>
            <param name="aBytes">ArrayList mit Byte Objekten</param>
            <param name="aStartIndex">StartIndex</param>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.PointD.ToByteArray">
            <summary>
            PointF4D als Byte Array wird zurückgegeben
            </summary>
            <returns>Byte Array</returns>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.PointD.Clone">
            <summary>
            Objekt flach klonen
            </summary>
            <returns>Eine flache Kopie dieses Objektes</returns>
        </member>
        <member name="P:De.Boenigk.Utility.Formulary.PointD.X">
            <summary>
            Koordinate X
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.Formulary.PointD.Y">
            <summary>
            Koordinate Y
            </summary>
        </member>
        <member name="T:De.Boenigk.Utility.Formulary.PointD4D">
            <summary>
            4D Punkt für double- Zahlen
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.Formulary.PointD4D.Length">
            <summary>
            Gibt die GESAMMTE Länge eines PointD4D Objektes in Bytes
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.PointD4D.#ctor">
            <summary>
            Standard Konstruktor
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.PointD4D.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Konstruktor mit Angabe der X,Y,Z,A Koordinate
            </summary>
            <param name="aX">Zahl X</param>
            <param name="aY">Zahl Y</param>
            <param name="aZ">Zahl Z</param>
            <param name="aA">Zahl A</param>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.PointD4D.#ctor(System.Byte[],System.Int32)">
            <summary>
            Konstruktor mit Angabe der X,Y,Z,A Koordinaten als Byte Array
            </summary>
            <param name="aBytes">ArrayList mit Byte Objekten</param>
            <param name="aStartIndex">StartIndex</param>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.PointD4D.ToByteArray">
            <summary>
            PointD4D als Byte Array wird zurückgegeben
            </summary>
            <returns>Byte Array</returns>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.PointD4D.Clone">
            <summary>
            Objekt flach klonnen
            </summary>
            <returns>Eine flache Kopie dieses Objektes</returns>
        </member>
        <member name="P:De.Boenigk.Utility.Formulary.PointD4D.X">
            <summary>
            Koordinate X
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.Formulary.PointD4D.Y">
            <summary>
            Koordinate Y
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.Formulary.PointD4D.Z">
            <summary>
            Koordinate Z
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.Formulary.PointD4D.A">
            <summary>
            Koordinate A
            </summary>
        </member>
        <member name="T:De.Boenigk.Utility.File.SerializableFile">
            <summary>
            Summary description for SerializableFileSave.
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.File.SerializableFile.#ctor">
            <summary>
            Standard Konstruktor
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.File.SerializableFile.Save(System.String,System.Object)">
            <summary>
            Speichert ein Object ab
            </summary>
            <param name="aFileName">Dateiname mit Pfad</param>
            <param name="aObject">Object</param>
        </member>
        <member name="M:De.Boenigk.Utility.File.SerializableFile.Open(System.String)">
            <summary>
            Object wird geladen
            </summary>
            <param name="aFileName">Dateiname mit Pfad</param>
        </member>
        <member name="T:De.Boenigk.Utility.File.Txt.TxtAdmin">
            <summary>
            Eine einfache Klasse, die Ascii Datei in den Speicher lädt. Die geladene Textdatei enthält
            Bereichsnamen die mit Klammern [] markiert sind. In den Bereichen befinden sich nummerierte Texte.
            z.B.:
            [MessageBox]
            1 Die Datei %1 wurde nicht gefunden.
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.File.Txt.TxtAdmin.myData">
            <summary>
            Text- String dass geladen wurde
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.File.Txt.TxtAdmin.#ctor">
            <summary>
            Standard Konstruktor
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.File.Txt.TxtAdmin.Load(System.String)">
            <summary>
             Ascii Datei wird geladen
            </summary>
            <param name="aFullPath">Dateiname mit Pfad</param>
        </member>
        <member name="M:De.Boenigk.Utility.File.Txt.TxtAdmin.Get">
            <summary>
            Kompletter geladener Text wird als String zurückgegeben
            </summary>
            <returns>Text- String</returns>
        </member>
        <member name="M:De.Boenigk.Utility.File.Txt.TxtAdmin.Get(System.String,System.Int32)">
            <summary>
            Sucht den Text aus dem Bereich 'aArea' und mit der Nummer 'aNumber'
            und gibt zurück
            </summary>
            <param name="aArea">Bereich dass mit [] markiert ist</param>
            <param name="aNumber">Nummer des Textes</param>
            <returns>
            Text wird als String oder falls nicht gefunden als 
            "Text not found " + aArea + "," + aNumber.ToString() zurückgeben.
            </returns>
        </member>
        <member name="M:De.Boenigk.Utility.File.Txt.TxtAdmin.Get(System.String)">
            <summary>
            Sucht alle Texte aus dem Bereich 'aArea'. Die Textnummerierung muß 
            fortlaufend sein und fängt von 0 an.
            </summary>
            <param name="aArea">Bereich dass mit [] markiert ist</param>
            <returns>ArrayList mit String Objekten</returns>
        </member>
        <member name="M:De.Boenigk.Utility.File.Txt.TxtAdmin.Get(System.String,System.Int32,System.String[])">
            <summary>
            Sucht den Text aus dem Bereich 'aArea' und mit der Nummer 'aNumber'
            und gibt zurück. Zusätzlich kann ein String Array mit '%Zahl' eingefügt werden
            </summary>
            <param name="aArea">Bereich dass mit [] markiert ist</param>
            <param name="aNumber">Nummer des Textes</param>
            <param name="aTextArray">Eine Liste der Texte die hinzugefügt werden können</param>
            <returns>Text wird als String oder falls nicht gefunden als null zurückgeben</returns>
        </member>
        <member name="M:De.Boenigk.Utility.File.Txt.TxtAdmin.Get(System.String,System.Int32,System.String)">
            <summary>
            sucht den Text aus dem Bereich 'aArea' und mit der Nummer 'aNumber'
            und gibt zurück. Zusätzlich können ein String mit '%1' eingefügt werden
            </summary>
            <param name="aArea">Bereich dass mit [] markiert ist</param>
            <param name="aNumber">Nummer des Textes</param>
            <param name="aString">String dass eingefügt wird</param>
            <returns>Text wird als String oder falls nicht gefunden als null zurückgeben</returns>
        </member>
        <member name="M:De.Boenigk.Utility.File.Txt.TxtAdmin.Get(System.Int32,System.Int32)">
            <summary>
            Text mit der Nummer 'aNummer' wird ab einer bestimmten Startnummer gesucht.
            </summary>
            <param name="aNumber">Text mit der Nummer</param>
            <param name="aStartIndex">Ab der Startposition suchen</param>
            <returns>Wenn gefunden dann die Rückgabe des Textes ansonsten null</returns>
        </member>
        <member name="M:De.Boenigk.Utility.File.Txt.TxtAdmin.SearchNumbet(System.Int32,System.Int32)">
            <summary>
            Zeilennummer suchen
            </summary>
            <param name="aNumber">Zeilennummer</param>
            <param name="aStartIndex">Startindex</param>
            <returns>Gibt den Index der Zeile, sonst -1</returns>
        </member>
        <member name="T:De.Boenigk.Utility.File.Txt.TxtFile">
            <summary>
            Die Klasse TxtFile liest ASCII Text Dateien
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.File.Txt.TxtFile.#ctor(System.String)">
            <summary>
            Standard Konstruktor 
            </summary>
            <param name="aFileString">Datei mit Pfadangabe</param>
        </member>
        <member name="M:De.Boenigk.Utility.File.Txt.TxtFile.ReadToEnd">
            <summary>
            Eine ASCII Datei lesen und als char Array zurückgeben
            </summary>
            <returns>Inhalt der Datei wird als char array zurückgegeben</returns>
        </member>
        <member name="M:De.Boenigk.Utility.File.Txt.TxtFile.Read(System.Int32)">
            <summary>
            Eine Anzahl Bytes aus ASCII Datei lesen und als char Array zurückgeben.
            Anschießend wird die Datei geschlossen.
            </summary>
            <param name="aBytes">Zu lesende Anzahl Bytes</param>
            <returns>Inhalt der Datei wird als char array zurückgegeben</returns>
        </member>
        <member name="F:De.Boenigk.Utility.File.Txt.TxtFile.myBuffer">
            <summary>
            Puffer zum einlesen einen ganzen Datei
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.File.Txt.TxtFile.myStringBuilder">
            <summary>
            Wird verwendet um ein Zeile zu erzeugen!
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.File.Txt.TxtFile.ReadPLine">
            <summary>
            Liest eine Zeile aus der Datei und speichert im Current ab. Die Eigenschaft Position zeigt die Zeilen Position. 
            Die Datei wird auf einmal in ein Puffer char array eingelesen und dann werden die Zeilen einzeln ausgegeben.
            </summary>
            <returns>TRUE, dann kein Dateiende erreicht und weitere Daten folgen</returns>
        </member>
        <member name="M:De.Boenigk.Utility.File.Txt.TxtFile.ReadLine">
            <summary>
            Liest eine Zeile aus der Datei und speichert im Current ab. Die Eigenschaft Position zeigt NICHT die Position 
            der Zeile beim Benutzen dieser Methode, sondern den Puffer. 
            
            WICHTIG: Wenn die Position der Zeile benötigt wird, dann muss die Methode ReadPLine() benutzt wird.
            </summary>
            <returns>TRUE, dann kein Dateiende erreicht und weitere Daten folgen</returns>
        </member>
        <member name="M:De.Boenigk.Utility.File.Txt.TxtFile.Open">
            <summary>
            Datei öffnen
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.File.Txt.TxtFile.Close">
            <summary>
            Datei schließen
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.File.Txt.TxtFile.ClearPLineBuffer">
            <summary>
            Puffer dass von ReadPLine angelegt wurde, wird gelöscht
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.File.Txt.TxtFile.ReadPLines">
            <summary>
            Gibt die Anzahl der gelesenen Zeilen (hier werden Leerzeilen 
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.File.Txt.TxtFile.Position">
            <summary>
            Lese Position innerhalb einer Datei verändern/lesen.
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.File.Txt.TxtFile.Length">
            <summary>
            Gibt die Dateilänge zurück. Wenn die Methode .ReadPLine() verwendet wird, dann wird Pufferlänge zurückgegeben.
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.File.Txt.TxtFile.Current">
            <summary>
            Die gelesene Zeile wird zurückgegeben
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.File.Txt.TxtFile.Counter">
            <summary>
            Gibt die Anzahl der gelesenen Zeichen
            </summary>
        </member>
        <member name="T:De.Boenigk.Utility.File.Zip">
            <summary>
            Packt oder Entpackt Dateien im Zip Format
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.File.Zip.#ctor">
            <summary>
            Standard Konstruktor
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.File.Zip.#ctor(System.Int32)">
            <summary>
            Standard Konstruktor
            </summary>
            <param name="aCompressLevel">0 - store only to 9 - means best compression</param>
        </member>
        <member name="M:De.Boenigk.Utility.File.Zip.CreateZip(System.String,System.String)">
            <summary>
            Packt eine Datei im Zip Format
            </summary>
            <param name="aSourceFile">Datei, die gezippt wird</param>
            <param name="aZipFile">Dateiname und Pfad der gezippten Datei</param>
        </member>
        <member name="M:De.Boenigk.Utility.File.Zip.IsZipped(System.String)">
            <summary>
            Prüft ob die Datei, eine gezippte Datei ist 
            </summary>
            <param name="aFile">Dateiname mit Pfad</param>
            <returns>True, die Datei ist eine gezippte Datei</returns>
        </member>
        <member name="M:De.Boenigk.Utility.File.Zip.UnZip(System.String,System.String)">
            <summary>
            Entpackt eine Zip Datei
            </summary>
            <param name="aZipFile">Datei, die entpackt wird</param>
            <param name="aUnZipFile">Zieldatei</param>
        </member>
        <member name="M:De.Boenigk.Utility.File.Zip.CreateZip(System.Collections.Generic.List{System.String},System.String,System.Int32)">
            <summary>
            Writes the zip file.
            </summary>
            <param name="filesToZip">The files to zip.</param>
            <param name="path">The destination path.</param>
            <param name="compression">The compression level.</param>
        </member>
        <member name="T:De.Boenigk.Utility.Formulary.Arc">
            <summary>
            Kreisbogen wird erzeugt und die Polygone in einer ArrayList als Bytes gespeichert
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.Formulary.Arc.C_G02">
            <summary>
            Kreis(-bogen) im Uhrzeigersinn 
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.Formulary.Arc.C_G03">
            <summary>
            Kreis(-bogen) im Gegenuhrzeigersinn 
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.Formulary.Arc.myDeltaxyz">
            <summary>
            Erzeugt eine Spirale (Z muss unterschiedlich sein)
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.Formulary.Arc.myIsK">
            <summary>
            K Befehl, Kreis ist in X,Z oder Y,Z
            Werte: 0 - Kein K Befehl
                   1 - K Befehl wird gegen I getauscht (X)
                   2 - K Befehl wird geben J getauscht (Y)
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.Formulary.Arc.myFullArc">
            <summary>
            True, dann ist das ein voller Kreis
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.Formulary.Arc.myDigits">
            <summary>
            Anzahl Nachkommastellen
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.Formulary.Arc.myVectorLength">
            <summary>
            Vektorlänge
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.Arc.#ctor(De.Boenigk.Utility.Formulary.ArcDetail,System.Decimal,System.Int32)">
            <summary>
            Standard Konstruktor
            </summary>
            <param name="aSoluton">Bogenauflösung</param>
            <param name="aVectorLength">An Vektorlänge anpassen, falls 0 dann alte Methode verwenden</param>
            <param name="aDigits">Anzahl der Nachkommastellen</param>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.Arc.SetParams(System.String,System.Int32,De.Boenigk.Utility.CNC.Polygon,System.Boolean,System.Single,System.Single,System.Single)">
            <summary>
            Parameter für den Kreis setzen
            </summary>
            <param name="aString">DIN 66025 Befehlszeile die ein G2/G3 beinhaltet</param>
            <param name="aGxx">Wert 2 für G2 Befehl oder Wert 3 für G3 Befehl</param>
            <param name="aPolygon">Letzter Polygon Objekt</param>
            <param name="aG91">G90/G91</param>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.Arc.RotateGxx">
            <summary>
            Drehrichtung wird geändert (von G2 -> G3 oder umgekehrt)
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.Arc.SetParams(System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32,De.Boenigk.Utility.CNC.Polygon,System.Boolean,System.Single,System.Single)">
            <summary>
            Parameter für den Kreis setzen
            </summary>
            <param name="aXCentre">Mittelpunkt in X-Richtung</param>
            <param name="aYCentre">Mittelpunkt in Y-Richtung</param>
            <param name="aEndX">Endkoordinate in X-Richtung</param>
            <param name="aEndY">Endkoordinate in Y-Richtung</param>
            <param name="aEndZ">Z Höhe</param>
            <param name="aGxx">Wert 2 für G2 Befehl (Uhrzeigersinn) oder Wert 3 für G3 Befehl (Gegenuhrzeigersinn)</param>
            <param name="aStartPolygon">Start Polygon Objekt</param>
            <param name="aG91">G90/G91, wobei G91 ist relativ</param>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.Arc.Init(System.Int32,De.Boenigk.Utility.CNC.Polygon)">
            <summary>
            Werte werden initialisiert
            </summary>
            <param name="aGxx">Wert 2 für G2 Befehl oder Wert 3 für G3 Befehl</param>
            <param name="aPolygon">Polygon</param>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.Arc.SetIJK(System.String)">
            <summary>
            I und J Befehl setzen
            </summary>
            <param name="aString">DIN 66025 Befehlszeile die ein G2/G3 beinhaltet</param>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.Arc.SetXYZ(System.String,De.Boenigk.Utility.CNC.Polygon,System.Boolean)">
            <summary>
            X, Y und Z Befehl setzen
            </summary>
            <param name="aString">DIN 66025 Befehlszeile die ein G2/G3 beinhaltet</param>
            <param name="aPolygon">letzter Polygon Objekt</param>
            <param name="aG91">G90/G91, wobei G91 ist relativ</param>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.Arc.Create">
            <summary>
            erzeugt Kreise und Bögen in Form von Vektoren
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.Arc.SetBeginEndRadius">
            <summary>
            Anfangs- und Endradius wird gesetzt
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.Arc.CreateFourth">
            <summary>
            Viertel Berechnung
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.Arc.ArcG2">
            <summary>
            Alfa Berechnung für Kreisbogen im Uhrzeigersinn 
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.Arc.ArcG3">
            <summary>
            Alfa Berechnung für Kreisbogen gegen Uhrzeigersinn
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.Arc.PrepareArc">
            <summary>
            Parameter für Kreis/Bogen berechnen
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.Arc.CreateG2">
            <summary>
            Kreisbogen im Uhrzeigersinn erzeugen
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.Arc.CreateG3">
            <summary>
            Kreisbogen gegen Uhrzeigersinn erzeugen
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.Arc.IsL">
            <summary>
            Anzahl Vektoren an die Vektorlänge anpassen
            </summary>
            <returns>True, Punkt speichern</returns>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.Arc.SavePoint">
            <summary>
            Vektoren in ArrayList abspeichern
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.Formulary.Arc.Index">
            <summary>
            Index
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.Formulary.Arc.PolygonList">
            <summary>
            ArrayList mit Polygon Objekten
            </summary>
        </member>
        <member name="T:De.Boenigk.Utility.Formulary.ArcDetail">
            <summary>
            Auflösung der Kreise
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.Formulary.ArcDetail.Low">
            <summary>
            Niedrige Auflösung
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.Formulary.ArcDetail.Medium">
            <summary>
            Mittlere Auflösung
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.Formulary.ArcDetail.High">
            <summary>
            Hohe Auflösung
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.Formulary.ArcDetail.VeryHigh">
            <summary>
            Sehr hohe Auflösung
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.Formulary.ArcDetail.Max">
            <summary>
            Maximale Auflösung
            </summary>
        </member>
        <member name="T:De.Boenigk.Utility.Formulary.Area">
            <summary>
            Überprüft ob sich ein Vektor im Bereich eines Rechtecks befindet
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.Formulary.Area.myCut">
            <summary>
            Ermittelt den SAchnittpunkt
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.Area.#ctor">
            <summary>
            Standard Konstruktor
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.Area.#ctor(System.Drawing.RectangleF)">
            <summary>
            Konstruktor mit Angabe des Bereiches 
            </summary>
            <param name="aRectangleF">Rechteck als Bereich</param>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.Area.IsInArea(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Überprüft ob der Vektor im Bereich des Rechteck liegt. Hierfür 
            werden auch Schnittpunkte zwischen dem Vektor und dem Bereich gesucht.
            </summary>
            <param name="aFirst">Erster Punkt X,Y des Vektors</param>
            <param name="aSecond">Zweiter Punkt X,Y des Vektors</param>
            <returns>True, wenn Vektor im Bereich des Rechtecks</returns>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.Area.IsInAreaSimple(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Überprüft ob der Vektor im Bereich des Rechteck liegt. Hierfür 
            werden nur die Punkte überprüft ohne Schnittpunkte.
            </summary>
            <param name="aFirst">Erster Punkt X,Y des Vektors</param>
            <param name="aSecond">Zweiter Punkt X,Y des Vektors</param>
            <returns>True, wenn Vektor im Bereich des Rechtecks</returns>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.Area.SearchCut(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Mit Hilfe der Schnittpunkt- Berechnung wird überprüft 
            ob sich der angegebene Punkt im Bereich befindet.
            </summary>
            <param name="aFirst">Erster Punkt des Vektors</param>
            <param name="aSecond">Zweiter Punkt des Vektors</param>
            <returns>True, wenn Punkt im Bereich</returns>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.Area.SearchPoint(System.Drawing.PointF)">
            <summary>
            Punt wird überprüft, ob sich im Bereich befindet
            </summary>
            <param name="aPointF">Punkt</param>
            <returns>True, wenn Punkt im Bereich</returns>
        </member>
        <member name="P:De.Boenigk.Utility.Formulary.Area.Tolerance">
            <summary>
            Schnittpunkt Toleranz
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.Formulary.Area.AreaRectangle">
            <summary>
            Zugriff auf Bereich
            </summary>
        </member>
        <member name="T:De.Boenigk.Utility.Formulary.BitNr">
            <summary>
            Setzt oder löscht ein Bit in einem Byte
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.BitNr.#ctor">
            <summary>
            Standard Konstruktor
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.BitNr.Reset(System.Int32,System.Byte)">
            <summary>
            Ein Byte nullen
            </summary>
            <param name="aBitNr">Bitnummer (1 bis 8)</param>
            <param name="aByte">Byte in dem, ein Bit genullt wird</param>
            <returns>geänderter Byte wird zurückgegeben</returns>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.BitNr.Reset(System.UInt32,System.UInt32)">
            <summary>
            Ein Byte nullen
            </summary>
            <param name="aBitNr">Bitnummer als Wert (1 bis 32)</param>
            <param name="aUint">aUint in dem, ein Bit genullt wird</param>
            <returns>geänderter aUint wird zurückgegeben</returns>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.BitNr.Or(System.Int32,System.Byte)">
            <summary>
            Bitweise OR
            </summary>
            <param name="aBitNr">Bitnummer (1 bis 8)</param>
            <param name="aByte">Byte, dass geändert werden soll</param>
            <returns>geänderter Byte wird zurückgegeben</returns>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.BitNr.Or(System.UInt32,System.UInt32)">
            <summary>
            Bitweise OR
            </summary>
            <param name="aBitNr">Bitnummer (1 bis 32)</param>
            <param name="aByte">UINT, dass geändert werden soll</param>
            <returns>geänderter uint wird zurückgegeben</returns>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.BitNr.IsOne(System.Int32,System.Byte)">
            <summary>
            Prüft, ob ein Bit in angegebenem Byte gesetzt ist.
            </summary>
            <param name="aBitValue">Wert des Bits</param>
            <param name="aByte">Byte, in dem ein Bit überprüft wird</param>
            <returns>Wenn true, dann ist der geprüfte Bit im angegebenem Byte  gesetzt</returns>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.BitNr.IsOne(System.UInt32,System.UInt32)">
            <summary>
            Prüft, ob ein Bit in angegebenem Byte gesetzt ist.
            </summary>
            <param name="aBitValue">Wert des Bits</param>
            <param name="aUint">Byte, in dem ein Bit überprüft wird</param>
            <returns>Wenn true, dann ist der geprüfte Bit im angegebenem Byte  gesetzt</returns>
        </member>
        <member name="T:De.Boenigk.Utility.Formulary.ByteArray">
            <summary>
            Variablen werden nach Byte Array Konvertiert
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.ByteArray.#ctor">
            <summary>
            Standard Konstruktor
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.ByteArray.Set(System.Int32,System.Single,System.Byte[])">
            <summary>
            Float wird nach Byte Array konvertiert 
            </summary>
            <param name="aStartIndex">Start Index</param>
            <param name="aValue">Float Wert</param>
            <param name="aBytes">Byte Array in den kopiert wird</param>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.ByteArray.Set(System.Int32,System.Double,System.Byte[])">
            <summary>
            Double wird nach Byte Array konvertiert 
            </summary>
            <param name="aStartIndex">Start Index</param>
            <param name="aValue">Float Wert</param>
            <param name="aBytes">Byte Array in den kopiert wird</param>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.ByteArray.Set(System.Int32,System.Int32,System.Byte[])">
            <summary>
            Int wird nach Byte Array konvertiert
            </summary>
            <param name="aStartIndex">Start Index</param>
            <param name="aValue">Int Wert</param>
            <param name="aBytes">Byte Array in den kopiert wird</param>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.ByteArray.Set(System.Int32,System.Int16,System.Byte[])">
            <summary>
            Short wird nach Byte Array konvertiert
            </summary>
            <param name="aStartIndex">Start Index</param>
            <param name="aValue">Short Wert</param>
            <param name="aBytes">Byte Array in den kopiert wird</param>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.ByteArray.Set(System.Int32,System.UInt32,System.Byte[])">
            <summary>
            UInt wird nach Byte Array konvertiert
            </summary>
            <param name="aStartIndex">Start Index</param>
            <param name="aValue">UInt Wert</param>
            <param name="aBytes">Byte Array in den kopiert wird</param>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.ByteArray.Set(System.Int32,System.Boolean,System.Byte[])">
            <summary>
            Boolean wird nach Byte Array konvertiert
            </summary>
            <param name="aStartIndex">Start Index</param>
            <param name="aValue">Float Wert</param>
            <param name="aBytes">Byte Array in den kopiert wird</param>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.ByteArray.Set(System.Int32,System.String,System.Byte[])">
            <summary>
            String wird nach Byte Array konvertiert
            </summary>
            <param name="aStartIndex">Start Index</param>
            <param name="aValue">Float Wert</param>
            <param name="aBytes">Byte Array in den kopiert wird</param>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.ByteArray.Set(System.Int32,System.String,System.Byte[],System.Int32)">
            <summary>
            String wird nach Byte Array konvertiert
            </summary>
            <param name="aStartIndex">Start Index</param>
            <param name="aValue">Float Wert</param>
            <param name="aBytes">Byte Array in den kopiert wird</param>
            <param name="aLength">Anzahl der Bytes, die gefüllt werden</param>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.ByteArray.StringToByteArray(System.String)">
            <summary>
            String nach Byte Array konvertieren
            </summary>
            <param name="aStr">String dass konvertiert wird</param>
            <returns>byte array</returns>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.ByteArray.ByteArrayToString(System.Byte[])">
            <summary>
            Byte array nach string konvertieren
            </summary>
            <param name="aArray">Byte array nach string konvertieren</param>
            <returns>string</returns>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.ByteArray.Set(System.Int32,System.Byte[],System.Byte[])">
            <summary>
            Array wird nach Byte Array kopiert
            </summary>
            <param name="aStartIndex">Start Index</param>
            <param name="aOutBytes">Byte Array, dass in aInBytes kopiert wird</param>
            <param name="aInBytes">Byte Array in den geschrieben wird</param>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.ByteArray.GetString(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Ein String wird aus einer Byte Array erzeugt.
            </summary>
            <param name="aBytes">Byte Array</param>
            <param name="aStartIndex">Startindex</param>
            <param name="aLength">Länge</param>
            <returns>Gibt den erzeugten string</returns>
        </member>
        <member name="T:De.Boenigk.Utility.Formulary.Calculation">
            <summary>
            Rechenroutinen für die Massen in der Anzeige
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.Formulary.Calculation.myArray">
            <summary>
            Größe des Zeichnungsbereichs
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.Formulary.Calculation.myDraw">
            <summary>
            Größe der Zeichnung
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.Formulary.Calculation.myMax">
            <summary>
            max. X,Y Koordinate
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.Formulary.Calculation.myMin">
            <summary>
            min. X,Y Koordinate
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.Formulary.Calculation.myZoom">
            <summary>
            aktueller Zoom
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.Formulary.Calculation.myOldZoom">
            <summary>
            alter Zoom
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.Formulary.Calculation.myPan">
            <summary>
            Pan Verschiebung  X,Y Koordinate
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.Formulary.Calculation.myCentre">
            <summary>
            Mittelpunkt der X, Y Koordinate (Zeichnung wird um X, Y verschoben)
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.Formulary.Calculation.myMM">
            <summary>
            Einheit Millimeter oder Inch
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.Formulary.Calculation.myAbs">
            <summary>
            Absolut oder Relativ
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.Formulary.Calculation.myUnitCreated">
            <summary>
            Schalter für Min. X,Y und Max. X,Y Ermittlung
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.Calculation.#ctor">
            <summary>
            Standard Konstruktor
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.Calculation.GetPointFromMMToScreen(System.Double,System.Double)">
            <summary>
            Punkt von Millimeter nach Bildschirmkoordinaten berechnen und zurückgeben
            </summary>
            <param name="aX">X Koordinate</param>
            <param name="aY">Y Koordinate</param>
            <returns>berechneter Punkt wird zurückgegeben</returns>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.Calculation.GetPointFromINCToScreen(System.Double,System.Double)">
            <summary>
            Punkt von Inc nach Bildschirmkoordinaten berechnen und zurückgeben
            </summary>
            <param name="aX">X Koordinate</param>
            <param name="aY">Y Koordinate</param>
            <returns>berechneter Punkt wird zurückgegeben</returns>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.Calculation.GetPointFromMMToFile(System.Double,System.Double,System.Double)">
            <summary>
            Punkt von Millimeter nach Dateiformat berechnen und zurückgeben
            </summary>
            <param name="aUnit">Einheit</param>		
            <param name="aX">X Koordinate</param>
            <param name="aY">Y Koordinate</param>
            <returns>berechneter Punkt wird zurückgegeben</returns>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.Calculation.GetPointFromMMToFile(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Punkt von Millimeter nach Dateiformat berechnen und zurückgeben
            </summary>
            <param name="aUnit">Einheit</param>		
            <param name="aX">X Koordinate</param>
            <param name="aY">Y Koordinate</param>
            <param name="aZ">Z Koordinate</param>
            <returns>berechneter Punkt wird zurückgegeben</returns>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.Calculation.GetPointFromMMToFile(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Punkt von Millimeter nach Dateiformat berechnen und zurückgeben
            </summary>
            <param name="aUnit">Einheit</param>		
            <param name="aX">X Koordinate</param>
            <param name="aY">Y Koordinate</param>
            <param name="aZ">Z Koordinate</param>
            <param name="aA">A Koordinate</param>
            <returns>berechneter Punkt wird zurückgegeben</returns>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.Calculation.GetPointFromMMToFile(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Punkt von Millimeter nach Dateiformat berechnen und zurückgeben
            </summary>
            <param name="aUnit">Einheit</param>		
            <param name="aX">X Koordinate</param>
            <param name="aY">Y Koordinate</param>
            <param name="aZ">Z Koordinate</param>
            <param name="aA">A Koordinate</param>
            <param name="aB">B Koordinate</param>
            <returns>berechneter Punkt wird zurückgegeben</returns>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.Calculation.GetPointFFromScreenToINC(System.Int32,System.Int32)">
            <summary>
            Punkt von Bildschirmkoordinaten nach Inch berechnen und zurückgeben
            </summary>
            <param name="aX">X Koordinate</param>
            <param name="aY">Y Koordinate</param>
            <returns>berechneter Punkt wird zurückgegeben</returns>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.Calculation.GetPointFFromMMToINC(System.Double,System.Double)">
            <summary>
            Punkt wird von Millimeter nach INC umgerechnet
            </summary>
            <param name="aX">X Koordinate</param>
            <param name="aY">Y Koordinate</param>
            <returns>berechneter Punkt wird zurückgegeben</returns>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.Calculation.GetNumberFromINCToMM(System.Double)">
            <summary>
            Zahl wird von Inc nach Millimeter umgerechnet
            </summary>
            <param name="aNumber">Eine Zahl</param>
            <returns>berechnete Zahl wird zurückgegeben</returns>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.Calculation.GetPointFFromINCToMM(System.Double,System.Double)">
            <summary>
            Punkt wird von Inc nach Millimeter umgerechnet
            </summary>
            <param name="aX">X Koordinate</param>
            <param name="aY">Y Koordinate</param>
            <returns>berechneter Punkt wird zurückgegeben</returns>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.Calculation.GetPointFromFileToScreen(System.Double,De.Boenigk.Utility.Formulary.PointD,System.Double,System.Double)">
            <summary>
            Punkt von Dateiformat nach Bildschirmkoordinaten berechnen und zurückgeben
            </summary>
            <param name="aUnit">Einheit</param>
            <param name="aFactor">Skalierung der Zeichnung um Faktor X,Y</param>
            <param name="aX">X Koordinate</param>
            <param name="aY">Y Koordinate</param>
            <returns>berechneter Punkt wird zurückgegeben</returns>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.Calculation.GetPointFFromScreenToMM(System.Int32,System.Int32)">
            <summary>
            Punkt von Bildschirmkoordinaten nach Millimeter berechnen und zurückgeben
            </summary>
            <param name="aX">X Koordinate</param>
            <param name="aY">Y Koordinate</param>
            <returns>berechneter Punkt wird zurückgegeben</returns>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.Calculation.GetPointFFromFileToMM(System.Double,De.Boenigk.Utility.Formulary.PointD,System.Double,System.Double)">
            <summary>
            Punkt von Dateiformat nach Millimeter berechnen und zurückgeben
            </summary>
            <param name="aUnit">Einheit</param>
            <param name="aFactor">Skalierung der Zeichnung um Faktor X,Y</param>
            <param name="aX">X Koordinate</param>
            <param name="aY">Y Koordinate</param>
            <returns>berechneter Punkt wird zurückgegeben</returns>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.Calculation.GetNumberFromFileToMM(System.Double,System.Double,System.Double)">
            <summary>
            Zahl von Dateiformat nach Millimeter berechnen und zurückgeben
            </summary>
            <param name="aUnit">Einheit</param>
            <param name="aFactor">Skalierung der Zeichnung um Faktor X,Y</param>
            <param name="aNumber">Eine Zahl, die umgerechnet werden soll</param>
            <returns>berechneter Punkt wird zurückgegeben</returns>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.Calculation.GetNumberFromMMToFile(System.Double,System.Double,System.Double)">
            <summary>
            Zahl von Millimeter nach Dateiformat berechnen und zurückgeben
            </summary>
            <param name="aUnit">Einheit</param>		
            <param name="aFactor">Skalierung der Zeichnung um Faktor X,Y</param>
            <param name="aNumber">Eine Zahl, die umgerechnet werden soll</param>
            <returns>berechneter Punkt wird zurückgegeben</returns>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.Calculation.GetPointFFromScreenToFile(System.Double,De.Boenigk.Utility.Formulary.PointD,System.Int32,System.Int32)">
            <summary>
            Punkt von Bildschirmkoordinaten nach Dateiformat berechnen und zurückgeben
            </summary>
            <param name="aUnit">Einheit</param>
            <param name="aFactor">Skalierung der Zeichnung um Faktor X,Y</param>
            <param name="aX">X Koordinate</param>
            <param name="aY">Y Koordinate</param>
            <returns>berechneter Punkt wird zurückgegeben</returns>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.Calculation.GetNumberXFromScreenToFile(System.Double,System.Single,System.Int32)">
            <summary>
            Zahl X von Bildschirmkoordinaten nach Dateiformat berechnen und zurückgeben
            </summary>
            <param name="aUnit">Einheit</param>
            <param name="aFactorX">Skalierung der Zeichnung um Faktor X</param>
            <param name="aX">X Koordinate</param>
            <param name="aY">Y Koordinate</param>
            <returns>berechnete Zahl wird zurückgegeben</returns>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.Calculation.GetNumberXFromMMToScreen(System.Double)">
            <summary>
            Zahl X von Millimeter nach Bildschirmkoordinaten berechnen und zurückgeben
            </summary>
            <param name="aX">X Koordinate</param>
            <returns>berechnete Zahl wird zurückgegeben</returns>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.Calculation.GetNumberFromMMToScreen(System.Double)">
            <summary>
            Eine Zahl von Millimeter nach Bildschirmkoordinaten berechnen und zurückgeben
            </summary>
            <param name="aX">X Koordinate</param>
            <returns>berechnete Zahl wird zurückgegeben</returns>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.Calculation.GetNumberYFromScreenToFile(System.Double,System.Double,System.Int32)">
            <summary>
            Zahl Y von Bildschirmkoordinaten nach Dateiformat berechnen und zurückgeben
            </summary>
            <param name="aUnit">Einheit</param>
            <param name="aFactorY">Skalierung der Zeichnung um Faktor Y</param>
            <param name="aX">X Koordinate</param>
            <param name="aY">Y Koordinate</param>
            <returns>berechneter Punkt wird zurückgegeben</returns>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.Calculation.LineInArray(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Prüfung ob die angegebene Linie im Zeichnungsbereich
            </summary>
            <param name="aFirst">erster Punkt</param>
            <param name="aLast">zweiter Punkt</param>
            <returns>true, Linie im Zeichnungsbereich</returns>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.Calculation.GetPointValue(System.Drawing.Point)">
            <summary>
             Punkt- Berechnung für die Prüfung ob eine Linie im Zeichnungsbereich
            </summary>
            <param name="aPoint">Punkt der Linie</param>
            <returns>Ergebnis der Berechnung (muß mit dem anderem Punkt verglichen werden)</returns>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.Calculation.SetDrawMaxMinXY(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Zeichnungsgröße in Millimeter wird gesetzt
            </summary>
            <param name="aMaxX">Max X in Millimeter</param>
            <param name="aMaxY">Max Y in Millimeter</param>
            <param name="aMinX">Min X in Millimeter</param>
            <param name="aMinY">Min Y in Millimeter</param>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.Calculation.SetDrawMaxMinXY(System.Double,De.Boenigk.Utility.Formulary.PointD,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Zeichnungsgröße wird gesetzt
            </summary>
            <param name="aUnit">Einheit</param>
            <param name="aFaktor">Skalierung der Zeichnung um Faktor X und Y</param>
            <param name="aMaxX">Max X</param>
            <param name="aMaxY">Max Y</param>
            <param name="aMinX">Min X</param>
            <param name="aMinY">Min Y</param>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.Calculation.SetDrawMaxMinXY(De.Boenigk.Utility.CNC.PolygonList,De.Boenigk.Utility.CNC.PolygonList,System.Double,De.Boenigk.Utility.Formulary.PointD4D)">
            <summary>
            Zeichnungsgröße wird gesetzt
            </summary>
            <param name="aVectors">PolygonList mit Vektoren</param>
            <param name="aDrills">PolygonList mit Bohrpunkten</param>
            <param name="aUnit">Einheit der Zeichnung in Millimeter</param>
            <param name="aFactor">Faktor</param>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.Calculation.GetMaxDraw">
            <summary>
            Maximale Zeichnungsgröße der Zeichnung wird zurückgegeben.
            </summary>
            <returns>Maximale Zeichnungsgröße in Millimeter</returns>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.Calculation.GetMinDraw">
            <summary>
            Minimale Zeichnungsgröße der Zeichnung wird zurückgegeben.
            </summary>
            <returns>Minimale Zeichnungsgröße in Millimeter</returns>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.Calculation.GetSize">
            <summary>
            Zeichnungsgröße in X,Y
            </summary>
            <returns></returns>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.Calculation.ResetMinMax">
            <summary>
            Minimale und maximale Koordinate wird genullt.
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.Calculation.CreateMinMaxToMM">
            <summary>
            Zeichnunggröße Min X,Y und Max X,Y wird nach Millimeter umgerechnet
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.Calculation.SetCentreDraw(System.Drawing.PointF)">
            <summary>
            Zeichnungsposition setzen
            </summary>
            <param name="aPoint">Punkt X,Y</param>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.Calculation.SetSize(System.Drawing.Size)">
            <summary>
            Größe der Zeichnung wird initialisiert und Zoom berechnet
            </summary>
            <param name="aSize">Size, neue Zeichnungsgröße</param>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.Calculation.InitZoom">
            <summary>
            Zoom wird initialisiert
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.Calculation.SetZoomKey(De.Boenigk.Utility.Formulary.Calculation.ZoomType)">
            <summary>
            Zoom mit einem Key setzen
            </summary>
            <param name="aDrawing">Schlüssel 'C_ZoomMinus' für Zeichnung vergrößern, 'C_ZoomPlus' für Zeichnung verkleinern</param>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.Calculation.SetZoomToSelectedArray">
            <summary>
            Zoom alles für den ausgewählten Zeichnungsbereich setzen
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.Calculation.CreateDrawSize">
            <summary>
            Zeichnungsgröße berechnen
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.Calculation.SetPanForZoomAll">
            <summary>
            Pan für Zoom alles setzen
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.Calculation.SetPan">
            <summary>
            X,Y Pan wird berechnet
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.Calculation.SetPanX">
            <summary>
            X Pan wird berechnet
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.Calculation.SetPanY">
            <summary>
            Y Pan wird berechnet
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.Calculation.GetCoordinate(System.Drawing.Point,De.Boenigk.Utility.Formulary.PointD)">
            <summary>
             Koordinate berechnen und als String zurückgeben
            </summary>
            <param name="aMouse">XY Mauskoordinate der Maus</param>
            <param name="aMaterial">XY Werkstücknullpunkt</param>
            <returns>Aktuelle Koordinate als String</returns>
        </member>
        <member name="P:De.Boenigk.Utility.Formulary.Calculation.Millimeter">
            <summary>
            Einheit Millimeter oder Inch
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.Formulary.Calculation.Absolut">
            <summary>
            Absolut oder Relativ
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.Formulary.Calculation.Zoom">
            <summary>
            aktuelle Zoom der Zeichnung
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.Formulary.Calculation.Type">
            <summary>
            Typ des Zooms setzen
            </summary>
        </member>
        <member name="T:De.Boenigk.Utility.Formulary.Calculation.ZoomType">
            <summary>
            Anzeige Typ
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.Formulary.Calculation.ZoomType.Redraw">
            <summary>
            Zeichnung neu generieren und zeichnen
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.Formulary.Calculation.ZoomType.ZoomAll">
            <summary>
            Zooom Fenster
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.Formulary.Calculation.ZoomType.ZoomMaterial">
            <summary>
            Zoom Material
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.Formulary.Calculation.ZoomType.ZoomMachine">
            <summary>
            Zoom Maschine
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.Formulary.Calculation.ZoomType.ZoomPlus">
            <summary>
            Zoom Plus
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.Formulary.Calculation.ZoomType.ZoomMinus">
            <summary>
            Zoom Minus
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.Formulary.Calculation.ZoomType.ZoomWindow">
            <summary>
            Zoom Zeichnung
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.Formulary.Calculation.ZoomType.ZoomPan">
            <summary>
            Zoom Pan
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.Formulary.Calculation.ZoomType.Draw">
            <summary>
            Das exisitierende Bitmap neu zeichnen, ohne ein neues zu generieren 
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.Formulary.Calculation.ZoomType.ZoomPanX">
            <summary>
            Zoom Pan nur in X
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.Formulary.Calculation.ZoomType.ZoomPanY">
            <summary>
            Zoom Pan nur in Y
            </summary>
        </member>
        <member name="T:De.Boenigk.Utility.Formulary.Cut">
            <summary>
            Rechnet ein Schnittpunkt zwischen zwei Vektoren
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.Cut.#ctor">
            <summary>
            Konstruktor, Toleranz ist 0
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.Cut.#ctor(System.Single)">
            <summary>
            Konstruktor mit Toleranz Angabe
            </summary>
            <param name="aTolerance">Toleranz, je kleiner der Wert desto genauer (Werte zwischen 0.0F - 0.2F)</param>
        </member>
        <member name="F:De.Boenigk.Utility.Formulary.Cut.myCutPoint">
            <summary>
            Schnittpunkt
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.Cut.Search(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Schnittpunkt zwischen zwei Vektoren wird berechnet. Wenn ein Schnittpunkt gefunden, 
            dann wird er in der Eigenschaft CutPoint gespeichert.
            </summary>
            <param name="aFirst1">Erster Punkt des ersten Vektors</param>
            <param name="aSecond1">Zweiter Punkt des ersten Vektors</param>
            <param name="aFirst2">Erster Punkt des zweiten Vektors</param>
            <param name="aSecond2">Zweiter Punkt des zweiten Vektors</param>
            <returns>Wenn Schnittpunkt gefunden, dann wird true zurückgegeben</returns>
        </member>
        <member name="P:De.Boenigk.Utility.Formulary.Cut.CutPoint">
            <summary>
            Berechneter Schnittpunkt wird zurückgegeben
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.Formulary.Cut.Tolerance">
            <summary>
            Schnittpunkt Toleranz
            </summary>
        </member>
        <member name="T:De.Boenigk.Utility.Formulary.C_VarLength">
            <summary>
            Enthält Konstant- Längen der Variablen
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.C_VarLength.#ctor">
            <summary>
            Standard Konstruktor
            </summary>
        </member>
        <member name="T:De.Boenigk.Utility.Formulary.DistancePointStraightLine">
            <summary>
            Rechnet Abstand zwischen Punkt und einer Gerade
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.DistancePointStraightLine.#ctor">
            <summary>
            Standard Konstruktor
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.DistancePointStraightLine.Get(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Rechnet Abstand zwischen Punkt und einer Geraden
            </summary>
            <param name="aP1">Erster Punkt des Vektors</param>
            <param name="aP2">Zweiter Punkt des Vektors</param>
            <param name="aPoint">Punkt</param>
            <returns>Abstand zwischen Punkt und Geraden</returns>
        </member>
        <member name="T:De.Boenigk.Utility.Formulary.MathEx">
            <summary>
            Einfache mathematische Formelsammlung
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.Formulary.MathEx.C_Inc">
            <summary>
            Inc Faktor, wird verwendet um von Inc nach MM umzurechnen
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.MathEx.#ctor">
            <summary>
            Standard Konstruktor
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.MathEx.VectorLength(De.Boenigk.Utility.Formulary.PointD,De.Boenigk.Utility.Formulary.PointD)">
            <summary>
            Rechnet die Länge des Vektors
            </summary>
            <param name="aFirst">Erster Punkt des Vektors</param>
            <param name="aLast">Zweiter Punkt des Vektors</param>
            <returns>Länge des Vektors</returns>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.MathEx.VectorLength(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Rechnet die Länge des Vektors
            </summary>
            <param name="aFirst">Erster Punkt des Vektors</param>
            <param name="aLast">Zweiter Punkt des Vektors</param>
            <returns>Länge des Vektors</returns>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.MathEx.VectorLength(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Rechnet die Länge des Vektors
            </summary>
            <param name="aFirst">Erster Punkt des Vektors</param>
            <param name="aLast">Zweiter Punkt des Vektors</param>
            <returns>Länge des Vektors</returns>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.MathEx.VectorLength(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Rechnet die Länge des Vektors
            </summary>
            <param name="aX1">Erster Punkt X</param>
            <param name="aY1">Erster Punkt Y</param>
            <param name="aX2">Zweiter Punkt X</param>
            <param name="aY2">Zweiter Punkt Y</param>
            <returns>Länge des Vektors</returns>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.MathEx.VectorLength(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Rechnet die Länge des Vektors
            </summary>
            <param name="aX1">Erster Punkt X</param>
            <param name="aY1">Erster Punkt Y</param>
            <param name="aX2">Zweiter Punkt X</param>
            <param name="aY2">Zweiter Punkt Y</param>
            <returns>Länge des Vektors</returns>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.MathEx.Angle(De.Boenigk.Utility.Formulary.PointF3D,De.Boenigk.Utility.Formulary.PointF3D)">
            <summary>
            Ein Winkel des Vektors wird berechnet und in Radian zurückgegeben
            </summary>
            <param name="aFirst">Erster Punkt des Vektors</param>
            <param name="aLast">Zweiter Punkt des Vektors</param>
            <returns>Winkel in radian zwischen waagerechten Vektor und Punkt</returns>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.MathEx.Angle(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Ein Winkel des Vektors wird berechnet und in Radian zurückgegeben
            </summary>
            <param name="aFirst">Erster Punkt des Vektors</param>
            <param name="aLast">Zweiter Punkt des Vektors</param>
            <returns>Winkel in radian zwischen waagerechten Vektor und Punkt</returns>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.MathEx.Angle(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Ein Winkel des Vektors wird berechnet und in Radian zurückgegeben
            </summary>
            <param name="aFirstX">Erster Punkt des Vektors</param>
            <param name="aFirstY">Erster Punkt des Vektors</param>
            <param name="aLastX">Zweiter Punkt des Vektors</param>
            <param name="aLastY">Zweiter Punkt des Vektors</param>
            <returns>Winkel in radian zwischen waagerechten Vektor und Punkt</returns>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.MathEx.Angle(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Ein Winkel des Vektors wird berechnet und in Radian zurückgegeben
            </summary>
            <param name="aFirst">Erster Punkt des Vektors</param>
            <param name="aLast">Zweiter Punkt des Vektors</param>
            <returns>Winkel in radian zwischen waagerechten Vektor und Punkt</returns>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.MathEx.AngleBetweenPoints(De.Boenigk.Utility.Formulary.PointD,De.Boenigk.Utility.Formulary.PointD)">
            <summary>
            Ein Winkel zwischen zwei Punkten wird berechnet. Der erste 
            Punkt stellt einen waagerechten Vektor dar. Der zweite Punkt 
            liegt im Winkel zu dem waagerechten Vektor. Dieser Winkel 
            wird berechnet und in Grad zurückgegeben.
            </summary>
            <param name="aHorizontal">Punkt, dass waagerechten Vektor darstellt</param>
            <param name="aNext">Punkt, dass im Winkel zu waagerechten Vektor liegt</param>
            <returns>Winkel in Grad zwischen waagerechten Vektor und Punkt</returns>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.MathEx.AngleBetweenPoints(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Ein Winkel zwischen zwei Punkten wird berechnet. Der erste 
            Punkt stellt einen waagerechten Vektor dar. Der zweite Punkt 
            liegt im Winkel zu dem waagerechten Vektor. Dieser Winkel 
            wird berechnet und in Grad zurückgegeben.
            </summary>
            <param name="aHorizontal">Punkt, dass waagerechten Vektor darstellt</param>
            <param name="aNext">Punkt, dass im Winkel zu waagerechten Vektor liegt</param>
            <returns>Winkel in Grad zwischen waagerechten Vektor und Punkt</returns>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.MathEx.GetMaxXY(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Sucht die Größte X und Y Koordinate. Daraus wird ein Punkt
            aus den größten Koordinaten zusammengestellt und zurückgegeben.
            </summary>
            <param name="aFirst">erster Punkt</param>
            <param name="aLast">zweiter Punkt</param>
            <returns>größter Koordinaten werden zurückgegeben</returns>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.MathEx.GetMaxXY(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Sucht die Größte X und Y Koordinate. Daraus wird ein Punkt
            aus den größten Koordinaten zusammengestellt und zurückgegeben.
            </summary>
            <param name="aFirst">erster Punkt</param>
            <param name="aLast">zweiter Punkt</param>
            <returns>größter Koordinaten werden zurückgegeben</returns>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.MathEx.GetMaxXY(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sucht die Größte X und Y Koordinate. Daraus wird ein Punkt
            aus den größten Koordinaten zusammengestellt und zurückgegeben.
            </summary>
            <param name="aX1">Erster Punkt X</param>
            <param name="aY1">Erster Punkt Y</param>
            <param name="aX2">Zweiter Punkt X</param>
            <param name="aY2">Zweiter Punkt Y</param>
            <returns>größter Koordinaten werden zurückgegeben</returns>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.MathEx.GetMaxXY(De.Boenigk.Utility.Formulary.PointD,De.Boenigk.Utility.Formulary.PointD)">
            <summary>
            Sucht die Größte X und Y Koordinate. Daraus wird ein Punkt
            aus den größten Koordinaten zusammengestellt und zurückgegeben.
            </summary>
            <param name="aFirst">erster Punkt</param>
            <param name="aLast">zweiter Punkt</param>
            <returns>größter Koordinaten werden zurückgegeben</returns>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.MathEx.GetExtent(System.Single)">
            <summary>
            Umfang in Millimeter wird aus Radius berechnet
            </summary>
            <param name="aRadius">Radius in Grad</param>
            <returns>Umfang in Millimeter</returns>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.MathEx.GetMinXY(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sucht die Größte X und Y Koordinate. Daraus wird ein Punkt
            aus den größten Koordinaten zusammengestellt und zurückgegeben.
            </summary>
            <param name="aX1">Erster Punkt X</param>
            <param name="aY1">Erster Punkt Y</param>
            <param name="aX2">Zweiter Punkt X</param>
            <param name="aY2">Zweiter Punkt Y</param>
            <returns>größter Koordinaten werden zurückgegeben</returns>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.MathEx.GetMinXY(De.Boenigk.Utility.Formulary.PointD,De.Boenigk.Utility.Formulary.PointD)">
            <summary>
            Sucht die Größte X und Y Koordinate. Daraus wird ein Punkt
            aus den größten Koordinaten zusammengestellt und zurückgegeben.
            </summary>
            <param name="aFirst">erster Punkt</param>
            <param name="aLast">zweiter Punkt</param>
            <returns>größter Koordinaten werden zurückgegeben</returns>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.MathEx.GetMinXY(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Sucht die Größte X und Y Koordinate. Daraus wird ein Punkt
            aus den größten Koordinaten zusammengestellt und zurückgegeben.
            </summary>
            <param name="aFirst">erster Punkt</param>
            <param name="aLast">zweiter Punkt</param>
            <returns>größter Koordinaten werden zurückgegeben</returns>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.MathEx.GetSize(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Größe zwischen zwei Punkten wird ermittelt
            </summary>
            <param name="aFirst">erster Punkt</param>
            <param name="aLast">zweiter Punkt</param>
            <returns>Ermittelte Größe wird zurückgegeben</returns>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.MathEx.PointInVector(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Prüft ob ein Punkt im Vektor liegt
            </summary>
            <param name="aFirst">Erster Punkt des Vektors</param>
            <param name="aSecond">Zweiten Punkt des Vektors</param>
            <param name="aPoint">Der zu prüfende Punkt</param>
            <returns>True, Punkt liegt im Vektor</returns>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.MathEx.CutPoint(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Single)">
            <summary>
            Ermittelt ob der angegebene Schnittpunkt "aCutPoint" auf der Geraden liegt
            </summary>
            <param name="aFirst">Erster Punkt der Geraden</param>
            <param name="aSecond">Zweiter Punkt der Geraden</param>
            <param name="aPoint">Punkt, dass überprüft wird</param>
            <param name="aTolerance">Toleranz 0 - keine, 0 > größer</param>
            <returns>Wenn true, dann liegt der Punkt auf der Geraden</returns>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.MathEx.IsInArea(System.Drawing.PointF,De.Boenigk.Utility.Formulary.PointD,De.Boenigk.Utility.Formulary.PointD)">
            <summary>
            Prüft ob der Punkt aPoint im Bereich (zwischen den Punkten aMin und aMax) liegt.
            </summary>
            <param name="aPoint">Der Punkt dass geprüft wird</param>
            <param name="aMin">Kleinster Punkt des Bereiches</param>
            <param name="aMax">Größter Punkt des Bereiches</param>
            <returns>True, Punkt liegt im Bereich</returns>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.MathEx.GetMinXY(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Sucht die kleinste X und Y Koordinate. Daraus wird ein Punkt
            aus den kleinsten Koordinaten zusammengestellt und zurückgegeben.
            </summary>
            <param name="aFirst">erster Punkt</param>
            <param name="aLast">zweiter Punkt</param>
            <returns>größter Koordinaten werden zurückgegeben</returns>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.MathEx.GetCentre(System.Drawing.Rectangle)">
            <summary>
            Mittelpunkt des Rechtecks wird berechnet
            </summary>
            <returns>Mittelpunkt wird zurückgegeben</returns>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.MathEx.GetCentre(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Mittelpunkt des Rechtecks wird berechnet
            </summary>
            <returns>Mittelpunkt wird zurückgegeben</returns>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.MathEx.GetCentre(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Mittelpunkt des Rechtecks wird berechnet
            </summary>
            <returns>Mittelpunkt wird zurückgegeben</returns>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.MathEx.GetCentre(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Mittelpunkt des Rechtecks wird berechnet
            </summary>
            <returns>Mittelpunkt wird zurückgegeben</returns>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.MathEx.GetCentre(De.Boenigk.Utility.Formulary.PointD,De.Boenigk.Utility.Formulary.PointD)">
            <summary>
            Mittelpunkt des Rechtecks wird berechnet
            </summary>
            <returns>Mittelpunkt wird zurückgegeben</returns>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.MathEx.GetCentre(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Mittelpunkt des Rechtecks wird berechnet
            </summary>
            <returns>Mittelpunkt wird zurückgegeben</returns>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.MathEx.Angle(System.Double)">
            <summary>
            Radian nach Winkel in Grad umrechnen
            </summary>
            <param name="aRadian">Radian</param>
            <returns>Winkel in Grad</returns>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.MathEx.Radian(System.Double)">
            <summary>
            Winkel in Grad nach Radian umrechnen
            </summary>
            <param name="aAngle">Winkel in Grad</param>
            <returns>Winkel in Radian</returns>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.MathEx.GetPercent(System.Double,System.Double)">
            <summary>
            Fortschritt Anzeige in Prozent. Die Prozente werden aus 
            der maximalen Zahl und aktuellen Position- Zahl berechnet.
            </summary>
            <param name="aMaxNumber">Maximale Zahl</param>
            <param name="aCurrent">aktuelle Zahl</param>
            <returns>Zahl in Prozenten</returns>
        </member>
        <member name="T:De.Boenigk.Utility.Formulary.Point3D">
            <summary>
            3D Punkt für int- Zahlen
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.Point3D.#ctor">
            <summary>
            Standard Konstruktor
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.Point3D.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Konstruktor mit Angabe der X,Y,Z Koordinate
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.Point3D.Clone">
            <summary>
            Objekt flach klonnen
            </summary>
            <returns>Eine flache Kopie dieses Objektes</returns>
        </member>
        <member name="P:De.Boenigk.Utility.Formulary.Point3D.X">
            <summary>
            Koordinate X
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.Formulary.Point3D.Y">
            <summary>
            Koordinate Y
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.Formulary.Point3D.Z">
            <summary>
            Koordinate Z
            </summary>
        </member>
        <member name="T:De.Boenigk.Utility.Formulary.Point4D">
            <summary>
            4D Punkt für int- Zahlen
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.Point4D.#ctor">
            <summary>
            Standard Konstruktor
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.Point4D.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Konstruktor mit Angabe der X,Y,Z und A Koordinate
            </summary>
            <param name="aX">X Koordinate</param>
            <param name="aY">Y Koordinate</param>
            <param name="aZ">Z Koordinate</param>
            <param name="aA">A Koordinate</param>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.Point4D.Clone">
            <summary>
            Objekt flach klonnen
            </summary>
            <returns>Eine flache Kopie dieses Objektes</returns>
        </member>
        <member name="P:De.Boenigk.Utility.Formulary.Point4D.X">
            <summary>
            Koordinate X
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.Formulary.Point4D.Y">
            <summary>
            Koordinate Y
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.Formulary.Point4D.Z">
            <summary>
            Koordinate Z
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.Formulary.Point4D.A">
            <summary>
            Koordinate A
            </summary>
        </member>
        <member name="T:De.Boenigk.Utility.Formulary.PointF3D">
            <summary>
            3D Punkt für float- Zahlen
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.Formulary.PointF3D.Length">
            <summary>
            Gibt die GESAMMTE Länge eines PointF3D Objektes in Bytes
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.PointF3D.#ctor">
            <summary>
            Standard Konstruktor
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.PointF3D.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Konstruktor mit Angabe der X,Y,Z Koordinate
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.PointF3D.#ctor(System.Byte[],System.Int32)">
            <summary>
            Konstruktor mit Angabe der X,Y,Z Koordinaten als Byte Array
            </summary>
            <param name="aBytes">ArrayList mit Byte Objekten</param>
            <param name="aStartIndex">StartIndex</param>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.PointF3D.Clone">
            <summary>
            Objekt flach klonen
            </summary>
            <returns>Eine flache Kopie dieses Objektes</returns>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.PointF3D.ToByteArray">
            <summary>
            PointF3D als Byte Array wird zurückgegeben
            </summary>
            <returns>Byte Array</returns>
        </member>
        <member name="P:De.Boenigk.Utility.Formulary.PointF3D.X">
            <summary>
            Koordinate X
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.Formulary.PointF3D.Y">
            <summary>
            Koordinate Y
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.Formulary.PointF3D.Z">
            <summary>
            Koordinate Z
            </summary>
        </member>
        <member name="T:De.Boenigk.Utility.Formulary.PointF4D">
            <summary>
            4D Punkt für float- Zahlen
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.Formulary.PointF4D.Length">
            <summary>
            Gibt die GESAMMTE Länge eines PointF4D Objektes in Bytes
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.PointF4D.#ctor">
            <summary>
            Standard Konstruktor
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.PointF4D.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Konstruktor mit Angabe der X,Y,Z,A Koordinate
            </summary>
            <param name="aX">Zahl X</param>
            <param name="aY">Zahl Y</param>
            <param name="aZ">Zahl Z</param>
            <param name="aA">Zahl A</param>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.PointF4D.#ctor(System.Byte[],System.Int32)">
            <summary>
            Konstruktor mit Angabe der X,Y,Z,A Koordinaten als Byte Array
            </summary>
            <param name="aBytes">ArrayList mit Byte Objekten</param>
            <param name="aStartIndex">StartIndex</param>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.PointF4D.ToByteArray">
            <summary>
            PointF4D als Byte Array wird zurückgegeben
            </summary>
            <returns>Byte Array</returns>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.PointF4D.Clone">
            <summary>
            Objekt flach klonnen
            </summary>
            <returns>Eine flache Kopie dieses Objektes</returns>
        </member>
        <member name="P:De.Boenigk.Utility.Formulary.PointF4D.X">
            <summary>
            Koordinate X
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.Formulary.PointF4D.Y">
            <summary>
            Koordinate Y
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.Formulary.PointF4D.Z">
            <summary>
            Koordinate Z
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.Formulary.PointF4D.A">
            <summary>
            Koordinate A
            </summary>
        </member>
        <member name="T:De.Boenigk.Utility.CNC.Position">
            <summary>
            Position enthält alle Informationen, die für die Positionanzeige zuständig sind.
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.CNC.Position.C_DefaulInitialValue">
            <summary>
            Wenn kein Initial wert vorhanden, dann ist Default Wert -999.999 enthalten
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Position.#ctor">
            <summary>
            Standard Konstruktor
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Position.#ctor(De.Boenigk.Utility.CNC.PositionType)">
            <summary>
            Standard Konstruktor mit Angabe des Positiontyps
            </summary>
            <param name="aType">Positiontyp (PositionType Konstante)</param>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Position.#ctor(De.Boenigk.Utility.CNC.PositionType,De.Boenigk.Utility.Formulary.PointD4D)">
            <summary>
            Standard Konstruktor mit Angabe des Positiontyps
            </summary>
            <param name="aType">Positiontyp (PositionType Konstante)</param>
            <param name="aPointD4D">PointD4D</param>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Position.#ctor(De.Boenigk.Utility.CNC.PositionType,De.Boenigk.Utility.Formulary.PointD5D)">
            <summary>
            Standard Konstruktor mit Angabe des Positiontyps
            </summary>
            <param name="aType">Positiontyp (PositionType Konstante)</param>
            <param name="aPointD5D">PointD5D</param>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Position.#ctor(De.Boenigk.Utility.CNC.PositionType,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Standard Konstruktor mit Angabe des Positiontyps, X, Y, Z und A Koordinaten
            </summary>
            <param name="aType">Positiontyp (PositionType Konstante)</param>
            <param name="aX">X Position</param>
            <param name="aY">Y Position</param>
            <param name="aZ">Z Position</param>
            <param name="aA">A Position</param>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Position.#ctor(De.Boenigk.Utility.CNC.PositionType,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Standard Konstruktor mit Angabe des Positiontyps, X, Y, Z, A und B Koordinaten
            </summary>
            <param name="aType">Positiontyp (PositionType Konstante)</param>
            <param name="aX">X Position</param>
            <param name="aY">Y Position</param>
            <param name="aZ">Z Position</param>
            <param name="aA">A Position</param>
            <param name="aB">B Position</param>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Position.#ctor(De.Boenigk.Utility.CNC.PositionType,System.Double,System.Double,System.Double,System.Double,System.String,System.Boolean)">
            <summary>
            Standard Konstruktor mit Angabe des Positiontyps, X, Y und Z Koordinaten
            </summary>
            <param name="aType">Positiontyp (PositionType Konstante)</param>
            <param name="aX">X Position</param>
            <param name="aY">Y Position</param>
            <param name="aZ">Z Position</param>
            <param name="aA">A Position</param>
            <param name="aText">Text, Beschreibung</param>
            <param name="aUsed">rue, Position wird verwendet</param>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Position.GetString">
            <summary>
            Gibt die Position als String zurück
            </summary>
            <returns>Position als String</returns>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Position.Clone">
            <summary>
            Objekt dieser Klasse wird geklonnt
            </summary>
            <returns>Eine Kopie dieses Objektes</returns>
        </member>
        <member name="M:De.Boenigk.Utility.CNC.Position.Equals(System.Object)">
            <summary>
            Vergleicht Inhalt der beiden Position Objekte
            </summary>
            <param name="obj">Position Objekt</param>
            <returns>True, Inhalt der beiden Position Objekte ist gleich</returns>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.Position.Name">
            <summary>
            Default Position Name als Text
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.Position.Used">
            <summary>
            True, Position wird verwendet
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.Position.Text">
            <summary>
            Text
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.Position.Type">
            <summary>
            Positiontyp
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.Position.X">
            <summary>
            Punkt X in Millimeter
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.Position.Y">
            <summary>
            Punkt Y in Millimeter
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.Position.Z">
            <summary>
            Punkt Z in Millimeter
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.Position.Z2">
            <summary>
            Punkt Z2 in Millimeter
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.Position.A">
            <summary>
            Punkt A in Millimeter
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.Position.B">
            <summary>
            Punkt B in Millimeter
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.Position.A2">
            <summary>
            Punkt A2 in Millimeter
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.Position.MaterialHeight">
            <summary>
            Materialhöhe
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.CNC.Position.ToolLength">
            <summary>
            Werkzeuglänge
            </summary>
        </member>
        <member name="T:De.Boenigk.SMC5D.Core.Mill.Radius">
            <summary>
            Berechnet Radius und Winkel
            </summary>
        </member>
        <member name="M:De.Boenigk.SMC5D.Core.Mill.Radius.#ctor">
            <summary>
            Konstruktor
            </summary>
        </member>
        <member name="M:De.Boenigk.SMC5D.Core.Mill.Radius.Get(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Berechnet Radius aus 3 Punkten bzw. aus 2 Vekoren
            </summary>
            <param name="aX1">X des ersten Punktes</param>
            <param name="aY1">Y des ersten Punktes</param>
            <param name="aX2">X des zweiten Punktes</param>
            <param name="aY2">Y des zweiten Punktes</param>
            <param name="aX3">X des dritten Punktes</param>
            <param name="aY3">Y des dritten Punktes</param>
            <returns>Berechneter Radius</returns>
        </member>
        <member name="M:De.Boenigk.SMC5D.Core.Mill.Radius.GetAngle(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Berechnet Winkel zwischen 3 Punkten
            </summary>
            <param name="aX1">X des ersten Punktes</param>
            <param name="aY1">Y des ersten Punktes</param>
            <param name="aX2">X des zweiten Punktes</param>
            <param name="aY2">Y des zweiten Punktes</param>
            <param name="aX3">X des dritten Punktes</param>
            <param name="aY3">Y des dritten Punktes</param>
            <returns>Berechneter Radius</returns>
        </member>
        <member name="M:De.Boenigk.SMC5D.Core.Mill.Radius.Get(De.Boenigk.Utility.Formulary.PointD,De.Boenigk.Utility.Formulary.PointD,De.Boenigk.Utility.Formulary.PointD)">
            <summary>
            Berechnet Radius aus 3 Punkten bzw. aus 2 Vekoren
            </summary>
            <param name="aP1">Erster Punkt</param>
            <param name="aP2">Zweiter Punkt</param>
            <param name="aP3">Dritter Punkt</param>
            <returns>Berechneter Radius</returns>
        </member>
        <member name="M:De.Boenigk.SMC5D.Core.Mill.Radius.GetAngle(De.Boenigk.Utility.Formulary.PointD,De.Boenigk.Utility.Formulary.PointD,De.Boenigk.Utility.Formulary.PointD)">
            <summary>
            Berechnet Winkel zwischen 3 Punkten
            </summary>
            <param name="aP1">Erster Punkt</param>
            <param name="aP2">Zweiter Punkt</param>
            <param name="aP3">Dritter Punkt</param>
            <returns>Berechneter Radius</returns>
        </member>
        <member name="M:De.Boenigk.SMC5D.Core.Mill.Radius.CreateDelta(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Delta wird berechnet
            </summary>
            <param name="aX1">X des ersten Punktes</param>
            <param name="aY1">Y des ersten Punktes</param>
            <param name="aX2">X des zweiten Punktes</param>
            <param name="aY2">Y des zweiten Punktes</param>
            <param name="aX3">X des dritten Punktes</param>
            <param name="aY3">Y des dritten Punktes</param>
        </member>
        <member name="M:De.Boenigk.SMC5D.Core.Mill.Radius.CreateParam">
            <summary>
            Param wird berechnet
            </summary>
        </member>
        <member name="M:De.Boenigk.SMC5D.Core.Mill.Radius.CreateK">
            <summary>
            K wird berechnet
            </summary>
            <returns>K</returns>
        </member>
        <member name="T:De.Boenigk.Utility.Formulary.VectorArgCutPoints">
            <summary>
            Ermittelt Schnittpunkte zwischen Kreis und Vektor
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.VectorArgCutPoints.#ctor">
            <summary>
            Standard Konstruktor
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.VectorArgCutPoints.Calculate(System.Drawing.PointF,System.Single,De.Boenigk.Utility.CNC.Polygon,De.Boenigk.Utility.CNC.Polygon)">
            <summary>
            Ermittelt Schnittpunkte zwischen Kreis und Vektor
            </summary>
            <param name="aArcCentre">Mittelpunkt des Kreis</param>
            <param name="aRadius">Radius des Kreises</param>
            <param name="aFirst">Erster Punkt des Vektors</param>
            <param name="aSecond">Letzter Punkt des Vektors</param>
            <returns>Schnittpunkte PointF Objekte in einer ArrayList, keine Schnittpunkte dann ist die ArrayList leer</returns>
        </member>
        <member name="M:De.Boenigk.Utility.Formulary.VectorArgCutPoints.IsCutPoint(De.Boenigk.Utility.CNC.Polygon,De.Boenigk.Utility.CNC.Polygon,System.Drawing.PointF)">
            <summary>
            Prüft ob der Punkt im Vektor liegt
            </summary>
            <param name="aFirstPolygon">Erster Punkt des Vektors</param>
            <param name="aSecondPolygon">Zweiter Punkt des Vektors</param>
            <param name="aCutPoint">Schnittpunkt</param>
            <returns>True, Punkt im Vektor</returns>
        </member>
        <member name="P:De.Boenigk.Utility.Formulary.VectorArgCutPoints.Range">
            <summary>
            True, Entfernung der Kreismitte zu einer Linie im Bereich
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.Formulary.VectorArgCutPoints.Result">
            <summary>
            ArrayList mit PointF Objekten
            </summary>
        </member>
        <member name="T:De.Boenigk.Utility.Parser.DllString">
            <summary>
            CString DLLImports 
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Parser.DllString.DToStr(System.Double,System.String@)">
            <summary>
            Konvertiert Double Variable nach string
            </summary>
            <param name="aValue">Double- Wert was konvertiert wird</param>
            <param name="aOut">Konvertierter Double Wert als eine Zeichenkette (string)</param>
        </member>
        <member name="M:De.Boenigk.Utility.Parser.DllString.StrToF(System.String)">
            <summary>
            Stellt die Funktion atof zur Verfügung
            </summary>
            <param name="aString">String</param>
            <returns>Float Zahl</returns>
        </member>
        <member name="M:De.Boenigk.Utility.Parser.DllString.StrToD(System.String)">
            <summary>
            Stellt die Funktion atod zur Verfügung
            </summary>
            <param name="aString">String</param>
            <returns>Float Zahl</returns>
        </member>
        <member name="M:De.Boenigk.Utility.Parser.DllString.StrToL(System.String)">
            <summary>
            Stellt die Funktion atoi zur Verfügung
            </summary>
            <param name="aString">String</param>
            <returns>Long Zahl</returns>
        </member>
        <member name="M:De.Boenigk.Utility.Parser.DllString.StrLastI">
            <summary>
            Gibt den letzten Index zurück
            </summary>
            <returns>Index</returns>
        </member>
        <member name="M:De.Boenigk.Utility.Parser.DllString.StrStr(System.String,System.String)">
            <summary>
            Sucht Teilstring in einem String
            </summary>
            <param name="aString">String</param>
            <param name="aSubString">Teilstring</param>
            <returns>Int Zahl als Position des TeilString im String oder -1</returns>
        </member>
        <member name="M:De.Boenigk.Utility.Parser.DllString.StrChr(System.String,System.Char)">
            <summary>
            Sucht Char Zeichen in einem String
            </summary>
            <param name="aString">String</param>
            <param name="aChr">Char Zeichen</param>
            <returns>Int Zahl als Position des TeilString im String oder -1</returns>
        </member>
        <member name="T:De.Boenigk.Utility.Parser.DoubleConverter">
            <summary>
            A class to allow the conversion of doubles to string representations of
            their exact decimal values. The implementation aims for readability over
            efficiency.
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Parser.DoubleConverter.ToExactString(System.Double)">
            <summary>
            Converts the given double to a string representation of its
            exact decimal value.
            </summary>
            <param name="d">The double to convert.</param>
            <returns>A string representation of the double's exact decimal value.</returns>
        </member>
        <member name="M:De.Boenigk.Utility.Parser.DoubleConverter.ArbitraryDecimal.#ctor(System.Int64)">
            <summary> 
            Constructs an arbitrary decimal expansion from the given long.
            The long must not be negative.
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Parser.DoubleConverter.ArbitraryDecimal.MultiplyBy(System.Int32)">
            <summary>
            Multiplies the current expansion by the given amount, which should
            only be 2 or 5.
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Parser.DoubleConverter.ArbitraryDecimal.Shift(System.Int32)">
            <summary>
            Shifts the decimal point; a negative value makes
            the decimal expansion bigger (as fewer digits come after the
            decimal place) and a positive value makes the decimal
            expansion smaller.
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Parser.DoubleConverter.ArbitraryDecimal.Normalize">
            <summary>
            Removes leading/trailing zeroes from the expansion.
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Parser.DoubleConverter.ArbitraryDecimal.ToString">
            <summary>
            Converts the value to a proper decimal string representation.
            </summary>
        </member>
        <member name="T:De.Boenigk.Utility.Parser.StringFilter">
            <summary>
            Wenn möglich filtert StringFilter diverse falsche Zeichen heraus!
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Parser.StringFilter.#ctor">
            <summary>
            Standard Konstruktor
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Parser.StringFilter.GetDecimal(System.String)">
            <summary>
            Eine dezimale Zahl als String wird überprüft 
            und gegebenfalls falsche Zeichen entfernt.
            </summary>
            <param name="aText">Zahl als String</param>
            <returns>Zahl als String</returns>
        </member>
        <member name="T:De.Boenigk.Utility.Parser.StringInsert">
            <summary>
            Ein String wird an Stellen die mit '%' + Zahl eingefügt.
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Parser.StringInsert.#ctor">
            <summary>
            Standard Konstruktor
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Parser.StringInsert.Get(System.String,System.String[])">
            <summary>
            Es wird nach den Zeichen '%1, %2, %3, etc' gesucht. Wenn diese Zeichen gefunden, 
            dann werden die Zeichen 'aInsert' an diesen Stellen eingefügt.
            </summary>
            <param name="aString">String in den der String 'aInsert' eingefügt werden soll</param>
            <param name="aInsert">Eine Liste der Texte die hinzugefügt werden können</param>
            <returns>Text wird als String oder falls nicht gefunden als null zurückgeben</returns>
        </member>
        <member name="M:De.Boenigk.Utility.Parser.StringInsert.Get(System.String,System.String)">
            <summary>
            Es wird nach dem Zeichen '%1' gesucht. Wenn dieser Zeichen gefunden, 
            dann wird der String 'aInsert' an dieser Stelle eingefügt.
            </summary>
            <param name="aString">String in den der String 'aInsert' eingefügt werden soll</param>
            <param name="aInsert">String dass eingefügt wird</param>
            <returns>Text wird als String oder falls nicht gefunden als null zurückgeben</returns>
        </member>
        <member name="M:De.Boenigk.Utility.Parser.StringInsert.Insert(System.String,System.Int32,System.String)">
            <summary>
            Ein Text wird an den mit '%' + Zahl vorgezeichneten Stellen im aParentText hinzugefügt.
            </summary>
            <param name="aParentText">Text in den '%' gesucht wird und gegebenfalls Text eingefügt wird </param>
            <param name="aNumber">Die Stelle wird mit einem bestimmten Nummer markiert z.B. %11 Die Nummer wird dann gesucht.</param>
            <param name="aText">Test dass eingefügt wird</param>
            <returns>Text wird zurückgegeben</returns>
        </member>
        <member name="T:De.Boenigk.Utility.Parser.StringParser">
            <summary>
            StringParser ist eine Hilfsklasse um Zahlen aus einem String zu filtern.
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.Parser.StringParser.C_LONG">
            <summary>
            Eine Ganz- Zahl
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.Parser.StringParser.C_FLOAT">
            <summary>
            Eine Nachkomma- Zahl
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.Parser.StringParser.myStrNumber">
            <summary>
            konvertierte String Zahl
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.Parser.StringParser.myFloat">
            <summary>
            konvertierte Float Zahl
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.Parser.StringParser.myIndex">
            <summary>
            Aktueller Index nach dem Parsen
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Parser.StringParser.#ctor">
            <summary>
            Standard Konstruktor
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Parser.StringParser.ParseToStrNumber(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Die Methode ParseToStrNumber ist ein Parser, der aus einen String 
            die Ganz- Zahl sucht und in StrNumber abspeichert. 
            </summary>
            <param name="aString">String, dass die Integer Zahl beinhaltet</param>
            <param name="aIndex">Startposition der Integer Zahl im String</param>
            <param name="aFirst">
            true - Hinter dem Index "aIndex" wird direkt eine Zahl erwartet 
            false - Hinter dem Index "aIndex" wird am nächsten liegende Zahl gesucht
            </param>
            <param name="aTyp">Typ der Zahl StringParser.C_FLOAT oder StringParser.C_LONG</param>
            <returns>True - Zahl ist erzeugt worden / False - keine Zahl gefunden</returns>
        </member>
        <member name="M:De.Boenigk.Utility.Parser.StringParser.ParseToFloatNumber(System.String,System.String,System.Boolean)">
            <summary>
            String Zahl wird nach float konvertiert und in der FloatNumber abgespeichert. 
            Dabei wird die Zahl in StrNumber auch abgespeichert.
            </summary>
            <param name="aString">String in der die Zahl gesucht wird</param>
            <param name="aSearchPoint">ein String nach der Zahl gesucht wird</param>
            <param name="aFirst">
            true - Hinter dem String "aSearchPoint" wird direkt eine Zahl erwartet 
            false - Hinter dem String "aSearchPoint" wird am nächsten liegende Zahl gesucht
            </param>
            <returns>True - Zahl ist erzeugt worden / False - keine Zahl gefunden</returns>
        </member>
        <member name="M:De.Boenigk.Utility.Parser.StringParser.ParseToFloatNumber(System.String,System.Int32,System.Boolean)">
            <summary>
            String Zahl wird nach float konvertiert und in der FloatNumber abgespeichert. 
            Dabei wird die Zahl in StrNumber auch abgespeichert.
            </summary>
            <param name="aString">String in der die Zahl gesucht wird</param>
            <param name="aIndex">Start Index</param>
            <param name="aFirst">
            true - Hinter dem Index "aIndex" wird direkt eine Zahl erwartet 
            false - Hinter dem Index "aIndex" wird am nächsten liegende Zahl gesucht
            </param>
            <returns>True - Zahl ist erzeugt worden / False - keine Zahl gefunden</returns>
        </member>
        <member name="M:De.Boenigk.Utility.Parser.StringParser.RemoveBrace(System.String)">
            <summary>
            Der String in Klammern () wird rausgeschnitten
            </summary>
            <param name="aString">String, dass Klammern enthält</param>
            <returns>String ohne Klammern</returns>
        </member>
        <member name="P:De.Boenigk.Utility.Parser.StringParser.StrNumber">
            <summary>
            String Zahl dass die Klasse ParseToStrNumber erzeugt hat
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.Parser.StringParser.FloatNumber">
            <summary>
            Float Zahl dass die Klasse ParseToFloatNumber erzeugt hat
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.Parser.StringParser.Index">
            <summary>
            aktueller Index gerade durchgeführten Parse 
            </summary>
        </member>
        <member name="T:De.Boenigk.Utility.Parser.StructByteArray">
            <summary>
            Konvertiert eine struct nach byte array und umgekehrt!
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Parser.StructByteArray.RawDeserializeEx(System.Byte[],System.Type)">
            <summary>
            Byte Array wird nach Struct konvertiert
            </summary>
            <param name="rawdatas">Byte Array was konvertiert wird</param>
            <param name="anytype">Typw of structur</param>
            <returns>Gibt Struct Objekt zurück</returns>
        </member>
        <member name="M:De.Boenigk.Utility.Parser.StructByteArray.RawSerializeEx(System.Object)">
            <summary>
            Struct nach Byte Array konvertieren
            </summary>
            <param name="anything">Structur</param>
            <returns>Byte Array</returns>
        </member>
        <member name="M:De.Boenigk.Utility.Parser.StructByteArray.CopyTo(System.Byte[],System.Int32)">
            <summary>
            Kopiert ein Byte Array in ein anderes mit einer asngegebenen Länge. 
            Der Byte Array wird ab Index 0 des neuen Byte Arrays kopiert.
            </summary>
            <param name="aByteArray">Byte Array dass kopiert wird</param>
            <param name="aLength">Länge des neuen Byte Arrays</param>
            <returns>Neues Byte Array oder wenn Ziel zu klein altes Byte Array ohne Veränderung</returns>
        </member>
        <member name="M:De.Boenigk.Utility.Tools.DesktopLink.Create(System.String,System.String,System.String,System.String)">
            <summary>
            Erzeugt ein Link auf dem Desktop
            </summary>
            <param name="aName">Link Name</param>
            <param name="aTargetPath">Zu ausführende Datei</param>
            <param name="aIconLocation">Icon Datei</param>
            <param name="aArguments">Argumente</param>
        </member>
        <member name="M:De.Boenigk.Utility.Tools.Registry.#ctor">
            <summary>
            Konstruktor
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Tools.Registry.SetValue(System.String,System.String,System.String)">
            <summary>
            Wert in Registry schreiben
            </summary>
            <param name="aSubkey">Pfad in Registry "SOFTWARE\\SuperSoft\\App"</param>
            <param name="aValue">Inhalt der Variable</param>
            <param name="aContent">Variable- Name</param>
        </member>
        <member name="M:De.Boenigk.Utility.Tools.Registry.SubKeyExist(System.String)">
            <summary>
            Prüft ob Pfad in Registry enthalten ist
            </summary>
            <param name="aSubkey">Pfad in Registry "SOFTWARE\\SuperSoft\\App"</param>
            <returns>True, Pfad ist enthalten</returns>
        </member>
        <member name="M:De.Boenigk.Utility.Tools.Registry.ReadSubKey_Software(System.String,System.String)">
            <summary>
            Liest ein Wert aus einer Variable in Registry
            </summary>
            <param name="aSubKey">Pfad in Registry "SOFTWARE\\SuperSoft\\App"</param>
            <param name="aValueName">Variable- Name</param>
            <returns>Wert der Variable- Name</returns>
        </member>
        <member name="T:De.Boenigk.Utility.Tools.TimerState">
            <summary>
            Timer Status
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Tools.TimerState.#ctor">
            <summary>
            Standard Konstruktor
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.Tools.TimerState.Stopped">
            <summary>
            True,Timer ist gestoppt
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.Tools.TimerState.Counter">
            <summary>
            Zugriff auf Zähler
            </summary>
        </member>
        <member name="P:De.Boenigk.Utility.Tools.TimerState.Timer">
            <summary>
            Zugriff auf System.Threading.Timer
            </summary>
        </member>
        <member name="T:De.Boenigk.Utility.Tools.WinOS">
            <summary>
            Windows Version auslesen
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Tools.WinOS.GetOS">
            <summary>
            Windows Version als Konstante
            </summary>
            <returns></returns>
        </member>
        <member name="M:De.Boenigk.Utility.Tools.WinOS.GetOSString">
            <summary>
            Liest Windows Version aus 
            </summary>
            <returns>Windows Version als string</returns>
        </member>
        <member name="M:De.Boenigk.Utility.Tools.WinOS.GetSP">
            <summary>
            Liest Service Pack aus!"
            </summary>
            <returns>Service Pack als String</returns>
        </member>
        <member name="T:De.Boenigk.Utility.WMI.Instance">
            <summary>
            Überprüft ob eine Instanz des Programms schon geöffnet. 
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.WMI.Instance.#ctor">
            <summary>
            Standard Konstruktor
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.WMI.Instance.Two">
            <summary>
            Überprüft ob eine Instanz des Programms schon mind. 2 mal geöffnet ist.
            Wenn Instances bereits offen, dann wird die erste Instanz angezeigt und TRUE zurückgegeben
            </summary>
            <returns>True, Instanz bereits offen</returns>
        </member>
        <member name="M:De.Boenigk.Utility.WMI.Instance.One(System.String)">
            <summary>
            Überprüft ob eine Instanz des Programms schon geöffnet. 
            Wenn Instanz bereits offen, dann wird TRUE zurückgegeben
            </summary>
            <param name="aByName">Name des Processes z.B. cnc.vshost für cncGraF</param>
            <returns>True, Instanz bereits offen</returns>
        </member>
        <member name="M:De.Boenigk.Utility.WMI.Instance.Close(System.String,System.String)">
            <summary>
            Alle Instance schließen
            </summary>
            <param name="aByName">Name des Processes z.B. cnc.vshost für cncGraF</param>
            <param name="aMainWindowTitleSubString">Programmname im Windows Fenster</param>
        </member>
        <member name="M:De.Boenigk.Utility.WMI.Instance.One(System.String,System.String)">
            <summary>
            Überprüft ob eine Instanz des Programms schon geöffnet. 
            Wenn Instanz bereits offen, dann wird TRUE zurückgegeben
            </summary>
            <param name="aByName">Name des Processes z.B. cnc.vshost für cncGraF</param>
            <param name="aMainWindowTitleSubString">Programmname im Windows Fenster</param>
            <returns>True, Instanz bereits offen</returns>
        </member>
        <member name="M:De.Boenigk.Utility.WMI.Instance.HandleRunningInstance(System.Diagnostics.Process)">
            <summary>
            Bestehenden Process anzeigen
            </summary>
            <param name="aInstance">Process dass angezeigt wird</param>
        </member>
        <member name="P:De.Boenigk.Utility.WMI.Instance.Count">
            <summary>
            
            </summary>
        </member>
        <member name="T:De.Boenigk.Utility.Tools.Memory">
            <summary>
            Pdisischen Speicher auslesen
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.Tools.Memory.GetTotalRAM">
            <summary>
            Gibt gesammten phisischen Speicher zurück in GB
            </summary>
            <returns>Phisischen Speicher in GB</returns>
        </member>
        <member name="T:De.Boenigk.Utility.WMI.POWERBROADCAST">
             <summary>
             Power Manager Nachrichten
             
             Mögliche Anbiendungen
             
             1.
                Microsoft.Win32.SystemEvents.PowerModeChanged += new Microsoft.Win32.PowerModeChangedEventHandler(SystemEvents_PowerModeChanged);
             
                void SystemEvents_PowerModeChanged(object sender, Microsoft.Win32.PowerModeChangedEventArgs e)
                {
                    if (e.Mode == Microsoft.Win32.PowerModes.Suspend)
                    {
            
                    }
                    else
                    {
                        if (e.Mode == Microsoft.Win32.PowerModes.Resume)
                        {
            
                        }
                    }
            
                    throw new NotImplementedException();
                }
             
             2.
                protected override void WndProc(ref System.Windows.Forms.Message msg)
                {
                    if (msg.Msg == De.Boenigk.Utility.WMI.WM.WM_POWERBROADCAST) {
            
                        if (msg.WParam == (IntPtr) De.Boenigk.Utility.WMI.POWERBROADCAST.PBT_APMSTANDBY)
                        {
                            Console.WriteLine("Ruhezustand oder Standby wird gestartet, Rechner ist aus!");
                        }
            
                        if (msg.WParam == (IntPtr) De.Boenigk.Utility.WMI.POWERBROADCAST.PBT_APMRESUMESTANDBY)
                        {
                            Console.WriteLine("Ruhezustand oder Standby wird gestartet, Rechner ist aus!");
                        }
                    }
                    base.WndProc(ref msg);
                }
             </summary>
        </member>
        <member name="T:De.Boenigk.Utility.WMI.Sys">
            <summary>
            Ermittelt System- Verzeichnis z.B.: c:\\windows
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.WMI.Sys.#ctor">
            <summary>
            Konstruktor
            </summary>
        </member>
        <member name="M:De.Boenigk.Utility.WMI.Sys.GetSysPath">
            <summary>
            Ermittelt System- Verzeichnis z.B.: c:\\windows
            </summary>
            <returns>System- Verzeichnis wird zurückgegeben</returns>
        </member>
        <member name="T:De.Boenigk.Utility.WMI.WM">
            <summary>
            WM (Windows Messages) Konstanten
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_NCRBUTTONDBLCLK">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_NCMBUTTONDOWN">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_CREATE">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_SETICON">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_CTLCOLOR">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_NCRBUTTONUP">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_MOUSEFIRST">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_ENTERSIZEMOVE">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_MDISETMENU">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_NCPAINT">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_SETHOTKEY">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_NCXBUTTONDOWN">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_HSCROLL">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_CHOOSEFONT_GETLOGFONT">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_PASTE">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_LBUTTONUP">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_CHARTOITEM">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_CUT">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_NEXTMENU">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_RBUTTONDBLCLK">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_NCACTIVATE">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_USERCHANGED">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_UPDATEUISTATE">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_GETOBJECT">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_WINDOWPOSCHANGING">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_TIMER">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_IME_CHAR">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_COMPAREITEM">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_SYSCOMMAND">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_NCCALCSIZE">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_NCRBUTTONDOWN">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_HELP">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_INPUTLANGCHANGE">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_TCARD">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_IME_COMPOSITION">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_QUERYDRAGICON">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_DEADCHAR">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_SETFOCUS">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_IME_KEYLAST">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_GETHOTKEY">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_IME_KEYDOWN">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_MDIICONARRANGE">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_DRAWITEM">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_CLEAR">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_NOTIFY">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_CTLCOLORMSGBOX">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_XBUTTONDBLCLK">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_SYSKEYUP">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_NULL">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_QUERYOPEN">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_IME_NOTIFY">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_PENWINLAST">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_REFLECT">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_CHANGEUISTATE">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_MDIDESTROY">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_CTLCOLORLISTBOX">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_SIZING">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_MOUSEACTIVATE">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_CTLCOLORBTN">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_DEVMODECHANGE">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_SETTINGCHANGE">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_NOTIFYFORMAT">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_AFXFIRST">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_NCLBUTTONDBLCLK">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_HOTKEY">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_HSCROLLCLIPBOARD">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_SHOWWINDOW">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_MEASUREITEM">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_CAPTURECHANGED">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_IME_KEYUP">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_LBUTTONDBLCLK">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_NEXTDLGCTL">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_KILLTIMER">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_MDITILE">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_XBUTTONDOWN">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_WININICHANGE">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_RBUTTONUP">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_MDICREATE">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_EXITSIZEMOVE">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_KEYLAST">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_ASKCBFORMATNAME">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_QUERYUISTATE">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_MDICASCADE">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_SYSKEYDOWN">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_MDIACTIVATE">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_IME_CONTROL">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_DEVICECHANGE">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_ACTIVATE">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_VSCROLL">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_CTLCOLORSTATIC">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_VSCROLLCLIPBOARD">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_HANDHELDFIRST">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_LBUTTONDOWN">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_MOVE">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_XBUTTONUP">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_VKEYTOITEM">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_MDIREFRESHMENU">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_SETREDRAW">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_CANCELJOURNAL">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_CTLCOLORDLG">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_MOVING">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_GETDLGCODE">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_MDINEXT">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_POWERBROADCAST">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_GETTEXTLENGTH">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_SPOOLERSTATUS">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_NCXBUTTONUP">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_SIZECLIPBOARD">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_NCCREATE">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_CTLCOLOREDIT">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_MDIGETACTIVE">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_RBUTTONDOWN">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_ERASEBKGND">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_PENWINFIRST">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_ENABLE">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_DESTROYCLIPBOARD">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_CONTEXTMENU">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_SYSCOLORCHANGE">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_APP">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_MDIMAXIMIZE">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_HANDHELDLAST">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_THEMECHANGED">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_CHANGECBCHAIN">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_MOUSELEAVE">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_INPUTLANGCHANGEREQUEST">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_SYSDEADCHAR">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_DESTROY">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_CTLCOLORSCROLLBAR">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_NCXBUTTONDBLCLK">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_KEYDOWN">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_IME_COMPOSITIONFULL">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_MBUTTONDOWN">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_CLOSE">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_NCMBUTTONDBLCLK">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_MDIRESTORE">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_POWER">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_NCMOUSEMOVE">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_SETTEXT">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_UNDO">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_MENUCHAR">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_FONTCHANGE">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_DROPFILES">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_MOUSEWHEEL">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_COMMAND">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_PALETTECHANGED">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_ENDSESSION">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_PRINT">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_NCLBUTTONDOWN">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_KILLFOCUS">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_COPYDATA">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_PAINT">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_CANCELMODE">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_GETTEXT">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_ENTERIDLE">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_PAINTICON">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_MOUSEMOVE">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_MENUSELECT">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_NCMBUTTONUP">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_STYLECHANGING">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_NCLBUTTONUP">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_EXITMENULOOP">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_WINDOWPOSCHANGED">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_NCDESTROY">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_DELETEITEM">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_SETCURSOR">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_QUERYNEWPALETTE">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_NCMOUSELEAVE">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_RENDERFORMAT">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_GETMINMAXINFO">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_DISPLAYCHANGE">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_PAINTCLIPBOARD">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_SIZE">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_COMPACTING">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_KEYFIRST">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_MOUSELAST">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_GETICON">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_MOUSEHOVER">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_COMMNOTIFY">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_IME_SETCONTEXT">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_KEYUP">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_AFXLAST">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_CHAR">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_CHILDACTIVATE">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_PRINTCLIENT">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_ACTIVATEAPP">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_MBUTTONDBLCLK">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_WTSSESSION_CHANGE">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_IME_ENDCOMPOSITION">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_DRAWCLIPBOARD">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_ICONERASEBKGND">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_USER">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_IME_SELECT">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_INITMENU">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_INITMENUPOPUP">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_MBUTTONUP">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_SYSCHAR">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_TIMECHANGE">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_COPY">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_CREATETIMER">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_QUEUESYNC">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_PALETTEISCHANGING">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_NCHITTEST">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_UNINITMENUPOPUP">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_PARENTNOTIFY">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_QUIT">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_SETFONT">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_GETFONT">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_IME_STARTCOMPOSITION">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_QUERYENDSESSION">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_STYLECHANGED">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_INITDIALOG">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_RENDERALLFORMATS">
            <summary>
            WM Constante
            </summary>
        </member>
        <member name="F:De.Boenigk.Utility.WMI.WM.WM_ENTERMENULOOP">
            <summary>
            WM Constante
            </summary>
        </member>
    </members>
</doc>
